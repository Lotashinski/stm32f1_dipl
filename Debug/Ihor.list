
Ihor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047a0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000618  080048ac  080048ac  000148ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ec4  08004ec4  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08004ec4  08004ec4  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ec4  08004ec4  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ec4  08004ec4  00014ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ec8  08004ec8  00014ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08004ecc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c8  20000018  08004ee4  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006e0  08004ee4  000206e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f469  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000217f  00000000  00000000  0002f4aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f28  00000000  00000000  00031630  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e28  00000000  00000000  00032558  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014a04  00000000  00000000  00033380  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000afab  00000000  00000000  00047d84  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000734ef  00000000  00000000  00052d2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c621e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004020  00000000  00000000  000c629c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08004894 	.word	0x08004894

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08004894 	.word	0x08004894

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <BMP_180_Init>:
#define BMP_OSS                     8
#define BMP_PRESSURE_DELAY          26

BmpStatus _update(Bmp180 *bmp, I2C_HandleTypeDef *i2c);

BmpStatus BMP_180_Init(Bmp180 *bmp, I2C_HandleTypeDef *i2c) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b08a      	sub	sp, #40	; 0x28
 8000160:	af02      	add	r7, sp, #8
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	6039      	str	r1, [r7, #0]
	bmp->isInit = 0;
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	2200      	movs	r2, #0
 800016a:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef res;
	uint8_t reg = BMP_AC1_H;
 800016c:	23aa      	movs	r3, #170	; 0xaa
 800016e:	77bb      	strb	r3, [r7, #30]

	bmp->_i2c = i2c;
 8000170:	687b      	ldr	r3, [r7, #4]
 8000172:	683a      	ldr	r2, [r7, #0]
 8000174:	631a      	str	r2, [r3, #48]	; 0x30

	res = HAL_I2C_Master_Transmit(i2c, BMP_ADDRESS, &reg, 1,
 8000176:	f107 021e 	add.w	r2, r7, #30
 800017a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800017e:	9300      	str	r3, [sp, #0]
 8000180:	2301      	movs	r3, #1
 8000182:	21ee      	movs	r1, #238	; 0xee
 8000184:	6838      	ldr	r0, [r7, #0]
 8000186:	f001 fef7 	bl	8001f78 <HAL_I2C_Master_Transmit>
 800018a:	4603      	mov	r3, r0
 800018c:	77fb      	strb	r3, [r7, #31]
	I2C_TIMEOUT);

	if (res != HAL_OK)
 800018e:	7ffb      	ldrb	r3, [r7, #31]
 8000190:	2b00      	cmp	r3, #0
 8000192:	d001      	beq.n	8000198 <BMP_180_Init+0x3c>
		return Bmp_Initialization_Error;
 8000194:	2300      	movs	r3, #0
 8000196:	e0a6      	b.n	80002e6 <BMP_180_Init+0x18a>

	uint8_t data[22] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 8000198:	f107 0308 	add.w	r3, r7, #8
 800019c:	2200      	movs	r2, #0
 800019e:	601a      	str	r2, [r3, #0]
 80001a0:	605a      	str	r2, [r3, #4]
 80001a2:	609a      	str	r2, [r3, #8]
 80001a4:	60da      	str	r2, [r3, #12]
 80001a6:	611a      	str	r2, [r3, #16]
 80001a8:	829a      	strh	r2, [r3, #20]
			0, 0, 0, 0 };

	res = HAL_I2C_Master_Receive(i2c, BMP_ADDRESS, data, 22, I2C_TIMEOUT);
 80001aa:	f107 0208 	add.w	r2, r7, #8
 80001ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001b2:	9300      	str	r3, [sp, #0]
 80001b4:	2316      	movs	r3, #22
 80001b6:	21ee      	movs	r1, #238	; 0xee
 80001b8:	6838      	ldr	r0, [r7, #0]
 80001ba:	f001 ffdb 	bl	8002174 <HAL_I2C_Master_Receive>
 80001be:	4603      	mov	r3, r0
 80001c0:	77fb      	strb	r3, [r7, #31]

	if (res != HAL_OK)
 80001c2:	7ffb      	ldrb	r3, [r7, #31]
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d001      	beq.n	80001cc <BMP_180_Init+0x70>
		return Bmp_Data_Transmit_Error;
 80001c8:	2301      	movs	r3, #1
 80001ca:	e08c      	b.n	80002e6 <BMP_180_Init+0x18a>

	bmp->isInit = 1;
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	2201      	movs	r2, #1
 80001d0:	701a      	strb	r2, [r3, #0]

	bmp->_AC1 = ((int16_t) data[0] << 8) | data[1];
 80001d2:	7a3b      	ldrb	r3, [r7, #8]
 80001d4:	021b      	lsls	r3, r3, #8
 80001d6:	b21a      	sxth	r2, r3
 80001d8:	7a7b      	ldrb	r3, [r7, #9]
 80001da:	b21b      	sxth	r3, r3
 80001dc:	4313      	orrs	r3, r2
 80001de:	b21a      	sxth	r2, r3
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	805a      	strh	r2, [r3, #2]
	bmp->_AC2 = ((int16_t) data[2] << 8) | data[3];
 80001e4:	7abb      	ldrb	r3, [r7, #10]
 80001e6:	021b      	lsls	r3, r3, #8
 80001e8:	b21a      	sxth	r2, r3
 80001ea:	7afb      	ldrb	r3, [r7, #11]
 80001ec:	b21b      	sxth	r3, r3
 80001ee:	4313      	orrs	r3, r2
 80001f0:	b21a      	sxth	r2, r3
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	809a      	strh	r2, [r3, #4]
	bmp->_AC3 = ((int16_t) data[4] << 8) | data[5];
 80001f6:	7b3b      	ldrb	r3, [r7, #12]
 80001f8:	021b      	lsls	r3, r3, #8
 80001fa:	b21a      	sxth	r2, r3
 80001fc:	7b7b      	ldrb	r3, [r7, #13]
 80001fe:	b21b      	sxth	r3, r3
 8000200:	4313      	orrs	r3, r2
 8000202:	b21a      	sxth	r2, r3
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	80da      	strh	r2, [r3, #6]
	bmp->_AC4 = ((uint16_t) data[6] << 8) | data[7];
 8000208:	7bbb      	ldrb	r3, [r7, #14]
 800020a:	021b      	lsls	r3, r3, #8
 800020c:	b21a      	sxth	r2, r3
 800020e:	7bfb      	ldrb	r3, [r7, #15]
 8000210:	b21b      	sxth	r3, r3
 8000212:	4313      	orrs	r3, r2
 8000214:	b21b      	sxth	r3, r3
 8000216:	b29a      	uxth	r2, r3
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	811a      	strh	r2, [r3, #8]
	bmp->_AC5 = ((uint16_t) data[8] << 8) | data[9];
 800021c:	7c3b      	ldrb	r3, [r7, #16]
 800021e:	021b      	lsls	r3, r3, #8
 8000220:	b21a      	sxth	r2, r3
 8000222:	7c7b      	ldrb	r3, [r7, #17]
 8000224:	b21b      	sxth	r3, r3
 8000226:	4313      	orrs	r3, r2
 8000228:	b21b      	sxth	r3, r3
 800022a:	b29a      	uxth	r2, r3
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	815a      	strh	r2, [r3, #10]
	bmp->_AC6 = ((uint16_t) data[10] << 8) | data[11];
 8000230:	7cbb      	ldrb	r3, [r7, #18]
 8000232:	021b      	lsls	r3, r3, #8
 8000234:	b21a      	sxth	r2, r3
 8000236:	7cfb      	ldrb	r3, [r7, #19]
 8000238:	b21b      	sxth	r3, r3
 800023a:	4313      	orrs	r3, r2
 800023c:	b21b      	sxth	r3, r3
 800023e:	b29a      	uxth	r2, r3
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	819a      	strh	r2, [r3, #12]
	bmp->_B1 = ((int16_t) data[12] << 8) | data[13];
 8000244:	7d3b      	ldrb	r3, [r7, #20]
 8000246:	021b      	lsls	r3, r3, #8
 8000248:	b21a      	sxth	r2, r3
 800024a:	7d7b      	ldrb	r3, [r7, #21]
 800024c:	b21b      	sxth	r3, r3
 800024e:	4313      	orrs	r3, r2
 8000250:	b21a      	sxth	r2, r3
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	81da      	strh	r2, [r3, #14]
	bmp->_B2 = ((int16_t) data[14] << 8) | data[15];
 8000256:	7dbb      	ldrb	r3, [r7, #22]
 8000258:	021b      	lsls	r3, r3, #8
 800025a:	b21a      	sxth	r2, r3
 800025c:	7dfb      	ldrb	r3, [r7, #23]
 800025e:	b21b      	sxth	r3, r3
 8000260:	4313      	orrs	r3, r2
 8000262:	b21a      	sxth	r2, r3
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	821a      	strh	r2, [r3, #16]
	bmp->_MB = ((int16_t) data[16] << 8) | data[17];
 8000268:	7e3b      	ldrb	r3, [r7, #24]
 800026a:	021b      	lsls	r3, r3, #8
 800026c:	b21a      	sxth	r2, r3
 800026e:	7e7b      	ldrb	r3, [r7, #25]
 8000270:	b21b      	sxth	r3, r3
 8000272:	4313      	orrs	r3, r2
 8000274:	b21a      	sxth	r2, r3
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	825a      	strh	r2, [r3, #18]
	bmp->_MC = ((int16_t) data[18] << 8) | data[19];
 800027a:	7ebb      	ldrb	r3, [r7, #26]
 800027c:	021b      	lsls	r3, r3, #8
 800027e:	b21a      	sxth	r2, r3
 8000280:	7efb      	ldrb	r3, [r7, #27]
 8000282:	b21b      	sxth	r3, r3
 8000284:	4313      	orrs	r3, r2
 8000286:	b21a      	sxth	r2, r3
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	829a      	strh	r2, [r3, #20]
	bmp->_MD = ((int16_t) data[20] << 8) | data[21];
 800028c:	7f3b      	ldrb	r3, [r7, #28]
 800028e:	021b      	lsls	r3, r3, #8
 8000290:	b21a      	sxth	r2, r3
 8000292:	7f7b      	ldrb	r3, [r7, #29]
 8000294:	b21b      	sxth	r3, r3
 8000296:	4313      	orrs	r3, r2
 8000298:	b21a      	sxth	r2, r3
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	82da      	strh	r2, [r3, #22]

	_update(bmp, i2c);
 800029e:	6839      	ldr	r1, [r7, #0]
 80002a0:	6878      	ldr	r0, [r7, #4]
 80002a2:	f000 f825 	bl	80002f0 <_update>
	bmp->_p_last_1 = bmp->Pressure;
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	61da      	str	r2, [r3, #28]
	bmp->_t_last_1 = bmp->Temperature;
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	619a      	str	r2, [r3, #24]

	_update(bmp, i2c);
 80002b6:	6839      	ldr	r1, [r7, #0]
 80002b8:	6878      	ldr	r0, [r7, #4]
 80002ba:	f000 f819 	bl	80002f0 <_update>
	bmp->_p_last_2 = bmp->_p_last_1;
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	69da      	ldr	r2, [r3, #28]
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	625a      	str	r2, [r3, #36]	; 0x24
	bmp->_t_last_2 = bmp->_t_last_1;
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	699a      	ldr	r2, [r3, #24]
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	621a      	str	r2, [r3, #32]
	bmp->_p_last_1 = bmp->Pressure;
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	61da      	str	r2, [r3, #28]
	bmp->_t_last_1 = bmp->Temperature;
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	619a      	str	r2, [r3, #24]

	BMP_180_Update(bmp);
 80002de:	6878      	ldr	r0, [r7, #4]
 80002e0:	f000 f980 	bl	80005e4 <BMP_180_Update>

	return Bmp_Ok;
 80002e4:	2303      	movs	r3, #3
}
 80002e6:	4618      	mov	r0, r3
 80002e8:	3720      	adds	r7, #32
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
	...

080002f0 <_update>:

BmpStatus _update(Bmp180 *bmp, I2C_HandleTypeDef *i2c) {
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b098      	sub	sp, #96	; 0x60
 80002f4:	af02      	add	r7, sp, #8
 80002f6:	6078      	str	r0, [r7, #4]
 80002f8:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef res;

	/*
	 * read temperature
	 */
	uint8_t to_transmit[2] = { BMP_CONTROL, BMP_MODE_TEMPERATURE };
 80002fa:	4bb8      	ldr	r3, [pc, #736]	; (80005dc <_update+0x2ec>)
 80002fc:	881b      	ldrh	r3, [r3, #0]
 80002fe:	823b      	strh	r3, [r7, #16]
	uint8_t receive_data[5] = { 0, 0, 0, 0, 0 };
 8000300:	f107 0308 	add.w	r3, r7, #8
 8000304:	2200      	movs	r2, #0
 8000306:	601a      	str	r2, [r3, #0]
 8000308:	711a      	strb	r2, [r3, #4]

	uint8_t *msc = &receive_data[0];
 800030a:	f107 0308 	add.w	r3, r7, #8
 800030e:	657b      	str	r3, [r7, #84]	; 0x54
	uint8_t *msb = &receive_data[2];
 8000310:	f107 0308 	add.w	r3, r7, #8
 8000314:	3302      	adds	r3, #2
 8000316:	653b      	str	r3, [r7, #80]	; 0x50
	uint8_t *lsb = &receive_data[3];
 8000318:	f107 0308 	add.w	r3, r7, #8
 800031c:	3303      	adds	r3, #3
 800031e:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint8_t *xlsb = &receive_data[4];
 8000320:	f107 0308 	add.w	r3, r7, #8
 8000324:	3304      	adds	r3, #4
 8000326:	64bb      	str	r3, [r7, #72]	; 0x48

	// start the measurement
	res = HAL_I2C_Master_Transmit(i2c, BMP_ADDRESS, to_transmit, 2,
 8000328:	f107 0210 	add.w	r2, r7, #16
 800032c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	2302      	movs	r3, #2
 8000334:	21ee      	movs	r1, #238	; 0xee
 8000336:	6838      	ldr	r0, [r7, #0]
 8000338:	f001 fe1e 	bl	8001f78 <HAL_I2C_Master_Transmit>
 800033c:	4603      	mov	r3, r0
 800033e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	I2C_TIMEOUT);
	if (res != HAL_OK)
 8000342:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <_update+0x5e>
		return Bmp_Data_Transmit_Error;
 800034a:	2301      	movs	r3, #1
 800034c:	e141      	b.n	80005d2 <_update+0x2e2>

	uint32_t tickstart = HAL_GetTick();
 800034e:	f001 f9c9 	bl	80016e4 <HAL_GetTick>
 8000352:	6438      	str	r0, [r7, #64]	; 0x40

	do {
		// read result
		res = HAL_I2C_Master_Transmit(i2c, BMP_ADDRESS, to_transmit, 1,
 8000354:	f107 0210 	add.w	r2, r7, #16
 8000358:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800035c:	9300      	str	r3, [sp, #0]
 800035e:	2301      	movs	r3, #1
 8000360:	21ee      	movs	r1, #238	; 0xee
 8000362:	6838      	ldr	r0, [r7, #0]
 8000364:	f001 fe08 	bl	8001f78 <HAL_I2C_Master_Transmit>
 8000368:	4603      	mov	r3, r0
 800036a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		I2C_TIMEOUT);
		if (res != HAL_OK)
 800036e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <_update+0x8a>
			return Bmp_Data_Transmit_Error;
 8000376:	2301      	movs	r3, #1
 8000378:	e12b      	b.n	80005d2 <_update+0x2e2>
		res = HAL_I2C_Master_Receive(i2c, BMP_ADDRESS, receive_data, 5,
 800037a:	f107 0208 	add.w	r2, r7, #8
 800037e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000382:	9300      	str	r3, [sp, #0]
 8000384:	2305      	movs	r3, #5
 8000386:	21ee      	movs	r1, #238	; 0xee
 8000388:	6838      	ldr	r0, [r7, #0]
 800038a:	f001 fef3 	bl	8002174 <HAL_I2C_Master_Receive>
 800038e:	4603      	mov	r3, r0
 8000390:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		I2C_TIMEOUT);
		if (res != HAL_OK)
 8000394:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000398:	2b00      	cmp	r3, #0
 800039a:	d001      	beq.n	80003a0 <_update+0xb0>
			return Bmp_Data_Transmit_Error;
 800039c:	2301      	movs	r3, #1
 800039e:	e118      	b.n	80005d2 <_update+0x2e2>

		if ((HAL_GetTick() - tickstart) > BMP_TEMPERATURE_DELAY) {
 80003a0:	f001 f9a0 	bl	80016e4 <HAL_GetTick>
 80003a4:	4602      	mov	r2, r0
 80003a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80003a8:	1ad3      	subs	r3, r2, r3
 80003aa:	2b05      	cmp	r3, #5
 80003ac:	d901      	bls.n	80003b2 <_update+0xc2>
			return Bmp_Timeout;
 80003ae:	2302      	movs	r3, #2
 80003b0:	e10f      	b.n	80005d2 <_update+0x2e2>
		}
	} while ((*msc >> 5) & 0x01);
 80003b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	095b      	lsrs	r3, r3, #5
 80003b8:	b2db      	uxtb	r3, r3
 80003ba:	f003 0301 	and.w	r3, r3, #1
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d1c8      	bne.n	8000354 <_update+0x64>
	uint32_t ut = (*msb << 8) + *lsb;
 80003c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80003c4:	781b      	ldrb	r3, [r3, #0]
 80003c6:	021b      	lsls	r3, r3, #8
 80003c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80003ca:	7812      	ldrb	r2, [r2, #0]
 80003cc:	4413      	add	r3, r2
 80003ce:	63fb      	str	r3, [r7, #60]	; 0x3c

	/*
	 * read pressure
	 */
	to_transmit[1] = BMP_MODE_PRESSURE;
 80003d0:	23f4      	movs	r3, #244	; 0xf4
 80003d2:	747b      	strb	r3, [r7, #17]

	// start the measurement
	res = HAL_I2C_Master_Transmit(i2c, BMP_ADDRESS, to_transmit, 2,
 80003d4:	f107 0210 	add.w	r2, r7, #16
 80003d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003dc:	9300      	str	r3, [sp, #0]
 80003de:	2302      	movs	r3, #2
 80003e0:	21ee      	movs	r1, #238	; 0xee
 80003e2:	6838      	ldr	r0, [r7, #0]
 80003e4:	f001 fdc8 	bl	8001f78 <HAL_I2C_Master_Transmit>
 80003e8:	4603      	mov	r3, r0
 80003ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	I2C_TIMEOUT);
	if (res != HAL_OK)
 80003ee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <_update+0x10a>
		return Bmp_Data_Transmit_Error;
 80003f6:	2301      	movs	r3, #1
 80003f8:	e0eb      	b.n	80005d2 <_update+0x2e2>

	tickstart = HAL_GetTick();
 80003fa:	f001 f973 	bl	80016e4 <HAL_GetTick>
 80003fe:	6438      	str	r0, [r7, #64]	; 0x40

	do {
		// read result
		res = HAL_I2C_Master_Transmit(i2c, BMP_ADDRESS, to_transmit, 1,
 8000400:	f107 0210 	add.w	r2, r7, #16
 8000404:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000408:	9300      	str	r3, [sp, #0]
 800040a:	2301      	movs	r3, #1
 800040c:	21ee      	movs	r1, #238	; 0xee
 800040e:	6838      	ldr	r0, [r7, #0]
 8000410:	f001 fdb2 	bl	8001f78 <HAL_I2C_Master_Transmit>
 8000414:	4603      	mov	r3, r0
 8000416:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		I2C_TIMEOUT);
		if (res != HAL_OK)
 800041a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <_update+0x136>
			return Bmp_Data_Transmit_Error;
 8000422:	2301      	movs	r3, #1
 8000424:	e0d5      	b.n	80005d2 <_update+0x2e2>
		res = HAL_I2C_Master_Receive(i2c, BMP_ADDRESS, receive_data, 5,
 8000426:	f107 0208 	add.w	r2, r7, #8
 800042a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800042e:	9300      	str	r3, [sp, #0]
 8000430:	2305      	movs	r3, #5
 8000432:	21ee      	movs	r1, #238	; 0xee
 8000434:	6838      	ldr	r0, [r7, #0]
 8000436:	f001 fe9d 	bl	8002174 <HAL_I2C_Master_Receive>
 800043a:	4603      	mov	r3, r0
 800043c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		I2C_TIMEOUT);
		if (res != HAL_OK)
 8000440:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <_update+0x15c>
			return Bmp_Data_Transmit_Error;
 8000448:	2301      	movs	r3, #1
 800044a:	e0c2      	b.n	80005d2 <_update+0x2e2>

		if ((HAL_GetTick() - tickstart) > BMP_PRESSURE_DELAY) {
 800044c:	f001 f94a 	bl	80016e4 <HAL_GetTick>
 8000450:	4602      	mov	r2, r0
 8000452:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000454:	1ad3      	subs	r3, r2, r3
 8000456:	2b1a      	cmp	r3, #26
 8000458:	d901      	bls.n	800045e <_update+0x16e>
			return Bmp_Timeout;
 800045a:	2302      	movs	r3, #2
 800045c:	e0b9      	b.n	80005d2 <_update+0x2e2>
		}
	} while ((*msc >> 5) & 0x01);
 800045e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	095b      	lsrs	r3, r3, #5
 8000464:	b2db      	uxtb	r3, r3
 8000466:	f003 0301 	and.w	r3, r3, #1
 800046a:	2b00      	cmp	r3, #0
 800046c:	d1c8      	bne.n	8000400 <_update+0x110>

	int32_t up = (((*msb) << 16) + ((*lsb) << 8) + *xlsb) >> (8 - BMP_OSS);
 800046e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	041a      	lsls	r2, r3, #16
 8000474:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	021b      	lsls	r3, r3, #8
 800047a:	4413      	add	r3, r2
 800047c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800047e:	7812      	ldrb	r2, [r2, #0]
 8000480:	4413      	add	r3, r2
 8000482:	63bb      	str	r3, [r7, #56]	; 0x38

	/*
	 * calculate
	 */
	// true temperature
	int32_t x1 = ((ut - bmp->_AC6) * bmp->_AC5) >> 15;
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	899b      	ldrh	r3, [r3, #12]
 8000488:	461a      	mov	r2, r3
 800048a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800048c:	1a9b      	subs	r3, r3, r2
 800048e:	687a      	ldr	r2, [r7, #4]
 8000490:	8952      	ldrh	r2, [r2, #10]
 8000492:	fb02 f303 	mul.w	r3, r2, r3
 8000496:	0bdb      	lsrs	r3, r3, #15
 8000498:	637b      	str	r3, [r7, #52]	; 0x34
	int32_t x2 = (bmp->_MC << 11) / (x1 + bmp->_MD);
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80004a0:	02da      	lsls	r2, r3, #11
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80004a8:	4619      	mov	r1, r3
 80004aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80004ac:	440b      	add	r3, r1
 80004ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80004b2:	633b      	str	r3, [r7, #48]	; 0x30
	int32_t b5 = x1 + x2;
 80004b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80004b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004b8:	4413      	add	r3, r2
 80004ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	bmp->Temperature = (b5 + 8) >> 4;
 80004bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004be:	3308      	adds	r3, #8
 80004c0:	111a      	asrs	r2, r3, #4
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	635a      	str	r2, [r3, #52]	; 0x34

	//true pressure
	int32_t b6 = b5 - 4000;
 80004c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004c8:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 80004cc:	62bb      	str	r3, [r7, #40]	; 0x28
	x1 = (bmp->_B2 * (b6 * b6 >> 12)) >> 11;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80004d4:	4619      	mov	r1, r3
 80004d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80004da:	fb02 f303 	mul.w	r3, r2, r3
 80004de:	131b      	asrs	r3, r3, #12
 80004e0:	fb03 f301 	mul.w	r3, r3, r1
 80004e4:	12db      	asrs	r3, r3, #11
 80004e6:	637b      	str	r3, [r7, #52]	; 0x34
	x2 = (bmp->_AC2 * b6) >> 11;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80004ee:	461a      	mov	r2, r3
 80004f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004f2:	fb03 f302 	mul.w	r3, r3, r2
 80004f6:	12db      	asrs	r3, r3, #11
 80004f8:	633b      	str	r3, [r7, #48]	; 0x30
	int32_t x3 = x1 + x2;
 80004fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80004fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004fe:	4413      	add	r3, r2
 8000500:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t b3 = ((((bmp->_AC1 << 2) + x3) << BMP_OSS) + 2) >> 2;
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000508:	009a      	lsls	r2, r3, #2
 800050a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800050c:	4413      	add	r3, r2
 800050e:	021b      	lsls	r3, r3, #8
 8000510:	3302      	adds	r3, #2
 8000512:	109b      	asrs	r3, r3, #2
 8000514:	623b      	str	r3, [r7, #32]
	x1 = bmp->_AC3 * b6 >> 13;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800051c:	461a      	mov	r2, r3
 800051e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000520:	fb03 f302 	mul.w	r3, r3, r2
 8000524:	135b      	asrs	r3, r3, #13
 8000526:	637b      	str	r3, [r7, #52]	; 0x34
	x2 = (bmp->_B1 * (b6 * b6 >> 12)) >> 16;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800052e:	4619      	mov	r1, r3
 8000530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000532:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000534:	fb02 f303 	mul.w	r3, r2, r3
 8000538:	131b      	asrs	r3, r3, #12
 800053a:	fb03 f301 	mul.w	r3, r3, r1
 800053e:	141b      	asrs	r3, r3, #16
 8000540:	633b      	str	r3, [r7, #48]	; 0x30
	x3 = (x1 + x2 + 2) >> 2;
 8000542:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000546:	4413      	add	r3, r2
 8000548:	3302      	adds	r3, #2
 800054a:	109b      	asrs	r3, r3, #2
 800054c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t b4 = bmp->_AC4 * (uint32_t) (x3 + 32768) >> 15;
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	891b      	ldrh	r3, [r3, #8]
 8000552:	461a      	mov	r2, r3
 8000554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000556:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800055a:	fb03 f302 	mul.w	r3, r3, r2
 800055e:	0bdb      	lsrs	r3, r3, #15
 8000560:	61fb      	str	r3, [r7, #28]
	uint32_t b7 = ((uint32_t) up - b3) * (50000 >> BMP_OSS);
 8000562:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000564:	6a3b      	ldr	r3, [r7, #32]
 8000566:	1ad2      	subs	r2, r2, r3
 8000568:	4613      	mov	r3, r2
 800056a:	005b      	lsls	r3, r3, #1
 800056c:	4413      	add	r3, r2
 800056e:	019a      	lsls	r2, r3, #6
 8000570:	4413      	add	r3, r2
 8000572:	61bb      	str	r3, [r7, #24]
	int32_t p = (b7 < 0x80000000) ? (b7 << 1) / b4 : b7 / b4 << 2;
 8000574:	69bb      	ldr	r3, [r7, #24]
 8000576:	2b00      	cmp	r3, #0
 8000578:	db05      	blt.n	8000586 <_update+0x296>
 800057a:	69bb      	ldr	r3, [r7, #24]
 800057c:	005a      	lsls	r2, r3, #1
 800057e:	69fb      	ldr	r3, [r7, #28]
 8000580:	fbb2 f3f3 	udiv	r3, r2, r3
 8000584:	e004      	b.n	8000590 <_update+0x2a0>
 8000586:	69ba      	ldr	r2, [r7, #24]
 8000588:	69fb      	ldr	r3, [r7, #28]
 800058a:	fbb2 f3f3 	udiv	r3, r2, r3
 800058e:	009b      	lsls	r3, r3, #2
 8000590:	617b      	str	r3, [r7, #20]
	x1 = p >> 8;
 8000592:	697b      	ldr	r3, [r7, #20]
 8000594:	121b      	asrs	r3, r3, #8
 8000596:	637b      	str	r3, [r7, #52]	; 0x34
	x1 *= x1;
 8000598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800059a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800059c:	fb02 f303 	mul.w	r3, r2, r3
 80005a0:	637b      	str	r3, [r7, #52]	; 0x34
	x1 = (x1 * 3038) >> 16;
 80005a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005a4:	f640 32de 	movw	r2, #3038	; 0xbde
 80005a8:	fb02 f303 	mul.w	r3, r2, r3
 80005ac:	141b      	asrs	r3, r3, #16
 80005ae:	637b      	str	r3, [r7, #52]	; 0x34
	x2 = (-7357 * p) >> 16;
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	4a0b      	ldr	r2, [pc, #44]	; (80005e0 <_update+0x2f0>)
 80005b4:	fb02 f303 	mul.w	r3, r2, r3
 80005b8:	141b      	asrs	r3, r3, #16
 80005ba:	633b      	str	r3, [r7, #48]	; 0x30
	bmp->Pressure = p + ((x1 + x2 + 3791) >> 4);
 80005bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80005be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005c0:	4413      	add	r3, r2
 80005c2:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 80005c6:	111a      	asrs	r2, r3, #4
 80005c8:	697b      	ldr	r3, [r7, #20]
 80005ca:	441a      	add	r2, r3
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	639a      	str	r2, [r3, #56]	; 0x38
	return Bmp_Ok;
 80005d0:	2303      	movs	r3, #3
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	3758      	adds	r7, #88	; 0x58
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	080048ac 	.word	0x080048ac
 80005e0:	ffffe343 	.word	0xffffe343

080005e4 <BMP_180_Update>:

BmpStatus BMP_180_Update(Bmp180 *bmp) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	BmpStatus res = _update(bmp, bmp->_i2c);
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f0:	4619      	mov	r1, r3
 80005f2:	6878      	ldr	r0, [r7, #4]
 80005f4:	f7ff fe7c 	bl	80002f0 <_update>
 80005f8:	4603      	mov	r3, r0
 80005fa:	73fb      	strb	r3, [r7, #15]
	if (res != Bmp_Ok)
 80005fc:	7bfb      	ldrb	r3, [r7, #15]
 80005fe:	2b03      	cmp	r3, #3
 8000600:	d001      	beq.n	8000606 <BMP_180_Update+0x22>
		return res;
 8000602:	7bfb      	ldrb	r3, [r7, #15]
 8000604:	e03c      	b.n	8000680 <BMP_180_Update+0x9c>

	bmp->_p_last_3 = bmp->_p_last_2;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	62da      	str	r2, [r3, #44]	; 0x2c
	bmp->_p_last_2 = bmp->_p_last_1;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	69da      	ldr	r2, [r3, #28]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	625a      	str	r2, [r3, #36]	; 0x24
	bmp->_p_last_1 = bmp->Pressure;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	61da      	str	r2, [r3, #28]
	bmp->Pressure = (bmp->_p_last_3 + bmp->_p_last_2 + bmp->_p_last_1
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000626:	441a      	add	r2, r3
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	69db      	ldr	r3, [r3, #28]
 800062c:	441a      	add	r2, r3
			+ bmp->_p_last_1) / 4;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	69db      	ldr	r3, [r3, #28]
 8000632:	4413      	add	r3, r2
 8000634:	2b00      	cmp	r3, #0
 8000636:	da00      	bge.n	800063a <BMP_180_Update+0x56>
 8000638:	3303      	adds	r3, #3
 800063a:	109b      	asrs	r3, r3, #2
 800063c:	461a      	mov	r2, r3
	bmp->Pressure = (bmp->_p_last_3 + bmp->_p_last_2 + bmp->_p_last_1
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	639a      	str	r2, [r3, #56]	; 0x38

	bmp->_t_last_3 = bmp->_t_last_2;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	6a1a      	ldr	r2, [r3, #32]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	629a      	str	r2, [r3, #40]	; 0x28
	bmp->_t_last_2 = bmp->_t_last_1;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	699a      	ldr	r2, [r3, #24]
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	621a      	str	r2, [r3, #32]
	bmp->_t_last_1 = bmp->Temperature;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	619a      	str	r2, [r3, #24]
	bmp->Temperature = (bmp->_t_last_3 + bmp->_t_last_2 + bmp->_t_last_1
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	6a1b      	ldr	r3, [r3, #32]
 8000662:	441a      	add	r2, r3
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	699b      	ldr	r3, [r3, #24]
 8000668:	441a      	add	r2, r3
			+ bmp->_t_last_1) / 4;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	699b      	ldr	r3, [r3, #24]
 800066e:	4413      	add	r3, r2
 8000670:	2b00      	cmp	r3, #0
 8000672:	da00      	bge.n	8000676 <BMP_180_Update+0x92>
 8000674:	3303      	adds	r3, #3
 8000676:	109b      	asrs	r3, r3, #2
 8000678:	461a      	mov	r2, r3
	bmp->Temperature = (bmp->_t_last_3 + bmp->_t_last_2 + bmp->_t_last_1
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	635a      	str	r2, [r3, #52]	; 0x34
	return res;
 800067e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000680:	4618      	mov	r0, r3
 8000682:	3710      	adds	r7, #16
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000688:	b590      	push	{r4, r7, lr}
 800068a:	b095      	sub	sp, #84	; 0x54
 800068c:	af12      	add	r7, sp, #72	; 0x48
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800068e:	f000 ffd1 	bl	8001634 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000692:	f000 f84d 	bl	8000730 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000696:	f000 f937 	bl	8000908 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 800069a:	f000 f90b 	bl	80008b4 <MX_USART1_UART_Init>
	MX_I2C1_Init();
 800069e:	f000 f88d 	bl	80007bc <MX_I2C1_Init>
	MX_TIM2_Init();
 80006a2:	f000 f8b9 	bl	8000818 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */

	HAL_Delay(50);
 80006a6:	2032      	movs	r0, #50	; 0x32
 80006a8:	f001 f826 	bl	80016f8 <HAL_Delay>

	ssd1306_Init(hi2c1, 0x78);
 80006ac:	4c1a      	ldr	r4, [pc, #104]	; (8000718 <main+0x90>)
 80006ae:	2378      	movs	r3, #120	; 0x78
 80006b0:	9311      	str	r3, [sp, #68]	; 0x44
 80006b2:	4668      	mov	r0, sp
 80006b4:	f104 0310 	add.w	r3, r4, #16
 80006b8:	2244      	movs	r2, #68	; 0x44
 80006ba:	4619      	mov	r1, r3
 80006bc:	f004 f88a 	bl	80047d4 <memcpy>
 80006c0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80006c4:	f000 f994 	bl	80009f0 <ssd1306_Init>
	for (uint8_t i = 0; i < 6; ++i) {
 80006c8:	2300      	movs	r3, #0
 80006ca:	71fb      	strb	r3, [r7, #7]
 80006cc:	e012      	b.n	80006f4 <main+0x6c>
		TCA_Set(&hi2c1, (TcaAddress) i);
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	4619      	mov	r1, r3
 80006d2:	4811      	ldr	r0, [pc, #68]	; (8000718 <main+0x90>)
 80006d4:	f000 ff64 	bl	80015a0 <TCA_Set>
		BMP_180_Init(&bmp[i], &hi2c1);
 80006d8:	79fa      	ldrb	r2, [r7, #7]
 80006da:	4613      	mov	r3, r2
 80006dc:	011b      	lsls	r3, r3, #4
 80006de:	1a9b      	subs	r3, r3, r2
 80006e0:	009b      	lsls	r3, r3, #2
 80006e2:	4a0e      	ldr	r2, [pc, #56]	; (800071c <main+0x94>)
 80006e4:	4413      	add	r3, r2
 80006e6:	490c      	ldr	r1, [pc, #48]	; (8000718 <main+0x90>)
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff fd37 	bl	800015c <BMP_180_Init>
	for (uint8_t i = 0; i < 6; ++i) {
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	3301      	adds	r3, #1
 80006f2:	71fb      	strb	r3, [r7, #7]
 80006f4:	79fb      	ldrb	r3, [r7, #7]
 80006f6:	2b05      	cmp	r3, #5
 80006f8:	d9e9      	bls.n	80006ce <main+0x46>
	}

	HAL_GPIO_WritePin(GPIOC, 13, SET);
 80006fa:	2201      	movs	r2, #1
 80006fc:	210d      	movs	r1, #13
 80006fe:	4808      	ldr	r0, [pc, #32]	; (8000720 <main+0x98>)
 8000700:	f001 fafa 	bl	8001cf8 <HAL_GPIO_WritePin>
	HAL_UART_Receive_IT(&huart1, (uint8_t*) requestCode, 1);
 8000704:	2201      	movs	r2, #1
 8000706:	4907      	ldr	r1, [pc, #28]	; (8000724 <main+0x9c>)
 8000708:	4807      	ldr	r0, [pc, #28]	; (8000728 <main+0xa0>)
 800070a:	f003 fc77 	bl	8003ffc <HAL_UART_Receive_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 800070e:	4807      	ldr	r0, [pc, #28]	; (800072c <main+0xa4>)
 8000710:	f003 f831 	bl	8003776 <HAL_TIM_Base_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000714:	e7fe      	b.n	8000714 <main+0x8c>
 8000716:	bf00      	nop
 8000718:	20000600 	.word	0x20000600
 800071c:	20000498 	.word	0x20000498
 8000720:	40011000 	.word	0x40011000
 8000724:	20000034 	.word	0x20000034
 8000728:	20000654 	.word	0x20000654
 800072c:	20000694 	.word	0x20000694

08000730 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b090      	sub	sp, #64	; 0x40
 8000734:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000736:	f107 0318 	add.w	r3, r7, #24
 800073a:	2228      	movs	r2, #40	; 0x28
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f004 f853 	bl	80047ea <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000752:	2301      	movs	r3, #1
 8000754:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000756:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800075a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000760:	2301      	movs	r3, #1
 8000762:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000764:	2302      	movs	r3, #2
 8000766:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000768:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800076c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800076e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000772:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000774:	f107 0318 	add.w	r3, r7, #24
 8000778:	4618      	mov	r0, r3
 800077a:	f002 fbb5 	bl	8002ee8 <HAL_RCC_OscConfig>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <SystemClock_Config+0x58>
		Error_Handler();
 8000784:	f000 f92e 	bl	80009e4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000788:	230f      	movs	r3, #15
 800078a:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078c:	2302      	movs	r3, #2
 800078e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000794:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000798:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800079a:	2300      	movs	r3, #0
 800079c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	2102      	movs	r1, #2
 80007a2:	4618      	mov	r0, r3
 80007a4:	f002 fe20 	bl	80033e8 <HAL_RCC_ClockConfig>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0x82>
		Error_Handler();
 80007ae:	f000 f919 	bl	80009e4 <Error_Handler>
	}
}
 80007b2:	bf00      	nop
 80007b4:	3740      	adds	r7, #64	; 0x40
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
	...

080007bc <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80007c0:	4b12      	ldr	r3, [pc, #72]	; (800080c <MX_I2C1_Init+0x50>)
 80007c2:	4a13      	ldr	r2, [pc, #76]	; (8000810 <MX_I2C1_Init+0x54>)
 80007c4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 80007c6:	4b11      	ldr	r3, [pc, #68]	; (800080c <MX_I2C1_Init+0x50>)
 80007c8:	4a12      	ldr	r2, [pc, #72]	; (8000814 <MX_I2C1_Init+0x58>)
 80007ca:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007cc:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_I2C1_Init+0x50>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <MX_I2C1_Init+0x50>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007d8:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_I2C1_Init+0x50>)
 80007da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007de:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007e0:	4b0a      	ldr	r3, [pc, #40]	; (800080c <MX_I2C1_Init+0x50>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_I2C1_Init+0x50>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ec:	4b07      	ldr	r3, [pc, #28]	; (800080c <MX_I2C1_Init+0x50>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_I2C1_Init+0x50>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80007f8:	4804      	ldr	r0, [pc, #16]	; (800080c <MX_I2C1_Init+0x50>)
 80007fa:	f001 fa95 	bl	8001d28 <HAL_I2C_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000804:	f000 f8ee 	bl	80009e4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20000600 	.word	0x20000600
 8000810:	40005400 	.word	0x40005400
 8000814:	00061a80 	.word	0x00061a80

08000818 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800081e:	f107 0308 	add.w	r3, r7, #8
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800082c:	463b      	mov	r3, r7
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000834:	4b1e      	ldr	r3, [pc, #120]	; (80008b0 <MX_TIM2_Init+0x98>)
 8000836:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800083a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 7199;
 800083c:	4b1c      	ldr	r3, [pc, #112]	; (80008b0 <MX_TIM2_Init+0x98>)
 800083e:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000842:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000844:	4b1a      	ldr	r3, [pc, #104]	; (80008b0 <MX_TIM2_Init+0x98>)
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1999;
 800084a:	4b19      	ldr	r3, [pc, #100]	; (80008b0 <MX_TIM2_Init+0x98>)
 800084c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000850:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000852:	4b17      	ldr	r3, [pc, #92]	; (80008b0 <MX_TIM2_Init+0x98>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000858:	4b15      	ldr	r3, [pc, #84]	; (80008b0 <MX_TIM2_Init+0x98>)
 800085a:	2200      	movs	r2, #0
 800085c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800085e:	4814      	ldr	r0, [pc, #80]	; (80008b0 <MX_TIM2_Init+0x98>)
 8000860:	f002 ff5e 	bl	8003720 <HAL_TIM_Base_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_TIM2_Init+0x56>
		Error_Handler();
 800086a:	f000 f8bb 	bl	80009e4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800086e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000872:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000874:	f107 0308 	add.w	r3, r7, #8
 8000878:	4619      	mov	r1, r3
 800087a:	480d      	ldr	r0, [pc, #52]	; (80008b0 <MX_TIM2_Init+0x98>)
 800087c:	f003 f8a6 	bl	80039cc <HAL_TIM_ConfigClockSource>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_TIM2_Init+0x72>
		Error_Handler();
 8000886:	f000 f8ad 	bl	80009e4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800088a:	2300      	movs	r3, #0
 800088c:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000892:	463b      	mov	r3, r7
 8000894:	4619      	mov	r1, r3
 8000896:	4806      	ldr	r0, [pc, #24]	; (80008b0 <MX_TIM2_Init+0x98>)
 8000898:	f003 fa74 	bl	8003d84 <HAL_TIMEx_MasterConfigSynchronization>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_TIM2_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 80008a2:	f000 f89f 	bl	80009e4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80008a6:	bf00      	nop
 80008a8:	3718      	adds	r7, #24
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	20000694 	.word	0x20000694

080008b4 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80008b8:	4b11      	ldr	r3, [pc, #68]	; (8000900 <MX_USART1_UART_Init+0x4c>)
 80008ba:	4a12      	ldr	r2, [pc, #72]	; (8000904 <MX_USART1_UART_Init+0x50>)
 80008bc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 80008be:	4b10      	ldr	r3, [pc, #64]	; (8000900 <MX_USART1_UART_Init+0x4c>)
 80008c0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008c4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <MX_USART1_UART_Init+0x4c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80008cc:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <MX_USART1_UART_Init+0x4c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80008d2:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <MX_USART1_UART_Init+0x4c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80008d8:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_USART1_UART_Init+0x4c>)
 80008da:	220c      	movs	r2, #12
 80008dc:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008de:	4b08      	ldr	r3, [pc, #32]	; (8000900 <MX_USART1_UART_Init+0x4c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <MX_USART1_UART_Init+0x4c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80008ea:	4805      	ldr	r0, [pc, #20]	; (8000900 <MX_USART1_UART_Init+0x4c>)
 80008ec:	f003 faa0 	bl	8003e30 <HAL_UART_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80008f6:	f000 f875 	bl	80009e4 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000654 	.word	0x20000654
 8000904:	40013800 	.word	0x40013800

08000908 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000908:	b580      	push	{r7, lr}
 800090a:	b088      	sub	sp, #32
 800090c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800090e:	f107 0310 	add.w	r3, r7, #16
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800091c:	4b2e      	ldr	r3, [pc, #184]	; (80009d8 <MX_GPIO_Init+0xd0>)
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	4a2d      	ldr	r2, [pc, #180]	; (80009d8 <MX_GPIO_Init+0xd0>)
 8000922:	f043 0310 	orr.w	r3, r3, #16
 8000926:	6193      	str	r3, [r2, #24]
 8000928:	4b2b      	ldr	r3, [pc, #172]	; (80009d8 <MX_GPIO_Init+0xd0>)
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	f003 0310 	and.w	r3, r3, #16
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000934:	4b28      	ldr	r3, [pc, #160]	; (80009d8 <MX_GPIO_Init+0xd0>)
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	4a27      	ldr	r2, [pc, #156]	; (80009d8 <MX_GPIO_Init+0xd0>)
 800093a:	f043 0320 	orr.w	r3, r3, #32
 800093e:	6193      	str	r3, [r2, #24]
 8000940:	4b25      	ldr	r3, [pc, #148]	; (80009d8 <MX_GPIO_Init+0xd0>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	f003 0320 	and.w	r3, r3, #32
 8000948:	60bb      	str	r3, [r7, #8]
 800094a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800094c:	4b22      	ldr	r3, [pc, #136]	; (80009d8 <MX_GPIO_Init+0xd0>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	4a21      	ldr	r2, [pc, #132]	; (80009d8 <MX_GPIO_Init+0xd0>)
 8000952:	f043 0308 	orr.w	r3, r3, #8
 8000956:	6193      	str	r3, [r2, #24]
 8000958:	4b1f      	ldr	r3, [pc, #124]	; (80009d8 <MX_GPIO_Init+0xd0>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	f003 0308 	and.w	r3, r3, #8
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000964:	4b1c      	ldr	r3, [pc, #112]	; (80009d8 <MX_GPIO_Init+0xd0>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	4a1b      	ldr	r2, [pc, #108]	; (80009d8 <MX_GPIO_Init+0xd0>)
 800096a:	f043 0304 	orr.w	r3, r3, #4
 800096e:	6193      	str	r3, [r2, #24]
 8000970:	4b19      	ldr	r3, [pc, #100]	; (80009d8 <MX_GPIO_Init+0xd0>)
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	f003 0304 	and.w	r3, r3, #4
 8000978:	603b      	str	r3, [r7, #0]
 800097a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800097c:	2201      	movs	r2, #1
 800097e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000982:	4816      	ldr	r0, [pc, #88]	; (80009dc <MX_GPIO_Init+0xd4>)
 8000984:	f001 f9b8 	bl	8001cf8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000988:	2201      	movs	r2, #1
 800098a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800098e:	4814      	ldr	r0, [pc, #80]	; (80009e0 <MX_GPIO_Init+0xd8>)
 8000990:	f001 f9b2 	bl	8001cf8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000994:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000998:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099a:	2301      	movs	r3, #1
 800099c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2302      	movs	r3, #2
 80009a4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009a6:	f107 0310 	add.w	r3, r7, #16
 80009aa:	4619      	mov	r1, r3
 80009ac:	480b      	ldr	r0, [pc, #44]	; (80009dc <MX_GPIO_Init+0xd4>)
 80009ae:	f001 f849 	bl	8001a44 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB14 */
	GPIO_InitStruct.Pin = GPIO_PIN_14;
 80009b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80009b6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b8:	2301      	movs	r3, #1
 80009ba:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c0:	2302      	movs	r3, #2
 80009c2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c4:	f107 0310 	add.w	r3, r7, #16
 80009c8:	4619      	mov	r1, r3
 80009ca:	4805      	ldr	r0, [pc, #20]	; (80009e0 <MX_GPIO_Init+0xd8>)
 80009cc:	f001 f83a 	bl	8001a44 <HAL_GPIO_Init>

}
 80009d0:	bf00      	nop
 80009d2:	3720      	adds	r7, #32
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40021000 	.word	0x40021000
 80009dc:	40011000 	.word	0x40011000
 80009e0:	40010c00 	.word	0x40010c00

080009e4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr

080009f0 <ssd1306_Init>:
static uint8_t SSD1306_Buffer[SSD1306_WIDTH * SSD1306_HEIGHT / 8];

// Een scherm-object om lokaal in te werken
static SSD1306_t SSD1306;

int ssd1306_Init(I2C_HandleTypeDef i2c_port, uint8_t address) {
 80009f0:	b084      	sub	sp, #16
 80009f2:	b5b0      	push	{r4, r5, r7, lr}
 80009f4:	b086      	sub	sp, #24
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80009fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	SSD1306.I2C_port = i2c_port;
 8000a00:	4b19      	ldr	r3, [pc, #100]	; (8000a68 <ssd1306_Init+0x78>)
 8000a02:	330c      	adds	r3, #12
 8000a04:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000a08:	2254      	movs	r2, #84	; 0x54
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f003 fee2 	bl	80047d4 <memcpy>
	SSD1306.Address = address;
 8000a10:	4a15      	ldr	r2, [pc, #84]	; (8000a68 <ssd1306_Init+0x78>)
 8000a12:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8000a16:	7213      	strb	r3, [r2, #8]
	// Waiting for SEG/COM ON after reset
	HAL_Delay(100);
 8000a18:	2064      	movs	r0, #100	; 0x64
 8000a1a:	f000 fe6d 	bl	80016f8 <HAL_Delay>
	// Initialize LCD
	uint8_t init_data[] = { 0xAE, 0xA6, 0x20, 0x00, 0x21, 0x00, 0x7F, 0x22,
 8000a1e:	4b13      	ldr	r3, [pc, #76]	; (8000a6c <ssd1306_Init+0x7c>)
 8000a20:	1d3c      	adds	r4, r7, #4
 8000a22:	461d      	mov	r5, r3
 8000a24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a28:	682b      	ldr	r3, [r5, #0]
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	8022      	strh	r2, [r4, #0]
 8000a2e:	3402      	adds	r4, #2
 8000a30:	0c1b      	lsrs	r3, r3, #16
 8000a32:	7023      	strb	r3, [r4, #0]
	// 0xC8 - COM scan direction (horizontal mirroring)
	// 0xA8, 0x3F - multiplex ratio
	// 0x81, 0x7F - contrast ratio 127
	// 0x8D, 0x14 - enable charge pump
	// 0xAF - display on (only just after enabling charge pump)
	ssd1306_SendToDisplay(Commands, init_data, sizeof(init_data));
 8000a34:	1d3b      	adds	r3, r7, #4
 8000a36:	2213      	movs	r2, #19
 8000a38:	4619      	mov	r1, r3
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	f000 f952 	bl	8000ce4 <ssd1306_SendToDisplay>
	// clearing screen
	ssd1306_Fill(Black);
 8000a40:	2000      	movs	r0, #0
 8000a42:	f000 f815 	bl	8000a70 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8000a46:	f000 f835 	bl	8000ab4 <ssd1306_UpdateScreen>
	// setting default position
	SSD1306.CurrentX = 0;
 8000a4a:	4b07      	ldr	r3, [pc, #28]	; (8000a68 <ssd1306_Init+0x78>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000a50:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <ssd1306_Init+0x78>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	605a      	str	r2, [r3, #4]
}
 8000a56:	bf00      	nop
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3718      	adds	r7, #24
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000a62:	b004      	add	sp, #16
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	20000438 	.word	0x20000438
 8000a6c:	080048b0 	.word	0x080048b0

08000a70 <ssd1306_Fill>:

void ssd1306_Fill(SSD1306_COLOR color) {
 8000a70:	b480      	push	{r7}
 8000a72:	b085      	sub	sp, #20
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]
	uint8_t toBuffer = 0x00; // black
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	73fb      	strb	r3, [r7, #15]
	if (color == White) {
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d101      	bne.n	8000a88 <ssd1306_Fill+0x18>
		toBuffer = 0xFF; // white
 8000a84:	23ff      	movs	r3, #255	; 0xff
 8000a86:	73fb      	strb	r3, [r7, #15]
	}
	for (uint32_t i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	e007      	b.n	8000a9e <ssd1306_Fill+0x2e>
		SSD1306_Buffer[i] = toBuffer;
 8000a8e:	4a08      	ldr	r2, [pc, #32]	; (8000ab0 <ssd1306_Fill+0x40>)
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	4413      	add	r3, r2
 8000a94:	7bfa      	ldrb	r2, [r7, #15]
 8000a96:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	60bb      	str	r3, [r7, #8]
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000aa4:	d3f3      	bcc.n	8000a8e <ssd1306_Fill+0x1e>
	}
}
 8000aa6:	bf00      	nop
 8000aa8:	3714      	adds	r7, #20
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bc80      	pop	{r7}
 8000aae:	4770      	bx	lr
 8000ab0:	20000038 	.word	0x20000038

08000ab4 <ssd1306_UpdateScreen>:

void ssd1306_UpdateScreen(void) {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
	uint8_t update_region_data[6] = { 0x21, 0x00, 0x7F, 0x22, 0x00, 0x07 };
 8000aba:	4a11      	ldr	r2, [pc, #68]	; (8000b00 <ssd1306_UpdateScreen+0x4c>)
 8000abc:	1d3b      	adds	r3, r7, #4
 8000abe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ac2:	6018      	str	r0, [r3, #0]
 8000ac4:	3304      	adds	r3, #4
 8000ac6:	8019      	strh	r1, [r3, #0]
	//0x21, 0x00, 0x7F - column address from 0 to 127
	//0x22, 0x00, 0x07 - page address from 0 to 7
	ssd1306_SendToDisplay(Commands, update_region_data, 6);
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	2206      	movs	r2, #6
 8000acc:	4619      	mov	r1, r3
 8000ace:	2000      	movs	r0, #0
 8000ad0:	f000 f908 	bl	8000ce4 <ssd1306_SendToDisplay>

	//update pages from 0 to 7
	for (uint32_t page = 0; page < 8; page++) {
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	e00b      	b.n	8000af2 <ssd1306_UpdateScreen+0x3e>
		ssd1306_SendToDisplay(Datas, &SSD1306_Buffer[SSD1306_WIDTH * page],
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	01db      	lsls	r3, r3, #7
 8000ade:	4a09      	ldr	r2, [pc, #36]	; (8000b04 <ssd1306_UpdateScreen+0x50>)
 8000ae0:	4413      	add	r3, r2
 8000ae2:	2280      	movs	r2, #128	; 0x80
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	2040      	movs	r0, #64	; 0x40
 8000ae8:	f000 f8fc 	bl	8000ce4 <ssd1306_SendToDisplay>
	for (uint32_t page = 0; page < 8; page++) {
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	3301      	adds	r3, #1
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	2b07      	cmp	r3, #7
 8000af6:	d9f0      	bls.n	8000ada <ssd1306_UpdateScreen+0x26>
				SSD1306_WIDTH);
	}
}
 8000af8:	bf00      	nop
 8000afa:	3710      	adds	r7, #16
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	080048c4 	.word	0x080048c4
 8000b04:	20000038 	.word	0x20000038

08000b08 <ssd1306_DrawPixel>:

void ssd1306_DrawPixel(uint32_t x, uint32_t y, SSD1306_COLOR color) {
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	4613      	mov	r3, r2
 8000b14:	71fb      	strb	r3, [r7, #7]
	if ((x < SSD1306_WIDTH) && (y < SSD1306_HEIGHT)) {
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	2b7f      	cmp	r3, #127	; 0x7f
 8000b1a:	d836      	bhi.n	8000b8a <ssd1306_DrawPixel+0x82>
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	2b3f      	cmp	r3, #63	; 0x3f
 8000b20:	d833      	bhi.n	8000b8a <ssd1306_DrawPixel+0x82>
		if (color == White) {
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d117      	bne.n	8000b58 <ssd1306_DrawPixel+0x50>
			SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	08db      	lsrs	r3, r3, #3
 8000b2c:	01d9      	lsls	r1, r3, #7
 8000b2e:	68fa      	ldr	r2, [r7, #12]
 8000b30:	440a      	add	r2, r1
 8000b32:	4918      	ldr	r1, [pc, #96]	; (8000b94 <ssd1306_DrawPixel+0x8c>)
 8000b34:	5c8a      	ldrb	r2, [r1, r2]
 8000b36:	b251      	sxtb	r1, r2
 8000b38:	68ba      	ldr	r2, [r7, #8]
 8000b3a:	f002 0207 	and.w	r2, r2, #7
 8000b3e:	2001      	movs	r0, #1
 8000b40:	fa00 f202 	lsl.w	r2, r0, r2
 8000b44:	b252      	sxtb	r2, r2
 8000b46:	430a      	orrs	r2, r1
 8000b48:	b251      	sxtb	r1, r2
 8000b4a:	01da      	lsls	r2, r3, #7
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	4413      	add	r3, r2
 8000b50:	b2c9      	uxtb	r1, r1
 8000b52:	4a10      	ldr	r2, [pc, #64]	; (8000b94 <ssd1306_DrawPixel+0x8c>)
 8000b54:	54d1      	strb	r1, [r2, r3]
		} else {
			SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
		}
	}
}
 8000b56:	e018      	b.n	8000b8a <ssd1306_DrawPixel+0x82>
			SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	08db      	lsrs	r3, r3, #3
 8000b5c:	01d9      	lsls	r1, r3, #7
 8000b5e:	68fa      	ldr	r2, [r7, #12]
 8000b60:	440a      	add	r2, r1
 8000b62:	490c      	ldr	r1, [pc, #48]	; (8000b94 <ssd1306_DrawPixel+0x8c>)
 8000b64:	5c8a      	ldrb	r2, [r1, r2]
 8000b66:	b251      	sxtb	r1, r2
 8000b68:	68ba      	ldr	r2, [r7, #8]
 8000b6a:	f002 0207 	and.w	r2, r2, #7
 8000b6e:	2001      	movs	r0, #1
 8000b70:	fa00 f202 	lsl.w	r2, r0, r2
 8000b74:	b252      	sxtb	r2, r2
 8000b76:	43d2      	mvns	r2, r2
 8000b78:	b252      	sxtb	r2, r2
 8000b7a:	400a      	ands	r2, r1
 8000b7c:	b251      	sxtb	r1, r2
 8000b7e:	01da      	lsls	r2, r3, #7
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	4413      	add	r3, r2
 8000b84:	b2c9      	uxtb	r1, r1
 8000b86:	4a03      	ldr	r2, [pc, #12]	; (8000b94 <ssd1306_DrawPixel+0x8c>)
 8000b88:	54d1      	strb	r1, [r2, r3]
}
 8000b8a:	bf00      	nop
 8000b8c:	3714      	adds	r7, #20
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr
 8000b94:	20000038 	.word	0x20000038

08000b98 <ssd1306_WriteChar>:

void ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000b98:	b590      	push	{r4, r7, lr}
 8000b9a:	b089      	sub	sp, #36	; 0x24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4604      	mov	r4, r0
 8000ba0:	4638      	mov	r0, r7
 8000ba2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000ba6:	4623      	mov	r3, r4
 8000ba8:	73fb      	strb	r3, [r7, #15]
	uint32_t pixel, x;

	if ((((SSD1306.CurrentX + Font.FontWidth) < SSD1306_WIDTH)
 8000baa:	4b36      	ldr	r3, [pc, #216]	; (8000c84 <ssd1306_WriteChar+0xec>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	783a      	ldrb	r2, [r7, #0]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	2b7f      	cmp	r3, #127	; 0x7f
 8000bb4:	d85c      	bhi.n	8000c70 <ssd1306_WriteChar+0xd8>
			&& ((SSD1306.CurrentY + Font.FontHeight) < SSD1306_HEIGHT))) {
 8000bb6:	4b33      	ldr	r3, [pc, #204]	; (8000c84 <ssd1306_WriteChar+0xec>)
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	787a      	ldrb	r2, [r7, #1]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	2b3f      	cmp	r3, #63	; 0x3f
 8000bc0:	d856      	bhi.n	8000c70 <ssd1306_WriteChar+0xd8>
		// write char to display buffer
		for (uint32_t y = 0; y < Font.FontHeight; y++) {
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	617b      	str	r3, [r7, #20]
 8000bc6:	e04e      	b.n	8000c66 <ssd1306_WriteChar+0xce>
			// get font pixel
			if (ch < 127)
 8000bc8:	7bfb      	ldrb	r3, [r7, #15]
 8000bca:	2b7e      	cmp	r3, #126	; 0x7e
 8000bcc:	d80c      	bhi.n	8000be8 <ssd1306_WriteChar+0x50>
				pixel = Font.fontEn[(ch - 32) * Font.FontHeight + y];
 8000bce:	687a      	ldr	r2, [r7, #4]
 8000bd0:	7bfb      	ldrb	r3, [r7, #15]
 8000bd2:	3b20      	subs	r3, #32
 8000bd4:	7879      	ldrb	r1, [r7, #1]
 8000bd6:	fb01 f303 	mul.w	r3, r1, r3
 8000bda:	4619      	mov	r1, r3
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	440b      	add	r3, r1
 8000be0:	4413      	add	r3, r2
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	61fb      	str	r3, [r7, #28]
 8000be6:	e00b      	b.n	8000c00 <ssd1306_WriteChar+0x68>
			else
				pixel = Font.fontRu[(ch - 192) * Font.FontHeight + y];
 8000be8:	68ba      	ldr	r2, [r7, #8]
 8000bea:	7bfb      	ldrb	r3, [r7, #15]
 8000bec:	3bc0      	subs	r3, #192	; 0xc0
 8000bee:	7879      	ldrb	r1, [r7, #1]
 8000bf0:	fb01 f303 	mul.w	r3, r1, r3
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	440b      	add	r3, r1
 8000bfa:	4413      	add	r3, r2
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	61fb      	str	r3, [r7, #28]
			// write pixel to display buffer
			x = Font.FontWidth;
 8000c00:	783b      	ldrb	r3, [r7, #0]
 8000c02:	61bb      	str	r3, [r7, #24]
			while (x--) {
 8000c04:	e027      	b.n	8000c56 <ssd1306_WriteChar+0xbe>
				if (pixel & 0x0001) {
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	f003 0301 	and.w	r3, r3, #1
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d00d      	beq.n	8000c2c <ssd1306_WriteChar+0x94>
					ssd1306_DrawPixel(SSD1306.CurrentX + x,
 8000c10:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <ssd1306_WriteChar+0xec>)
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	69bb      	ldr	r3, [r7, #24]
 8000c16:	18d0      	adds	r0, r2, r3
							(SSD1306.CurrentY + y), color);
 8000c18:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <ssd1306_WriteChar+0xec>)
 8000c1a:	685a      	ldr	r2, [r3, #4]
					ssd1306_DrawPixel(SSD1306.CurrentX + x,
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	4413      	add	r3, r2
 8000c20:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000c24:	4619      	mov	r1, r3
 8000c26:	f7ff ff6f 	bl	8000b08 <ssd1306_DrawPixel>
 8000c2a:	e011      	b.n	8000c50 <ssd1306_WriteChar+0xb8>
				} else {
					ssd1306_DrawPixel(SSD1306.CurrentX + x,
 8000c2c:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <ssd1306_WriteChar+0xec>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	69bb      	ldr	r3, [r7, #24]
 8000c32:	18d0      	adds	r0, r2, r3
							(SSD1306.CurrentY + y), !color);
 8000c34:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <ssd1306_WriteChar+0xec>)
 8000c36:	685a      	ldr	r2, [r3, #4]
					ssd1306_DrawPixel(SSD1306.CurrentX + x,
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	18d1      	adds	r1, r2, r3
 8000c3c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	bf0c      	ite	eq
 8000c44:	2301      	moveq	r3, #1
 8000c46:	2300      	movne	r3, #0
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	f7ff ff5c 	bl	8000b08 <ssd1306_DrawPixel>
				}
				pixel >>= 1;
 8000c50:	69fb      	ldr	r3, [r7, #28]
 8000c52:	085b      	lsrs	r3, r3, #1
 8000c54:	61fb      	str	r3, [r7, #28]
			while (x--) {
 8000c56:	69bb      	ldr	r3, [r7, #24]
 8000c58:	1e5a      	subs	r2, r3, #1
 8000c5a:	61ba      	str	r2, [r7, #24]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d1d2      	bne.n	8000c06 <ssd1306_WriteChar+0x6e>
		for (uint32_t y = 0; y < Font.FontHeight; y++) {
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	3301      	adds	r3, #1
 8000c64:	617b      	str	r3, [r7, #20]
 8000c66:	787b      	ldrb	r3, [r7, #1]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d3ab      	bcc.n	8000bc8 <ssd1306_WriteChar+0x30>
			}
		}
	}

	// going to next position
	SSD1306.CurrentX += Font.FontWidth;
 8000c70:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <ssd1306_WriteChar+0xec>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	783a      	ldrb	r2, [r7, #0]
 8000c76:	4413      	add	r3, r2
 8000c78:	4a02      	ldr	r2, [pc, #8]	; (8000c84 <ssd1306_WriteChar+0xec>)
 8000c7a:	6013      	str	r3, [r2, #0]
}
 8000c7c:	bf00      	nop
 8000c7e:	3724      	adds	r7, #36	; 0x24
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd90      	pop	{r4, r7, pc}
 8000c84:	20000438 	.word	0x20000438

08000c88 <ssd1306_WriteString>:

void ssd1306_WriteString(char *str, FontDef Font, SSD1306_COLOR color) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af02      	add	r7, sp, #8
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	4638      	mov	r0, r7
 8000c92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	// We schrijven alle char tot een nulbyte
	while (*str) {
 8000c96:	e00a      	b.n	8000cae <ssd1306_WriteString+0x26>
		ssd1306_WriteChar(*str, Font, color);
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	7818      	ldrb	r0, [r3, #0]
 8000c9c:	7e3b      	ldrb	r3, [r7, #24]
 8000c9e:	9300      	str	r3, [sp, #0]
 8000ca0:	463b      	mov	r3, r7
 8000ca2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ca4:	f7ff ff78 	bl	8000b98 <ssd1306_WriteChar>

		// Volgende char
		str++;
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	3301      	adds	r3, #1
 8000cac:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d1f0      	bne.n	8000c98 <ssd1306_WriteString+0x10>
	}

}
 8000cb6:	bf00      	nop
 8000cb8:	3710      	adds	r7, #16
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
	...

08000cc0 <ssd1306_SetCursor>:

void ssd1306_SetCursor(uint32_t x, uint32_t y) {
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
	SSD1306.CurrentX = x;
 8000cca:	4a05      	ldr	r2, [pc, #20]	; (8000ce0 <ssd1306_SetCursor+0x20>)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6013      	str	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000cd0:	4a03      	ldr	r2, [pc, #12]	; (8000ce0 <ssd1306_SetCursor+0x20>)
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	6053      	str	r3, [r2, #4]
}
 8000cd6:	bf00      	nop
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bc80      	pop	{r7}
 8000cde:	4770      	bx	lr
 8000ce0:	20000438 	.word	0x20000438

08000ce4 <ssd1306_SendToDisplay>:
	//and send to display
	ssd1306_SendToDisplay(Commands, contrast_data, 2);
}

static void ssd1306_SendToDisplay(SSD1306_DATA_TYPE type, uint8_t *data,
		uint8_t length) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af04      	add	r7, sp, #16
 8000cea:	4603      	mov	r3, r0
 8000cec:	6039      	str	r1, [r7, #0]
 8000cee:	71fb      	strb	r3, [r7, #7]
 8000cf0:	4613      	mov	r3, r2
 8000cf2:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&(SSD1306.I2C_port), SSD1306.Address, type, 1, data,
 8000cf4:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <ssd1306_SendToDisplay+0x3c>)
 8000cf6:	7a1b      	ldrb	r3, [r3, #8]
 8000cf8:	b299      	uxth	r1, r3
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	b298      	uxth	r0, r3
 8000cfe:	79bb      	ldrb	r3, [r7, #6]
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	220a      	movs	r2, #10
 8000d04:	9202      	str	r2, [sp, #8]
 8000d06:	9301      	str	r3, [sp, #4]
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	9300      	str	r3, [sp, #0]
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	4602      	mov	r2, r0
 8000d10:	4804      	ldr	r0, [pc, #16]	; (8000d24 <ssd1306_SendToDisplay+0x40>)
 8000d12:	f001 fc5d 	bl	80025d0 <HAL_I2C_Mem_Write>
			length, 10);
}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000438 	.word	0x20000438
 8000d24:	20000444 	.word	0x20000444

08000d28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d2e:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <HAL_MspInit+0x5c>)
 8000d30:	699b      	ldr	r3, [r3, #24]
 8000d32:	4a14      	ldr	r2, [pc, #80]	; (8000d84 <HAL_MspInit+0x5c>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	6193      	str	r3, [r2, #24]
 8000d3a:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <HAL_MspInit+0x5c>)
 8000d3c:	699b      	ldr	r3, [r3, #24]
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	60bb      	str	r3, [r7, #8]
 8000d44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d46:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <HAL_MspInit+0x5c>)
 8000d48:	69db      	ldr	r3, [r3, #28]
 8000d4a:	4a0e      	ldr	r2, [pc, #56]	; (8000d84 <HAL_MspInit+0x5c>)
 8000d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d50:	61d3      	str	r3, [r2, #28]
 8000d52:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <HAL_MspInit+0x5c>)
 8000d54:	69db      	ldr	r3, [r3, #28]
 8000d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d5e:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <HAL_MspInit+0x60>)
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	4a04      	ldr	r2, [pc, #16]	; (8000d88 <HAL_MspInit+0x60>)
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	3714      	adds	r7, #20
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr
 8000d84:	40021000 	.word	0x40021000
 8000d88:	40010000 	.word	0x40010000

08000d8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b088      	sub	sp, #32
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 0310 	add.w	r3, r7, #16
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a15      	ldr	r2, [pc, #84]	; (8000dfc <HAL_I2C_MspInit+0x70>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d123      	bne.n	8000df4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dac:	4b14      	ldr	r3, [pc, #80]	; (8000e00 <HAL_I2C_MspInit+0x74>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	4a13      	ldr	r2, [pc, #76]	; (8000e00 <HAL_I2C_MspInit+0x74>)
 8000db2:	f043 0308 	orr.w	r3, r3, #8
 8000db6:	6193      	str	r3, [r2, #24]
 8000db8:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <HAL_I2C_MspInit+0x74>)
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	f003 0308 	and.w	r3, r3, #8
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dc4:	23c0      	movs	r3, #192	; 0xc0
 8000dc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dc8:	2312      	movs	r3, #18
 8000dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dcc:	2303      	movs	r3, #3
 8000dce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd0:	f107 0310 	add.w	r3, r7, #16
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	480b      	ldr	r0, [pc, #44]	; (8000e04 <HAL_I2C_MspInit+0x78>)
 8000dd8:	f000 fe34 	bl	8001a44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ddc:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <HAL_I2C_MspInit+0x74>)
 8000dde:	69db      	ldr	r3, [r3, #28]
 8000de0:	4a07      	ldr	r2, [pc, #28]	; (8000e00 <HAL_I2C_MspInit+0x74>)
 8000de2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000de6:	61d3      	str	r3, [r2, #28]
 8000de8:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <HAL_I2C_MspInit+0x74>)
 8000dea:	69db      	ldr	r3, [r3, #28]
 8000dec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000df0:	60bb      	str	r3, [r7, #8]
 8000df2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000df4:	bf00      	nop
 8000df6:	3720      	adds	r7, #32
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40005400 	.word	0x40005400
 8000e00:	40021000 	.word	0x40021000
 8000e04:	40010c00 	.word	0x40010c00

08000e08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e18:	d113      	bne.n	8000e42 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e1a:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <HAL_TIM_Base_MspInit+0x44>)
 8000e1c:	69db      	ldr	r3, [r3, #28]
 8000e1e:	4a0b      	ldr	r2, [pc, #44]	; (8000e4c <HAL_TIM_Base_MspInit+0x44>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	61d3      	str	r3, [r2, #28]
 8000e26:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <HAL_TIM_Base_MspInit+0x44>)
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2100      	movs	r1, #0
 8000e36:	201c      	movs	r0, #28
 8000e38:	f000 fd57 	bl	80018ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e3c:	201c      	movs	r0, #28
 8000e3e:	f000 fd70 	bl	8001922 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e42:	bf00      	nop
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40021000 	.word	0x40021000

08000e50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b088      	sub	sp, #32
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 0310 	add.w	r3, r7, #16
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a20      	ldr	r2, [pc, #128]	; (8000eec <HAL_UART_MspInit+0x9c>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d139      	bne.n	8000ee4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e70:	4b1f      	ldr	r3, [pc, #124]	; (8000ef0 <HAL_UART_MspInit+0xa0>)
 8000e72:	699b      	ldr	r3, [r3, #24]
 8000e74:	4a1e      	ldr	r2, [pc, #120]	; (8000ef0 <HAL_UART_MspInit+0xa0>)
 8000e76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e7a:	6193      	str	r3, [r2, #24]
 8000e7c:	4b1c      	ldr	r3, [pc, #112]	; (8000ef0 <HAL_UART_MspInit+0xa0>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e88:	4b19      	ldr	r3, [pc, #100]	; (8000ef0 <HAL_UART_MspInit+0xa0>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	4a18      	ldr	r2, [pc, #96]	; (8000ef0 <HAL_UART_MspInit+0xa0>)
 8000e8e:	f043 0304 	orr.w	r3, r3, #4
 8000e92:	6193      	str	r3, [r2, #24]
 8000e94:	4b16      	ldr	r3, [pc, #88]	; (8000ef0 <HAL_UART_MspInit+0xa0>)
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	f003 0304 	and.w	r3, r3, #4
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ea0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ea4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eae:	f107 0310 	add.w	r3, r7, #16
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	480f      	ldr	r0, [pc, #60]	; (8000ef4 <HAL_UART_MspInit+0xa4>)
 8000eb6:	f000 fdc5 	bl	8001a44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000eba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ebe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec8:	f107 0310 	add.w	r3, r7, #16
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4809      	ldr	r0, [pc, #36]	; (8000ef4 <HAL_UART_MspInit+0xa4>)
 8000ed0:	f000 fdb8 	bl	8001a44 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	2025      	movs	r0, #37	; 0x25
 8000eda:	f000 fd06 	bl	80018ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ede:	2025      	movs	r0, #37	; 0x25
 8000ee0:	f000 fd1f 	bl	8001922 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ee4:	bf00      	nop
 8000ee6:	3720      	adds	r7, #32
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40013800 	.word	0x40013800
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	40010800 	.word	0x40010800

08000ef8 <transmit>:
extern uint8_t requestCode[];
extern Bmp180 bmp[6];
extern I2C_HandleTypeDef hi2c1;
uint8_t package[8];

void transmit(uint64_t data) {
 8000ef8:	b590      	push	{r4, r7, lr}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	e9c7 0100 	strd	r0, r1, [r7]
	for (uint8_t i = 0; i < 8; ++i) {
 8000f02:	2300      	movs	r3, #0
 8000f04:	73fb      	strb	r3, [r7, #15]
 8000f06:	e012      	b.n	8000f2e <transmit+0x36>
		package[i] = (uint8_t) data;
 8000f08:	7bfb      	ldrb	r3, [r7, #15]
 8000f0a:	7839      	ldrb	r1, [r7, #0]
 8000f0c:	4a0f      	ldr	r2, [pc, #60]	; (8000f4c <transmit+0x54>)
 8000f0e:	54d1      	strb	r1, [r2, r3]
		data >>= 8;
 8000f10:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000f14:	f04f 0300 	mov.w	r3, #0
 8000f18:	f04f 0400 	mov.w	r4, #0
 8000f1c:	0a0b      	lsrs	r3, r1, #8
 8000f1e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000f22:	0a14      	lsrs	r4, r2, #8
 8000f24:	e9c7 3400 	strd	r3, r4, [r7]
	for (uint8_t i = 0; i < 8; ++i) {
 8000f28:	7bfb      	ldrb	r3, [r7, #15]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	73fb      	strb	r3, [r7, #15]
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
 8000f30:	2b07      	cmp	r3, #7
 8000f32:	d9e9      	bls.n	8000f08 <transmit+0x10>
	}
	HAL_UART_Transmit(&huart1, (uint8_t*) package, 8, 0xFFFF);
 8000f34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f38:	2208      	movs	r2, #8
 8000f3a:	4904      	ldr	r1, [pc, #16]	; (8000f4c <transmit+0x54>)
 8000f3c:	4804      	ldr	r0, [pc, #16]	; (8000f50 <transmit+0x58>)
 8000f3e:	f002 ffc4 	bl	8003eca <HAL_UART_Transmit>
}
 8000f42:	bf00      	nop
 8000f44:	3714      	adds	r7, #20
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd90      	pop	{r4, r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	200006d4 	.word	0x200006d4
 8000f50:	20000654 	.word	0x20000654

08000f54 <transmitter>:

void transmitter(uint8_t i) {
 8000f54:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8000f58:	b086      	sub	sp, #24
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	71fb      	strb	r3, [r7, #7]
	TCA_Set(&hi2c1, (TcaAddress) i);
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	4619      	mov	r1, r3
 8000f64:	4822      	ldr	r0, [pc, #136]	; (8000ff0 <transmitter+0x9c>)
 8000f66:	f000 fb1b 	bl	80015a0 <TCA_Set>
	BMP_180_Update(&bmp[i]);
 8000f6a:	79fa      	ldrb	r2, [r7, #7]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	011b      	lsls	r3, r3, #4
 8000f70:	1a9b      	subs	r3, r3, r2
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	4a1f      	ldr	r2, [pc, #124]	; (8000ff4 <transmitter+0xa0>)
 8000f76:	4413      	add	r3, r2
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff fb33 	bl	80005e4 <BMP_180_Update>
	uint32_t _t = (bmp[i].isInit << 31) | bmp[i].Temperature;
 8000f7e:	79fa      	ldrb	r2, [r7, #7]
 8000f80:	491c      	ldr	r1, [pc, #112]	; (8000ff4 <transmitter+0xa0>)
 8000f82:	4613      	mov	r3, r2
 8000f84:	011b      	lsls	r3, r3, #4
 8000f86:	1a9b      	subs	r3, r3, r2
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	440b      	add	r3, r1
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	07d9      	lsls	r1, r3, #31
 8000f90:	79fa      	ldrb	r2, [r7, #7]
 8000f92:	4818      	ldr	r0, [pc, #96]	; (8000ff4 <transmitter+0xa0>)
 8000f94:	4613      	mov	r3, r2
 8000f96:	011b      	lsls	r3, r3, #4
 8000f98:	1a9b      	subs	r3, r3, r2
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	4403      	add	r3, r0
 8000f9e:	3334      	adds	r3, #52	; 0x34
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	430b      	orrs	r3, r1
 8000fa4:	617b      	str	r3, [r7, #20]
	uint64_t data = (((uint64_t) _t << 32)) | bmp[i].Pressure;
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	f04f 0400 	mov.w	r4, #0
 8000fac:	f04f 0100 	mov.w	r1, #0
 8000fb0:	f04f 0200 	mov.w	r2, #0
 8000fb4:	001a      	movs	r2, r3
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	79f8      	ldrb	r0, [r7, #7]
 8000fba:	4c0e      	ldr	r4, [pc, #56]	; (8000ff4 <transmitter+0xa0>)
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	011b      	lsls	r3, r3, #4
 8000fc0:	1a1b      	subs	r3, r3, r0
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	4423      	add	r3, r4
 8000fc6:	3338      	adds	r3, #56	; 0x38
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	469b      	mov	fp, r3
 8000fcc:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 8000fd0:	ea4b 0301 	orr.w	r3, fp, r1
 8000fd4:	ea4c 0402 	orr.w	r4, ip, r2
 8000fd8:	e9c7 3402 	strd	r3, r4, [r7, #8]
	transmit(data);
 8000fdc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fe0:	f7ff ff8a 	bl	8000ef8 <transmit>
}
 8000fe4:	bf00      	nop
 8000fe6:	3718      	adds	r7, #24
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000600 	.word	0x20000600
 8000ff4:	20000498 	.word	0x20000498

08000ff8 <case0>:

void case0() {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
	transmitter(0);
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f7ff ffa9 	bl	8000f54 <transmitter>
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}

08001006 <case1>:

void case1() {
 8001006:	b580      	push	{r7, lr}
 8001008:	af00      	add	r7, sp, #0
	transmitter(1);
 800100a:	2001      	movs	r0, #1
 800100c:	f7ff ffa2 	bl	8000f54 <transmitter>
}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}

08001014 <case2>:

void case2() {
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
	transmitter(2);
 8001018:	2002      	movs	r0, #2
 800101a:	f7ff ff9b 	bl	8000f54 <transmitter>
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}

08001022 <case3>:

void case3() {
 8001022:	b580      	push	{r7, lr}
 8001024:	af00      	add	r7, sp, #0
	transmitter(3);
 8001026:	2003      	movs	r0, #3
 8001028:	f7ff ff94 	bl	8000f54 <transmitter>
}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}

08001030 <case4>:

void case4() {
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
	transmitter(4);
 8001034:	2004      	movs	r0, #4
 8001036:	f7ff ff8d 	bl	8000f54 <transmitter>
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}

0800103e <case5>:

void case5() {
 800103e:	b580      	push	{r7, lr}
 8001040:	af00      	add	r7, sp, #0
	transmitter(5);
 8001042:	2005      	movs	r0, #5
 8001044:	f7ff ff86 	bl	8000f54 <transmitter>
}
 8001048:	bf00      	nop
 800104a:	bd80      	pop	{r7, pc}

0800104c <case6>:

void case6() {
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
	transmitter(6);
 8001050:	2006      	movs	r0, #6
 8001052:	f7ff ff7f 	bl	8000f54 <transmitter>
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}

0800105a <case80>:

void case80() {
 800105a:	b580      	push	{r7, lr}
 800105c:	af00      	add	r7, sp, #0
	transmit(0);
 800105e:	f04f 0000 	mov.w	r0, #0
 8001062:	f04f 0100 	mov.w	r1, #0
 8001066:	f7ff ff47 	bl	8000ef8 <transmit>
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}

0800106e <caseDefault>:

void caseDefault() {
 800106e:	b580      	push	{r7, lr}
 8001070:	af00      	add	r7, sp, #0
	transmit(-1);
 8001072:	f04f 30ff 	mov.w	r0, #4294967295
 8001076:	f04f 31ff 	mov.w	r1, #4294967295
 800107a:	f7ff ff3d 	bl	8000ef8 <transmit>
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}

08001082 <NMI_Handler>:
/*           Cortex-M3 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */

	/* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	46bd      	mov	sp, r7
 800108a:	bc80      	pop	{r7}
 800108c:	4770      	bx	lr
	...

08001090 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
 8001094:	2200      	movs	r2, #0
 8001096:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800109a:	4802      	ldr	r0, [pc, #8]	; (80010a4 <HardFault_Handler+0x14>)
 800109c:	f000 fe2c 	bl	8001cf8 <HAL_GPIO_WritePin>
	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 80010a0:	e7fe      	b.n	80010a0 <HardFault_Handler+0x10>
 80010a2:	bf00      	nop
 80010a4:	40010c00 	.word	0x40010c00

080010a8 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 80010ac:	e7fe      	b.n	80010ac <MemManage_Handler+0x4>

080010ae <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 80010b2:	e7fe      	b.n	80010b2 <BusFault_Handler+0x4>

080010b4 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 80010b8:	e7fe      	b.n	80010b8 <UsageFault_Handler+0x4>

080010ba <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bc80      	pop	{r7}
 80010c4:	4770      	bx	lr

080010c6 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bc80      	pop	{r7}
 80010d0:	4770      	bx	lr

080010d2 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	46bd      	mov	sp, r7
 80010da:	bc80      	pop	{r7}
 80010dc:	4770      	bx	lr

080010de <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 80010de:	b580      	push	{r7, lr}
 80010e0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 80010e2:	f000 faed 	bl	80016c0 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <TIM2_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles TIM2 global interrupt.
 */
void TIM2_IRQHandler(void) {
 80010ec:	b590      	push	{r4, r7, lr}
 80010ee:	b09f      	sub	sp, #124	; 0x7c
 80010f0:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN TIM2_IRQn 0 */

	/* USER CODE END TIM2_IRQn 0 */
	HAL_TIM_IRQHandler(&htim2);
 80010f2:	489a      	ldr	r0, [pc, #616]	; (800135c <TIM2_IRQHandler+0x270>)
 80010f4:	f002 fb62 	bl	80037bc <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM2_IRQn 1 */

	ssd1306_Fill(White);
 80010f8:	2001      	movs	r0, #1
 80010fa:	f7ff fcb9 	bl	8000a70 <ssd1306_Fill>
	char info[6][17] = { { 'A', '-', 0 }, { 'B', '-', 0 }, { 'C', '-', 0 }, {
 80010fe:	f107 0308 	add.w	r3, r7, #8
 8001102:	2266      	movs	r2, #102	; 0x66
 8001104:	2100      	movs	r1, #0
 8001106:	4618      	mov	r0, r3
 8001108:	f003 fb6f 	bl	80047ea <memset>
 800110c:	2341      	movs	r3, #65	; 0x41
 800110e:	723b      	strb	r3, [r7, #8]
 8001110:	232d      	movs	r3, #45	; 0x2d
 8001112:	727b      	strb	r3, [r7, #9]
 8001114:	2342      	movs	r3, #66	; 0x42
 8001116:	767b      	strb	r3, [r7, #25]
 8001118:	232d      	movs	r3, #45	; 0x2d
 800111a:	76bb      	strb	r3, [r7, #26]
 800111c:	2343      	movs	r3, #67	; 0x43
 800111e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8001122:	232d      	movs	r3, #45	; 0x2d
 8001124:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001128:	2344      	movs	r3, #68	; 0x44
 800112a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800112e:	232d      	movs	r3, #45	; 0x2d
 8001130:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8001134:	2345      	movs	r3, #69	; 0x45
 8001136:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 800113a:	232d      	movs	r3, #45	; 0x2d
 800113c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8001140:	2346      	movs	r3, #70	; 0x46
 8001142:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 8001146:	232d      	movs	r3, #45	; 0x2d
 8001148:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			'D', '-', 0 }, { 'E', '-', 0 }, { 'F', '-', 0 } };

	for (uint8_t i = 0; i < 6; ++i) {
 800114c:	2300      	movs	r3, #0
 800114e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001152:	e0f7      	b.n	8001344 <TIM2_IRQHandler+0x258>
		TCA_Set(&hi2c1, (TcaAddress) i);
 8001154:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001158:	4619      	mov	r1, r3
 800115a:	4881      	ldr	r0, [pc, #516]	; (8001360 <TIM2_IRQHandler+0x274>)
 800115c:	f000 fa20 	bl	80015a0 <TCA_Set>
		BMP_180_Update(&bmp[i]);
 8001160:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001164:	4613      	mov	r3, r2
 8001166:	011b      	lsls	r3, r3, #4
 8001168:	1a9b      	subs	r3, r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	4a7d      	ldr	r2, [pc, #500]	; (8001364 <TIM2_IRQHandler+0x278>)
 800116e:	4413      	add	r3, r2
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff fa37 	bl	80005e4 <BMP_180_Update>
		char data_p[7] = { 0 };
 8001176:	463b      	mov	r3, r7
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	f8c3 2003 	str.w	r2, [r3, #3]
		if (bmp[i].isInit == 1) {
 8001180:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001184:	4977      	ldr	r1, [pc, #476]	; (8001364 <TIM2_IRQHandler+0x278>)
 8001186:	4613      	mov	r3, r2
 8001188:	011b      	lsls	r3, r3, #4
 800118a:	1a9b      	subs	r3, r3, r2
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	440b      	add	r3, r1
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	2b01      	cmp	r3, #1
 8001194:	f040 80a6 	bne.w	80012e4 <TIM2_IRQHandler+0x1f8>
			itoa(bmp[i].Pressure, data_p, 10);
 8001198:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800119c:	4971      	ldr	r1, [pc, #452]	; (8001364 <TIM2_IRQHandler+0x278>)
 800119e:	4613      	mov	r3, r2
 80011a0:	011b      	lsls	r3, r3, #4
 80011a2:	1a9b      	subs	r3, r3, r2
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	440b      	add	r3, r1
 80011a8:	3338      	adds	r3, #56	; 0x38
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4639      	mov	r1, r7
 80011ae:	220a      	movs	r2, #10
 80011b0:	4618      	mov	r0, r3
 80011b2:	f003 fb0d 	bl	80047d0 <itoa>
			if (bmp[i].Pressure < 100000) {
 80011b6:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80011ba:	496a      	ldr	r1, [pc, #424]	; (8001364 <TIM2_IRQHandler+0x278>)
 80011bc:	4613      	mov	r3, r2
 80011be:	011b      	lsls	r3, r3, #4
 80011c0:	1a9b      	subs	r3, r3, r2
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	440b      	add	r3, r1
 80011c6:	3338      	adds	r3, #56	; 0x38
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a67      	ldr	r2, [pc, #412]	; (8001368 <TIM2_IRQHandler+0x27c>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	dc11      	bgt.n	80011f4 <TIM2_IRQHandler+0x108>
				strcat(info[i], " ");
 80011d0:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80011d4:	f107 0108 	add.w	r1, r7, #8
 80011d8:	4613      	mov	r3, r2
 80011da:	011b      	lsls	r3, r3, #4
 80011dc:	4413      	add	r3, r2
 80011de:	18cc      	adds	r4, r1, r3
 80011e0:	4620      	mov	r0, r4
 80011e2:	f7fe ffb3 	bl	800014c <strlen>
 80011e6:	4603      	mov	r3, r0
 80011e8:	4423      	add	r3, r4
 80011ea:	4960      	ldr	r1, [pc, #384]	; (800136c <TIM2_IRQHandler+0x280>)
 80011ec:	461a      	mov	r2, r3
 80011ee:	460b      	mov	r3, r1
 80011f0:	881b      	ldrh	r3, [r3, #0]
 80011f2:	8013      	strh	r3, [r2, #0]
			}
			strcat(info[i], data_p);
 80011f4:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80011f8:	f107 0108 	add.w	r1, r7, #8
 80011fc:	4613      	mov	r3, r2
 80011fe:	011b      	lsls	r3, r3, #4
 8001200:	4413      	add	r3, r2
 8001202:	440b      	add	r3, r1
 8001204:	463a      	mov	r2, r7
 8001206:	4611      	mov	r1, r2
 8001208:	4618      	mov	r0, r3
 800120a:	f003 faf6 	bl	80047fa <strcat>
			itoa(bmp[i].Temperature, data_p, 10);
 800120e:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001212:	4954      	ldr	r1, [pc, #336]	; (8001364 <TIM2_IRQHandler+0x278>)
 8001214:	4613      	mov	r3, r2
 8001216:	011b      	lsls	r3, r3, #4
 8001218:	1a9b      	subs	r3, r3, r2
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	440b      	add	r3, r1
 800121e:	3334      	adds	r3, #52	; 0x34
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4639      	mov	r1, r7
 8001224:	220a      	movs	r2, #10
 8001226:	4618      	mov	r0, r3
 8001228:	f003 fad2 	bl	80047d0 <itoa>
			strcat(info[i], " ");
 800122c:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001230:	f107 0108 	add.w	r1, r7, #8
 8001234:	4613      	mov	r3, r2
 8001236:	011b      	lsls	r3, r3, #4
 8001238:	4413      	add	r3, r2
 800123a:	18cc      	adds	r4, r1, r3
 800123c:	4620      	mov	r0, r4
 800123e:	f7fe ff85 	bl	800014c <strlen>
 8001242:	4603      	mov	r3, r0
 8001244:	4423      	add	r3, r4
 8001246:	4949      	ldr	r1, [pc, #292]	; (800136c <TIM2_IRQHandler+0x280>)
 8001248:	461a      	mov	r2, r3
 800124a:	460b      	mov	r3, r1
 800124c:	881b      	ldrh	r3, [r3, #0]
 800124e:	8013      	strh	r3, [r2, #0]
			if (bmp[i].Temperature < 100) {
 8001250:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001254:	4943      	ldr	r1, [pc, #268]	; (8001364 <TIM2_IRQHandler+0x278>)
 8001256:	4613      	mov	r3, r2
 8001258:	011b      	lsls	r3, r3, #4
 800125a:	1a9b      	subs	r3, r3, r2
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	440b      	add	r3, r1
 8001260:	3334      	adds	r3, #52	; 0x34
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2b63      	cmp	r3, #99	; 0x63
 8001266:	dc11      	bgt.n	800128c <TIM2_IRQHandler+0x1a0>
				strcat(info[i], " ");
 8001268:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800126c:	f107 0108 	add.w	r1, r7, #8
 8001270:	4613      	mov	r3, r2
 8001272:	011b      	lsls	r3, r3, #4
 8001274:	4413      	add	r3, r2
 8001276:	18cc      	adds	r4, r1, r3
 8001278:	4620      	mov	r0, r4
 800127a:	f7fe ff67 	bl	800014c <strlen>
 800127e:	4603      	mov	r3, r0
 8001280:	4423      	add	r3, r4
 8001282:	493a      	ldr	r1, [pc, #232]	; (800136c <TIM2_IRQHandler+0x280>)
 8001284:	461a      	mov	r2, r3
 8001286:	460b      	mov	r3, r1
 8001288:	881b      	ldrh	r3, [r3, #0]
 800128a:	8013      	strh	r3, [r2, #0]
			}
			if (bmp[i].Temperature < 10) {
 800128c:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001290:	4934      	ldr	r1, [pc, #208]	; (8001364 <TIM2_IRQHandler+0x278>)
 8001292:	4613      	mov	r3, r2
 8001294:	011b      	lsls	r3, r3, #4
 8001296:	1a9b      	subs	r3, r3, r2
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	440b      	add	r3, r1
 800129c:	3334      	adds	r3, #52	; 0x34
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2b09      	cmp	r3, #9
 80012a2:	dc11      	bgt.n	80012c8 <TIM2_IRQHandler+0x1dc>
				strcat(info[i], " ");
 80012a4:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80012a8:	f107 0108 	add.w	r1, r7, #8
 80012ac:	4613      	mov	r3, r2
 80012ae:	011b      	lsls	r3, r3, #4
 80012b0:	4413      	add	r3, r2
 80012b2:	18cc      	adds	r4, r1, r3
 80012b4:	4620      	mov	r0, r4
 80012b6:	f7fe ff49 	bl	800014c <strlen>
 80012ba:	4603      	mov	r3, r0
 80012bc:	4423      	add	r3, r4
 80012be:	492b      	ldr	r1, [pc, #172]	; (800136c <TIM2_IRQHandler+0x280>)
 80012c0:	461a      	mov	r2, r3
 80012c2:	460b      	mov	r3, r1
 80012c4:	881b      	ldrh	r3, [r3, #0]
 80012c6:	8013      	strh	r3, [r2, #0]
			}
			strcat(info[i], data_p);
 80012c8:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80012cc:	f107 0108 	add.w	r1, r7, #8
 80012d0:	4613      	mov	r3, r2
 80012d2:	011b      	lsls	r3, r3, #4
 80012d4:	4413      	add	r3, r2
 80012d6:	440b      	add	r3, r1
 80012d8:	463a      	mov	r2, r7
 80012da:	4611      	mov	r1, r2
 80012dc:	4618      	mov	r0, r3
 80012de:	f003 fa8c 	bl	80047fa <strcat>
 80012e2:	e012      	b.n	800130a <TIM2_IRQHandler+0x21e>
		} else {
			strcat(info[i], "invalid");
 80012e4:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80012e8:	f107 0108 	add.w	r1, r7, #8
 80012ec:	4613      	mov	r3, r2
 80012ee:	011b      	lsls	r3, r3, #4
 80012f0:	4413      	add	r3, r2
 80012f2:	18cc      	adds	r4, r1, r3
 80012f4:	4620      	mov	r0, r4
 80012f6:	f7fe ff29 	bl	800014c <strlen>
 80012fa:	4603      	mov	r3, r0
 80012fc:	4423      	add	r3, r4
 80012fe:	491c      	ldr	r1, [pc, #112]	; (8001370 <TIM2_IRQHandler+0x284>)
 8001300:	461a      	mov	r2, r3
 8001302:	460b      	mov	r3, r1
 8001304:	cb03      	ldmia	r3!, {r0, r1}
 8001306:	6010      	str	r0, [r2, #0]
 8001308:	6051      	str	r1, [r2, #4]
		}
		ssd1306_SetCursor(4, i * 10);
 800130a:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800130e:	4613      	mov	r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	4413      	add	r3, r2
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	4619      	mov	r1, r3
 8001318:	2004      	movs	r0, #4
 800131a:	f7ff fcd1 	bl	8000cc0 <ssd1306_SetCursor>
		ssd1306_WriteString(info[i], Font_7x9, Black);
 800131e:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001322:	f107 0108 	add.w	r1, r7, #8
 8001326:	4613      	mov	r3, r2
 8001328:	011b      	lsls	r3, r3, #4
 800132a:	4413      	add	r3, r2
 800132c:	18c8      	adds	r0, r1, r3
 800132e:	4b11      	ldr	r3, [pc, #68]	; (8001374 <TIM2_IRQHandler+0x288>)
 8001330:	2200      	movs	r2, #0
 8001332:	9200      	str	r2, [sp, #0]
 8001334:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001336:	f7ff fca7 	bl	8000c88 <ssd1306_WriteString>
	for (uint8_t i = 0; i < 6; ++i) {
 800133a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800133e:	3301      	adds	r3, #1
 8001340:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001344:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001348:	2b05      	cmp	r3, #5
 800134a:	f67f af03 	bls.w	8001154 <TIM2_IRQHandler+0x68>
	}

	ssd1306_UpdateScreen();
 800134e:	f7ff fbb1 	bl	8000ab4 <ssd1306_UpdateScreen>
	/* USER CODE END TIM2_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	3774      	adds	r7, #116	; 0x74
 8001356:	46bd      	mov	sp, r7
 8001358:	bd90      	pop	{r4, r7, pc}
 800135a:	bf00      	nop
 800135c:	20000694 	.word	0x20000694
 8001360:	20000600 	.word	0x20000600
 8001364:	20000498 	.word	0x20000498
 8001368:	0001869f 	.word	0x0001869f
 800136c:	080048cc 	.word	0x080048cc
 8001370:	080048d0 	.word	0x080048d0
 8001374:	20000000 	.word	0x20000000

08001378 <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void) {
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART1_IRQn 0 */
	HAL_GPIO_WritePin(GPIOC, 13, SET);
 800137c:	2201      	movs	r2, #1
 800137e:	210d      	movs	r1, #13
 8001380:	486a      	ldr	r0, [pc, #424]	; (800152c <USART1_IRQHandler+0x1b4>)
 8001382:	f000 fcb9 	bl	8001cf8 <HAL_GPIO_WritePin>
	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
 8001386:	486a      	ldr	r0, [pc, #424]	; (8001530 <USART1_IRQHandler+0x1b8>)
 8001388:	f002 fe8c 	bl	80040a4 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART1_IRQn 1 */

	switch (requestCode[0]) {
 800138c:	4b69      	ldr	r3, [pc, #420]	; (8001534 <USART1_IRQHandler+0x1bc>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b50      	cmp	r3, #80	; 0x50
 8001392:	f200 80bd 	bhi.w	8001510 <USART1_IRQHandler+0x198>
 8001396:	a201      	add	r2, pc, #4	; (adr r2, 800139c <USART1_IRQHandler+0x24>)
 8001398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800139c:	080014e1 	.word	0x080014e1
 80013a0:	080014e7 	.word	0x080014e7
 80013a4:	080014ed 	.word	0x080014ed
 80013a8:	080014f3 	.word	0x080014f3
 80013ac:	080014f9 	.word	0x080014f9
 80013b0:	080014ff 	.word	0x080014ff
 80013b4:	08001505 	.word	0x08001505
 80013b8:	08001511 	.word	0x08001511
 80013bc:	08001511 	.word	0x08001511
 80013c0:	08001511 	.word	0x08001511
 80013c4:	08001511 	.word	0x08001511
 80013c8:	08001511 	.word	0x08001511
 80013cc:	08001511 	.word	0x08001511
 80013d0:	08001511 	.word	0x08001511
 80013d4:	08001511 	.word	0x08001511
 80013d8:	08001511 	.word	0x08001511
 80013dc:	08001511 	.word	0x08001511
 80013e0:	08001511 	.word	0x08001511
 80013e4:	08001511 	.word	0x08001511
 80013e8:	08001511 	.word	0x08001511
 80013ec:	08001511 	.word	0x08001511
 80013f0:	08001511 	.word	0x08001511
 80013f4:	08001511 	.word	0x08001511
 80013f8:	08001511 	.word	0x08001511
 80013fc:	08001511 	.word	0x08001511
 8001400:	08001511 	.word	0x08001511
 8001404:	08001511 	.word	0x08001511
 8001408:	08001511 	.word	0x08001511
 800140c:	08001511 	.word	0x08001511
 8001410:	08001511 	.word	0x08001511
 8001414:	08001511 	.word	0x08001511
 8001418:	08001511 	.word	0x08001511
 800141c:	08001511 	.word	0x08001511
 8001420:	08001511 	.word	0x08001511
 8001424:	08001511 	.word	0x08001511
 8001428:	08001511 	.word	0x08001511
 800142c:	08001511 	.word	0x08001511
 8001430:	08001511 	.word	0x08001511
 8001434:	08001511 	.word	0x08001511
 8001438:	08001511 	.word	0x08001511
 800143c:	08001511 	.word	0x08001511
 8001440:	08001511 	.word	0x08001511
 8001444:	08001511 	.word	0x08001511
 8001448:	08001511 	.word	0x08001511
 800144c:	08001511 	.word	0x08001511
 8001450:	08001511 	.word	0x08001511
 8001454:	08001511 	.word	0x08001511
 8001458:	08001511 	.word	0x08001511
 800145c:	08001511 	.word	0x08001511
 8001460:	08001511 	.word	0x08001511
 8001464:	08001511 	.word	0x08001511
 8001468:	08001511 	.word	0x08001511
 800146c:	08001511 	.word	0x08001511
 8001470:	08001511 	.word	0x08001511
 8001474:	08001511 	.word	0x08001511
 8001478:	08001511 	.word	0x08001511
 800147c:	08001511 	.word	0x08001511
 8001480:	08001511 	.word	0x08001511
 8001484:	08001511 	.word	0x08001511
 8001488:	08001511 	.word	0x08001511
 800148c:	08001511 	.word	0x08001511
 8001490:	08001511 	.word	0x08001511
 8001494:	08001511 	.word	0x08001511
 8001498:	08001511 	.word	0x08001511
 800149c:	08001511 	.word	0x08001511
 80014a0:	08001511 	.word	0x08001511
 80014a4:	08001511 	.word	0x08001511
 80014a8:	08001511 	.word	0x08001511
 80014ac:	08001511 	.word	0x08001511
 80014b0:	08001511 	.word	0x08001511
 80014b4:	08001511 	.word	0x08001511
 80014b8:	08001511 	.word	0x08001511
 80014bc:	08001511 	.word	0x08001511
 80014c0:	08001511 	.word	0x08001511
 80014c4:	08001511 	.word	0x08001511
 80014c8:	08001511 	.word	0x08001511
 80014cc:	08001511 	.word	0x08001511
 80014d0:	08001511 	.word	0x08001511
 80014d4:	08001511 	.word	0x08001511
 80014d8:	08001511 	.word	0x08001511
 80014dc:	0800150b 	.word	0x0800150b
	case 0:
		case0();
 80014e0:	f7ff fd8a 	bl	8000ff8 <case0>
		break;
 80014e4:	e016      	b.n	8001514 <USART1_IRQHandler+0x19c>
	case 1:
		case1();
 80014e6:	f7ff fd8e 	bl	8001006 <case1>
		break;
 80014ea:	e013      	b.n	8001514 <USART1_IRQHandler+0x19c>
	case 2:
		case2();
 80014ec:	f7ff fd92 	bl	8001014 <case2>
		break;
 80014f0:	e010      	b.n	8001514 <USART1_IRQHandler+0x19c>
	case 3:
		case3();
 80014f2:	f7ff fd96 	bl	8001022 <case3>
		break;
 80014f6:	e00d      	b.n	8001514 <USART1_IRQHandler+0x19c>
	case 4:
		case4();
 80014f8:	f7ff fd9a 	bl	8001030 <case4>
		break;
 80014fc:	e00a      	b.n	8001514 <USART1_IRQHandler+0x19c>
	case 5:
		case5();
 80014fe:	f7ff fd9e 	bl	800103e <case5>
		break;
 8001502:	e007      	b.n	8001514 <USART1_IRQHandler+0x19c>
	case 6:
		case6();
 8001504:	f7ff fda2 	bl	800104c <case6>
		break;
 8001508:	e004      	b.n	8001514 <USART1_IRQHandler+0x19c>
	case 80:
		case80();
 800150a:	f7ff fda6 	bl	800105a <case80>
		break;
 800150e:	e001      	b.n	8001514 <USART1_IRQHandler+0x19c>
	default:
		caseDefault();
 8001510:	f7ff fdad 	bl	800106e <caseDefault>
	}
	HAL_GPIO_WritePin(GPIOC, 13, RESET);
 8001514:	2200      	movs	r2, #0
 8001516:	210d      	movs	r1, #13
 8001518:	4804      	ldr	r0, [pc, #16]	; (800152c <USART1_IRQHandler+0x1b4>)
 800151a:	f000 fbed 	bl	8001cf8 <HAL_GPIO_WritePin>
	HAL_UART_Receive_IT(&huart1, (uint8_t*) requestCode, 1);
 800151e:	2201      	movs	r2, #1
 8001520:	4904      	ldr	r1, [pc, #16]	; (8001534 <USART1_IRQHandler+0x1bc>)
 8001522:	4803      	ldr	r0, [pc, #12]	; (8001530 <USART1_IRQHandler+0x1b8>)
 8001524:	f002 fd6a 	bl	8003ffc <HAL_UART_Receive_IT>
	/* USER CODE END USART1_IRQn 1 */
}
 8001528:	bf00      	nop
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40011000 	.word	0x40011000
 8001530:	20000654 	.word	0x20000654
 8001534:	20000034 	.word	0x20000034

08001538 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800153c:	4b15      	ldr	r3, [pc, #84]	; (8001594 <SystemInit+0x5c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a14      	ldr	r2, [pc, #80]	; (8001594 <SystemInit+0x5c>)
 8001542:	f043 0301 	orr.w	r3, r3, #1
 8001546:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001548:	4b12      	ldr	r3, [pc, #72]	; (8001594 <SystemInit+0x5c>)
 800154a:	685a      	ldr	r2, [r3, #4]
 800154c:	4911      	ldr	r1, [pc, #68]	; (8001594 <SystemInit+0x5c>)
 800154e:	4b12      	ldr	r3, [pc, #72]	; (8001598 <SystemInit+0x60>)
 8001550:	4013      	ands	r3, r2
 8001552:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001554:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <SystemInit+0x5c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a0e      	ldr	r2, [pc, #56]	; (8001594 <SystemInit+0x5c>)
 800155a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800155e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001562:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001564:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <SystemInit+0x5c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a0a      	ldr	r2, [pc, #40]	; (8001594 <SystemInit+0x5c>)
 800156a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800156e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001570:	4b08      	ldr	r3, [pc, #32]	; (8001594 <SystemInit+0x5c>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	4a07      	ldr	r2, [pc, #28]	; (8001594 <SystemInit+0x5c>)
 8001576:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800157a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800157c:	4b05      	ldr	r3, [pc, #20]	; (8001594 <SystemInit+0x5c>)
 800157e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001582:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001584:	4b05      	ldr	r3, [pc, #20]	; (800159c <SystemInit+0x64>)
 8001586:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800158a:	609a      	str	r2, [r3, #8]
#endif 
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr
 8001594:	40021000 	.word	0x40021000
 8001598:	f8ff0000 	.word	0xf8ff0000
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <TCA_Set>:
#define TCA_ADDRESS 0xE0
#define TCA_CONTROL 0x3B
#define I2C_TIMEOUT 1000

HAL_StatusTypeDef TCA_Set(I2C_HandleTypeDef *i2c,
		TcaAddress address) {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af02      	add	r7, sp, #8
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	460b      	mov	r3, r1
 80015aa:	70fb      	strb	r3, [r7, #3]

	uint8_t data[2] = {TCA_CONTROL, 1 << address};
 80015ac:	233b      	movs	r3, #59	; 0x3b
 80015ae:	733b      	strb	r3, [r7, #12]
 80015b0:	78fb      	ldrb	r3, [r7, #3]
 80015b2:	2201      	movs	r2, #1
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	737b      	strb	r3, [r7, #13]

	HAL_StatusTypeDef res = HAL_I2C_Master_Transmit(i2c, TCA_ADDRESS, data, 2, I2C_TIMEOUT);
 80015bc:	f107 020c 	add.w	r2, r7, #12
 80015c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015c4:	9300      	str	r3, [sp, #0]
 80015c6:	2302      	movs	r3, #2
 80015c8:	21e0      	movs	r1, #224	; 0xe0
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f000 fcd4 	bl	8001f78 <HAL_I2C_Master_Transmit>
 80015d0:	4603      	mov	r3, r0
 80015d2:	73fb      	strb	r3, [r7, #15]
	if (res != HAL_OK)
 80015d4:	7bfb      	ldrb	r3, [r7, #15]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <TCA_Set+0x3e>
		return res;
 80015da:	7bfb      	ldrb	r3, [r7, #15]
 80015dc:	e000      	b.n	80015e0 <TCA_Set+0x40>

	return res;
 80015de:	7bfb      	ldrb	r3, [r7, #15]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3710      	adds	r7, #16
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80015e8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80015ea:	e003      	b.n	80015f4 <LoopCopyDataInit>

080015ec <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80015ec:	4b0b      	ldr	r3, [pc, #44]	; (800161c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80015ee:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80015f0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80015f2:	3104      	adds	r1, #4

080015f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80015f4:	480a      	ldr	r0, [pc, #40]	; (8001620 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80015f6:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80015f8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80015fa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80015fc:	d3f6      	bcc.n	80015ec <CopyDataInit>
  ldr r2, =_sbss
 80015fe:	4a0a      	ldr	r2, [pc, #40]	; (8001628 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001600:	e002      	b.n	8001608 <LoopFillZerobss>

08001602 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001602:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001604:	f842 3b04 	str.w	r3, [r2], #4

08001608 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001608:	4b08      	ldr	r3, [pc, #32]	; (800162c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800160a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800160c:	d3f9      	bcc.n	8001602 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800160e:	f7ff ff93 	bl	8001538 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001612:	f003 f8a1 	bl	8004758 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001616:	f7ff f837 	bl	8000688 <main>
  bx lr
 800161a:	4770      	bx	lr
  ldr r3, =_sidata
 800161c:	08004ecc 	.word	0x08004ecc
  ldr r0, =_sdata
 8001620:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001624:	20000018 	.word	0x20000018
  ldr r2, =_sbss
 8001628:	20000018 	.word	0x20000018
  ldr r3, = _ebss
 800162c:	200006e0 	.word	0x200006e0

08001630 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001630:	e7fe      	b.n	8001630 <ADC1_2_IRQHandler>
	...

08001634 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001638:	4b08      	ldr	r3, [pc, #32]	; (800165c <HAL_Init+0x28>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a07      	ldr	r2, [pc, #28]	; (800165c <HAL_Init+0x28>)
 800163e:	f043 0310 	orr.w	r3, r3, #16
 8001642:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001644:	2003      	movs	r0, #3
 8001646:	f000 f945 	bl	80018d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800164a:	2000      	movs	r0, #0
 800164c:	f000 f808 	bl	8001660 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001650:	f7ff fb6a 	bl	8000d28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40022000 	.word	0x40022000

08001660 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001668:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <HAL_InitTick+0x54>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <HAL_InitTick+0x58>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	4619      	mov	r1, r3
 8001672:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001676:	fbb3 f3f1 	udiv	r3, r3, r1
 800167a:	fbb2 f3f3 	udiv	r3, r2, r3
 800167e:	4618      	mov	r0, r3
 8001680:	f000 f95d 	bl	800193e <HAL_SYSTICK_Config>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e00e      	b.n	80016ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2b0f      	cmp	r3, #15
 8001692:	d80a      	bhi.n	80016aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001694:	2200      	movs	r2, #0
 8001696:	6879      	ldr	r1, [r7, #4]
 8001698:	f04f 30ff 	mov.w	r0, #4294967295
 800169c:	f000 f925 	bl	80018ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016a0:	4a06      	ldr	r2, [pc, #24]	; (80016bc <HAL_InitTick+0x5c>)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
 80016a8:	e000      	b.n	80016ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	2000000c 	.word	0x2000000c
 80016b8:	20000014 	.word	0x20000014
 80016bc:	20000010 	.word	0x20000010

080016c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016c4:	4b05      	ldr	r3, [pc, #20]	; (80016dc <HAL_IncTick+0x1c>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	461a      	mov	r2, r3
 80016ca:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <HAL_IncTick+0x20>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4413      	add	r3, r2
 80016d0:	4a03      	ldr	r2, [pc, #12]	; (80016e0 <HAL_IncTick+0x20>)
 80016d2:	6013      	str	r3, [r2, #0]
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr
 80016dc:	20000014 	.word	0x20000014
 80016e0:	200006dc 	.word	0x200006dc

080016e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  return uwTick;
 80016e8:	4b02      	ldr	r3, [pc, #8]	; (80016f4 <HAL_GetTick+0x10>)
 80016ea:	681b      	ldr	r3, [r3, #0]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr
 80016f4:	200006dc 	.word	0x200006dc

080016f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001700:	f7ff fff0 	bl	80016e4 <HAL_GetTick>
 8001704:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001710:	d005      	beq.n	800171e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001712:	4b09      	ldr	r3, [pc, #36]	; (8001738 <HAL_Delay+0x40>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	461a      	mov	r2, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	4413      	add	r3, r2
 800171c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800171e:	bf00      	nop
 8001720:	f7ff ffe0 	bl	80016e4 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	68fa      	ldr	r2, [r7, #12]
 800172c:	429a      	cmp	r2, r3
 800172e:	d8f7      	bhi.n	8001720 <HAL_Delay+0x28>
  {
  }
}
 8001730:	bf00      	nop
 8001732:	3710      	adds	r7, #16
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	20000014 	.word	0x20000014

0800173c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800174c:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <__NVIC_SetPriorityGrouping+0x44>)
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001752:	68ba      	ldr	r2, [r7, #8]
 8001754:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001758:	4013      	ands	r3, r2
 800175a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001764:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001768:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800176c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800176e:	4a04      	ldr	r2, [pc, #16]	; (8001780 <__NVIC_SetPriorityGrouping+0x44>)
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	60d3      	str	r3, [r2, #12]
}
 8001774:	bf00      	nop
 8001776:	3714      	adds	r7, #20
 8001778:	46bd      	mov	sp, r7
 800177a:	bc80      	pop	{r7}
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	e000ed00 	.word	0xe000ed00

08001784 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001788:	4b04      	ldr	r3, [pc, #16]	; (800179c <__NVIC_GetPriorityGrouping+0x18>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	0a1b      	lsrs	r3, r3, #8
 800178e:	f003 0307 	and.w	r3, r3, #7
}
 8001792:	4618      	mov	r0, r3
 8001794:	46bd      	mov	sp, r7
 8001796:	bc80      	pop	{r7}
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	db0b      	blt.n	80017ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017b2:	79fb      	ldrb	r3, [r7, #7]
 80017b4:	f003 021f 	and.w	r2, r3, #31
 80017b8:	4906      	ldr	r1, [pc, #24]	; (80017d4 <__NVIC_EnableIRQ+0x34>)
 80017ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017be:	095b      	lsrs	r3, r3, #5
 80017c0:	2001      	movs	r0, #1
 80017c2:	fa00 f202 	lsl.w	r2, r0, r2
 80017c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr
 80017d4:	e000e100 	.word	0xe000e100

080017d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	6039      	str	r1, [r7, #0]
 80017e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	db0a      	blt.n	8001802 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	b2da      	uxtb	r2, r3
 80017f0:	490c      	ldr	r1, [pc, #48]	; (8001824 <__NVIC_SetPriority+0x4c>)
 80017f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f6:	0112      	lsls	r2, r2, #4
 80017f8:	b2d2      	uxtb	r2, r2
 80017fa:	440b      	add	r3, r1
 80017fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001800:	e00a      	b.n	8001818 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	b2da      	uxtb	r2, r3
 8001806:	4908      	ldr	r1, [pc, #32]	; (8001828 <__NVIC_SetPriority+0x50>)
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	f003 030f 	and.w	r3, r3, #15
 800180e:	3b04      	subs	r3, #4
 8001810:	0112      	lsls	r2, r2, #4
 8001812:	b2d2      	uxtb	r2, r2
 8001814:	440b      	add	r3, r1
 8001816:	761a      	strb	r2, [r3, #24]
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	bc80      	pop	{r7}
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	e000e100 	.word	0xe000e100
 8001828:	e000ed00 	.word	0xe000ed00

0800182c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800182c:	b480      	push	{r7}
 800182e:	b089      	sub	sp, #36	; 0x24
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	f1c3 0307 	rsb	r3, r3, #7
 8001846:	2b04      	cmp	r3, #4
 8001848:	bf28      	it	cs
 800184a:	2304      	movcs	r3, #4
 800184c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	3304      	adds	r3, #4
 8001852:	2b06      	cmp	r3, #6
 8001854:	d902      	bls.n	800185c <NVIC_EncodePriority+0x30>
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	3b03      	subs	r3, #3
 800185a:	e000      	b.n	800185e <NVIC_EncodePriority+0x32>
 800185c:	2300      	movs	r3, #0
 800185e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001860:	f04f 32ff 	mov.w	r2, #4294967295
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	43da      	mvns	r2, r3
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	401a      	ands	r2, r3
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001874:	f04f 31ff 	mov.w	r1, #4294967295
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	fa01 f303 	lsl.w	r3, r1, r3
 800187e:	43d9      	mvns	r1, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001884:	4313      	orrs	r3, r2
         );
}
 8001886:	4618      	mov	r0, r3
 8001888:	3724      	adds	r7, #36	; 0x24
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr

08001890 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	3b01      	subs	r3, #1
 800189c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018a0:	d301      	bcc.n	80018a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018a2:	2301      	movs	r3, #1
 80018a4:	e00f      	b.n	80018c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018a6:	4a0a      	ldr	r2, [pc, #40]	; (80018d0 <SysTick_Config+0x40>)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3b01      	subs	r3, #1
 80018ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ae:	210f      	movs	r1, #15
 80018b0:	f04f 30ff 	mov.w	r0, #4294967295
 80018b4:	f7ff ff90 	bl	80017d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018b8:	4b05      	ldr	r3, [pc, #20]	; (80018d0 <SysTick_Config+0x40>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018be:	4b04      	ldr	r3, [pc, #16]	; (80018d0 <SysTick_Config+0x40>)
 80018c0:	2207      	movs	r2, #7
 80018c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	e000e010 	.word	0xe000e010

080018d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f7ff ff2d 	bl	800173c <__NVIC_SetPriorityGrouping>
}
 80018e2:	bf00      	nop
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b086      	sub	sp, #24
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	4603      	mov	r3, r0
 80018f2:	60b9      	str	r1, [r7, #8]
 80018f4:	607a      	str	r2, [r7, #4]
 80018f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018fc:	f7ff ff42 	bl	8001784 <__NVIC_GetPriorityGrouping>
 8001900:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	68b9      	ldr	r1, [r7, #8]
 8001906:	6978      	ldr	r0, [r7, #20]
 8001908:	f7ff ff90 	bl	800182c <NVIC_EncodePriority>
 800190c:	4602      	mov	r2, r0
 800190e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001912:	4611      	mov	r1, r2
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff ff5f 	bl	80017d8 <__NVIC_SetPriority>
}
 800191a:	bf00      	nop
 800191c:	3718      	adds	r7, #24
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b082      	sub	sp, #8
 8001926:	af00      	add	r7, sp, #0
 8001928:	4603      	mov	r3, r0
 800192a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800192c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff ff35 	bl	80017a0 <__NVIC_EnableIRQ>
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b082      	sub	sp, #8
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7ff ffa2 	bl	8001890 <SysTick_Config>
 800194c:	4603      	mov	r3, r0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001960:	2300      	movs	r3, #0
 8001962:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800196a:	2b02      	cmp	r3, #2
 800196c:	d005      	beq.n	800197a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2204      	movs	r2, #4
 8001972:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	73fb      	strb	r3, [r7, #15]
 8001978:	e051      	b.n	8001a1e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f022 020e 	bic.w	r2, r2, #14
 8001988:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f022 0201 	bic.w	r2, r2, #1
 8001998:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a22      	ldr	r2, [pc, #136]	; (8001a28 <HAL_DMA_Abort_IT+0xd0>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d029      	beq.n	80019f8 <HAL_DMA_Abort_IT+0xa0>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a20      	ldr	r2, [pc, #128]	; (8001a2c <HAL_DMA_Abort_IT+0xd4>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d022      	beq.n	80019f4 <HAL_DMA_Abort_IT+0x9c>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a1f      	ldr	r2, [pc, #124]	; (8001a30 <HAL_DMA_Abort_IT+0xd8>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d01a      	beq.n	80019ee <HAL_DMA_Abort_IT+0x96>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a1d      	ldr	r2, [pc, #116]	; (8001a34 <HAL_DMA_Abort_IT+0xdc>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d012      	beq.n	80019e8 <HAL_DMA_Abort_IT+0x90>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a1c      	ldr	r2, [pc, #112]	; (8001a38 <HAL_DMA_Abort_IT+0xe0>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d00a      	beq.n	80019e2 <HAL_DMA_Abort_IT+0x8a>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a1a      	ldr	r2, [pc, #104]	; (8001a3c <HAL_DMA_Abort_IT+0xe4>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d102      	bne.n	80019dc <HAL_DMA_Abort_IT+0x84>
 80019d6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80019da:	e00e      	b.n	80019fa <HAL_DMA_Abort_IT+0xa2>
 80019dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019e0:	e00b      	b.n	80019fa <HAL_DMA_Abort_IT+0xa2>
 80019e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019e6:	e008      	b.n	80019fa <HAL_DMA_Abort_IT+0xa2>
 80019e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ec:	e005      	b.n	80019fa <HAL_DMA_Abort_IT+0xa2>
 80019ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019f2:	e002      	b.n	80019fa <HAL_DMA_Abort_IT+0xa2>
 80019f4:	2310      	movs	r3, #16
 80019f6:	e000      	b.n	80019fa <HAL_DMA_Abort_IT+0xa2>
 80019f8:	2301      	movs	r3, #1
 80019fa:	4a11      	ldr	r2, [pc, #68]	; (8001a40 <HAL_DMA_Abort_IT+0xe8>)
 80019fc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2201      	movs	r2, #1
 8001a02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	4798      	blx	r3
    } 
  }
  return status;
 8001a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3710      	adds	r7, #16
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40020008 	.word	0x40020008
 8001a2c:	4002001c 	.word	0x4002001c
 8001a30:	40020030 	.word	0x40020030
 8001a34:	40020044 	.word	0x40020044
 8001a38:	40020058 	.word	0x40020058
 8001a3c:	4002006c 	.word	0x4002006c
 8001a40:	40020000 	.word	0x40020000

08001a44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b08b      	sub	sp, #44	; 0x2c
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a52:	2300      	movs	r3, #0
 8001a54:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a56:	e127      	b.n	8001ca8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a58:	2201      	movs	r2, #1
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	69fa      	ldr	r2, [r7, #28]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	f040 8116 	bne.w	8001ca2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	2b12      	cmp	r3, #18
 8001a7c:	d034      	beq.n	8001ae8 <HAL_GPIO_Init+0xa4>
 8001a7e:	2b12      	cmp	r3, #18
 8001a80:	d80d      	bhi.n	8001a9e <HAL_GPIO_Init+0x5a>
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d02b      	beq.n	8001ade <HAL_GPIO_Init+0x9a>
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d804      	bhi.n	8001a94 <HAL_GPIO_Init+0x50>
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d031      	beq.n	8001af2 <HAL_GPIO_Init+0xae>
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d01c      	beq.n	8001acc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a92:	e048      	b.n	8001b26 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a94:	2b03      	cmp	r3, #3
 8001a96:	d043      	beq.n	8001b20 <HAL_GPIO_Init+0xdc>
 8001a98:	2b11      	cmp	r3, #17
 8001a9a:	d01b      	beq.n	8001ad4 <HAL_GPIO_Init+0x90>
          break;
 8001a9c:	e043      	b.n	8001b26 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a9e:	4a89      	ldr	r2, [pc, #548]	; (8001cc4 <HAL_GPIO_Init+0x280>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d026      	beq.n	8001af2 <HAL_GPIO_Init+0xae>
 8001aa4:	4a87      	ldr	r2, [pc, #540]	; (8001cc4 <HAL_GPIO_Init+0x280>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d806      	bhi.n	8001ab8 <HAL_GPIO_Init+0x74>
 8001aaa:	4a87      	ldr	r2, [pc, #540]	; (8001cc8 <HAL_GPIO_Init+0x284>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d020      	beq.n	8001af2 <HAL_GPIO_Init+0xae>
 8001ab0:	4a86      	ldr	r2, [pc, #536]	; (8001ccc <HAL_GPIO_Init+0x288>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d01d      	beq.n	8001af2 <HAL_GPIO_Init+0xae>
          break;
 8001ab6:	e036      	b.n	8001b26 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001ab8:	4a85      	ldr	r2, [pc, #532]	; (8001cd0 <HAL_GPIO_Init+0x28c>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d019      	beq.n	8001af2 <HAL_GPIO_Init+0xae>
 8001abe:	4a85      	ldr	r2, [pc, #532]	; (8001cd4 <HAL_GPIO_Init+0x290>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d016      	beq.n	8001af2 <HAL_GPIO_Init+0xae>
 8001ac4:	4a84      	ldr	r2, [pc, #528]	; (8001cd8 <HAL_GPIO_Init+0x294>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d013      	beq.n	8001af2 <HAL_GPIO_Init+0xae>
          break;
 8001aca:	e02c      	b.n	8001b26 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	623b      	str	r3, [r7, #32]
          break;
 8001ad2:	e028      	b.n	8001b26 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	3304      	adds	r3, #4
 8001ada:	623b      	str	r3, [r7, #32]
          break;
 8001adc:	e023      	b.n	8001b26 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	3308      	adds	r3, #8
 8001ae4:	623b      	str	r3, [r7, #32]
          break;
 8001ae6:	e01e      	b.n	8001b26 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	330c      	adds	r3, #12
 8001aee:	623b      	str	r3, [r7, #32]
          break;
 8001af0:	e019      	b.n	8001b26 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d102      	bne.n	8001b00 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001afa:	2304      	movs	r3, #4
 8001afc:	623b      	str	r3, [r7, #32]
          break;
 8001afe:	e012      	b.n	8001b26 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d105      	bne.n	8001b14 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b08:	2308      	movs	r3, #8
 8001b0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	69fa      	ldr	r2, [r7, #28]
 8001b10:	611a      	str	r2, [r3, #16]
          break;
 8001b12:	e008      	b.n	8001b26 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b14:	2308      	movs	r3, #8
 8001b16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	69fa      	ldr	r2, [r7, #28]
 8001b1c:	615a      	str	r2, [r3, #20]
          break;
 8001b1e:	e002      	b.n	8001b26 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b20:	2300      	movs	r3, #0
 8001b22:	623b      	str	r3, [r7, #32]
          break;
 8001b24:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	2bff      	cmp	r3, #255	; 0xff
 8001b2a:	d801      	bhi.n	8001b30 <HAL_GPIO_Init+0xec>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	e001      	b.n	8001b34 <HAL_GPIO_Init+0xf0>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	3304      	adds	r3, #4
 8001b34:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	2bff      	cmp	r3, #255	; 0xff
 8001b3a:	d802      	bhi.n	8001b42 <HAL_GPIO_Init+0xfe>
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	e002      	b.n	8001b48 <HAL_GPIO_Init+0x104>
 8001b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b44:	3b08      	subs	r3, #8
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	210f      	movs	r1, #15
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	fa01 f303 	lsl.w	r3, r1, r3
 8001b56:	43db      	mvns	r3, r3
 8001b58:	401a      	ands	r2, r3
 8001b5a:	6a39      	ldr	r1, [r7, #32]
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b62:	431a      	orrs	r2, r3
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f000 8096 	beq.w	8001ca2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b76:	4b59      	ldr	r3, [pc, #356]	; (8001cdc <HAL_GPIO_Init+0x298>)
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	4a58      	ldr	r2, [pc, #352]	; (8001cdc <HAL_GPIO_Init+0x298>)
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	6193      	str	r3, [r2, #24]
 8001b82:	4b56      	ldr	r3, [pc, #344]	; (8001cdc <HAL_GPIO_Init+0x298>)
 8001b84:	699b      	ldr	r3, [r3, #24]
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	60bb      	str	r3, [r7, #8]
 8001b8c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b8e:	4a54      	ldr	r2, [pc, #336]	; (8001ce0 <HAL_GPIO_Init+0x29c>)
 8001b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b92:	089b      	lsrs	r3, r3, #2
 8001b94:	3302      	adds	r3, #2
 8001b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b9a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9e:	f003 0303 	and.w	r3, r3, #3
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	220f      	movs	r2, #15
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	43db      	mvns	r3, r3
 8001bac:	68fa      	ldr	r2, [r7, #12]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a4b      	ldr	r2, [pc, #300]	; (8001ce4 <HAL_GPIO_Init+0x2a0>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d013      	beq.n	8001be2 <HAL_GPIO_Init+0x19e>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a4a      	ldr	r2, [pc, #296]	; (8001ce8 <HAL_GPIO_Init+0x2a4>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d00d      	beq.n	8001bde <HAL_GPIO_Init+0x19a>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a49      	ldr	r2, [pc, #292]	; (8001cec <HAL_GPIO_Init+0x2a8>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d007      	beq.n	8001bda <HAL_GPIO_Init+0x196>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a48      	ldr	r2, [pc, #288]	; (8001cf0 <HAL_GPIO_Init+0x2ac>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d101      	bne.n	8001bd6 <HAL_GPIO_Init+0x192>
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e006      	b.n	8001be4 <HAL_GPIO_Init+0x1a0>
 8001bd6:	2304      	movs	r3, #4
 8001bd8:	e004      	b.n	8001be4 <HAL_GPIO_Init+0x1a0>
 8001bda:	2302      	movs	r3, #2
 8001bdc:	e002      	b.n	8001be4 <HAL_GPIO_Init+0x1a0>
 8001bde:	2301      	movs	r3, #1
 8001be0:	e000      	b.n	8001be4 <HAL_GPIO_Init+0x1a0>
 8001be2:	2300      	movs	r3, #0
 8001be4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001be6:	f002 0203 	and.w	r2, r2, #3
 8001bea:	0092      	lsls	r2, r2, #2
 8001bec:	4093      	lsls	r3, r2
 8001bee:	68fa      	ldr	r2, [r7, #12]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bf4:	493a      	ldr	r1, [pc, #232]	; (8001ce0 <HAL_GPIO_Init+0x29c>)
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf8:	089b      	lsrs	r3, r3, #2
 8001bfa:	3302      	adds	r3, #2
 8001bfc:	68fa      	ldr	r2, [r7, #12]
 8001bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d006      	beq.n	8001c1c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c0e:	4b39      	ldr	r3, [pc, #228]	; (8001cf4 <HAL_GPIO_Init+0x2b0>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	4938      	ldr	r1, [pc, #224]	; (8001cf4 <HAL_GPIO_Init+0x2b0>)
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	600b      	str	r3, [r1, #0]
 8001c1a:	e006      	b.n	8001c2a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c1c:	4b35      	ldr	r3, [pc, #212]	; (8001cf4 <HAL_GPIO_Init+0x2b0>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	43db      	mvns	r3, r3
 8001c24:	4933      	ldr	r1, [pc, #204]	; (8001cf4 <HAL_GPIO_Init+0x2b0>)
 8001c26:	4013      	ands	r3, r2
 8001c28:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d006      	beq.n	8001c44 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c36:	4b2f      	ldr	r3, [pc, #188]	; (8001cf4 <HAL_GPIO_Init+0x2b0>)
 8001c38:	685a      	ldr	r2, [r3, #4]
 8001c3a:	492e      	ldr	r1, [pc, #184]	; (8001cf4 <HAL_GPIO_Init+0x2b0>)
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	604b      	str	r3, [r1, #4]
 8001c42:	e006      	b.n	8001c52 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c44:	4b2b      	ldr	r3, [pc, #172]	; (8001cf4 <HAL_GPIO_Init+0x2b0>)
 8001c46:	685a      	ldr	r2, [r3, #4]
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	4929      	ldr	r1, [pc, #164]	; (8001cf4 <HAL_GPIO_Init+0x2b0>)
 8001c4e:	4013      	ands	r3, r2
 8001c50:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d006      	beq.n	8001c6c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c5e:	4b25      	ldr	r3, [pc, #148]	; (8001cf4 <HAL_GPIO_Init+0x2b0>)
 8001c60:	689a      	ldr	r2, [r3, #8]
 8001c62:	4924      	ldr	r1, [pc, #144]	; (8001cf4 <HAL_GPIO_Init+0x2b0>)
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	608b      	str	r3, [r1, #8]
 8001c6a:	e006      	b.n	8001c7a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c6c:	4b21      	ldr	r3, [pc, #132]	; (8001cf4 <HAL_GPIO_Init+0x2b0>)
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	43db      	mvns	r3, r3
 8001c74:	491f      	ldr	r1, [pc, #124]	; (8001cf4 <HAL_GPIO_Init+0x2b0>)
 8001c76:	4013      	ands	r3, r2
 8001c78:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d006      	beq.n	8001c94 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c86:	4b1b      	ldr	r3, [pc, #108]	; (8001cf4 <HAL_GPIO_Init+0x2b0>)
 8001c88:	68da      	ldr	r2, [r3, #12]
 8001c8a:	491a      	ldr	r1, [pc, #104]	; (8001cf4 <HAL_GPIO_Init+0x2b0>)
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	60cb      	str	r3, [r1, #12]
 8001c92:	e006      	b.n	8001ca2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c94:	4b17      	ldr	r3, [pc, #92]	; (8001cf4 <HAL_GPIO_Init+0x2b0>)
 8001c96:	68da      	ldr	r2, [r3, #12]
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	4915      	ldr	r1, [pc, #84]	; (8001cf4 <HAL_GPIO_Init+0x2b0>)
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cae:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f47f aed0 	bne.w	8001a58 <HAL_GPIO_Init+0x14>
  }
}
 8001cb8:	bf00      	nop
 8001cba:	372c      	adds	r7, #44	; 0x2c
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc80      	pop	{r7}
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	10210000 	.word	0x10210000
 8001cc8:	10110000 	.word	0x10110000
 8001ccc:	10120000 	.word	0x10120000
 8001cd0:	10310000 	.word	0x10310000
 8001cd4:	10320000 	.word	0x10320000
 8001cd8:	10220000 	.word	0x10220000
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	40010000 	.word	0x40010000
 8001ce4:	40010800 	.word	0x40010800
 8001ce8:	40010c00 	.word	0x40010c00
 8001cec:	40011000 	.word	0x40011000
 8001cf0:	40011400 	.word	0x40011400
 8001cf4:	40010400 	.word	0x40010400

08001cf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	460b      	mov	r3, r1
 8001d02:	807b      	strh	r3, [r7, #2]
 8001d04:	4613      	mov	r3, r2
 8001d06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d08:	787b      	ldrb	r3, [r7, #1]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d0e:	887a      	ldrh	r2, [r7, #2]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d14:	e003      	b.n	8001d1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d16:	887b      	ldrh	r3, [r7, #2]
 8001d18:	041a      	lsls	r2, r3, #16
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	611a      	str	r2, [r3, #16]
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr

08001d28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e10f      	b.n	8001f5a <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d106      	bne.n	8001d54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7ff f81c 	bl	8000d8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2224      	movs	r2, #36	; 0x24
 8001d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f022 0201 	bic.w	r2, r2, #1
 8001d6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d6c:	f001 fc92 	bl	8003694 <HAL_RCC_GetPCLK1Freq>
 8001d70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	4a7b      	ldr	r2, [pc, #492]	; (8001f64 <HAL_I2C_Init+0x23c>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d807      	bhi.n	8001d8c <HAL_I2C_Init+0x64>
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	4a7a      	ldr	r2, [pc, #488]	; (8001f68 <HAL_I2C_Init+0x240>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	bf94      	ite	ls
 8001d84:	2301      	movls	r3, #1
 8001d86:	2300      	movhi	r3, #0
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	e006      	b.n	8001d9a <HAL_I2C_Init+0x72>
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	4a77      	ldr	r2, [pc, #476]	; (8001f6c <HAL_I2C_Init+0x244>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	bf94      	ite	ls
 8001d94:	2301      	movls	r3, #1
 8001d96:	2300      	movhi	r3, #0
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e0db      	b.n	8001f5a <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	4a72      	ldr	r2, [pc, #456]	; (8001f70 <HAL_I2C_Init+0x248>)
 8001da6:	fba2 2303 	umull	r2, r3, r2, r3
 8001daa:	0c9b      	lsrs	r3, r3, #18
 8001dac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68ba      	ldr	r2, [r7, #8]
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	6a1b      	ldr	r3, [r3, #32]
 8001dc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	4a64      	ldr	r2, [pc, #400]	; (8001f64 <HAL_I2C_Init+0x23c>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d802      	bhi.n	8001ddc <HAL_I2C_Init+0xb4>
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	e009      	b.n	8001df0 <HAL_I2C_Init+0xc8>
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001de2:	fb02 f303 	mul.w	r3, r2, r3
 8001de6:	4a63      	ldr	r2, [pc, #396]	; (8001f74 <HAL_I2C_Init+0x24c>)
 8001de8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dec:	099b      	lsrs	r3, r3, #6
 8001dee:	3301      	adds	r3, #1
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	6812      	ldr	r2, [r2, #0]
 8001df4:	430b      	orrs	r3, r1
 8001df6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e02:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	4956      	ldr	r1, [pc, #344]	; (8001f64 <HAL_I2C_Init+0x23c>)
 8001e0c:	428b      	cmp	r3, r1
 8001e0e:	d80d      	bhi.n	8001e2c <HAL_I2C_Init+0x104>
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	1e59      	subs	r1, r3, #1
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e1e:	3301      	adds	r3, #1
 8001e20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e24:	2b04      	cmp	r3, #4
 8001e26:	bf38      	it	cc
 8001e28:	2304      	movcc	r3, #4
 8001e2a:	e04f      	b.n	8001ecc <HAL_I2C_Init+0x1a4>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d111      	bne.n	8001e58 <HAL_I2C_Init+0x130>
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	1e58      	subs	r0, r3, #1
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6859      	ldr	r1, [r3, #4]
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	440b      	add	r3, r1
 8001e42:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e46:	3301      	adds	r3, #1
 8001e48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	bf0c      	ite	eq
 8001e50:	2301      	moveq	r3, #1
 8001e52:	2300      	movne	r3, #0
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	e012      	b.n	8001e7e <HAL_I2C_Init+0x156>
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	1e58      	subs	r0, r3, #1
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6859      	ldr	r1, [r3, #4]
 8001e60:	460b      	mov	r3, r1
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	440b      	add	r3, r1
 8001e66:	0099      	lsls	r1, r3, #2
 8001e68:	440b      	add	r3, r1
 8001e6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e6e:	3301      	adds	r3, #1
 8001e70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	bf0c      	ite	eq
 8001e78:	2301      	moveq	r3, #1
 8001e7a:	2300      	movne	r3, #0
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <HAL_I2C_Init+0x15e>
 8001e82:	2301      	movs	r3, #1
 8001e84:	e022      	b.n	8001ecc <HAL_I2C_Init+0x1a4>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d10e      	bne.n	8001eac <HAL_I2C_Init+0x184>
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	1e58      	subs	r0, r3, #1
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6859      	ldr	r1, [r3, #4]
 8001e96:	460b      	mov	r3, r1
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	440b      	add	r3, r1
 8001e9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ea6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001eaa:	e00f      	b.n	8001ecc <HAL_I2C_Init+0x1a4>
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	1e58      	subs	r0, r3, #1
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6859      	ldr	r1, [r3, #4]
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	440b      	add	r3, r1
 8001eba:	0099      	lsls	r1, r3, #2
 8001ebc:	440b      	add	r3, r1
 8001ebe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ec8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ecc:	6879      	ldr	r1, [r7, #4]
 8001ece:	6809      	ldr	r1, [r1, #0]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	69da      	ldr	r2, [r3, #28]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a1b      	ldr	r3, [r3, #32]
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	430a      	orrs	r2, r1
 8001eee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001efa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	6911      	ldr	r1, [r2, #16]
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	68d2      	ldr	r2, [r2, #12]
 8001f06:	4311      	orrs	r1, r2
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	6812      	ldr	r2, [r2, #0]
 8001f0c:	430b      	orrs	r3, r1
 8001f0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	695a      	ldr	r2, [r3, #20]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	431a      	orrs	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f042 0201 	orr.w	r2, r2, #1
 8001f3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2220      	movs	r2, #32
 8001f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	000186a0 	.word	0x000186a0
 8001f68:	001e847f 	.word	0x001e847f
 8001f6c:	003d08ff 	.word	0x003d08ff
 8001f70:	431bde83 	.word	0x431bde83
 8001f74:	10624dd3 	.word	0x10624dd3

08001f78 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b088      	sub	sp, #32
 8001f7c:	af02      	add	r7, sp, #8
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	607a      	str	r2, [r7, #4]
 8001f82:	461a      	mov	r2, r3
 8001f84:	460b      	mov	r3, r1
 8001f86:	817b      	strh	r3, [r7, #10]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f8c:	f7ff fbaa 	bl	80016e4 <HAL_GetTick>
 8001f90:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b20      	cmp	r3, #32
 8001f9c:	f040 80e0 	bne.w	8002160 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	9300      	str	r3, [sp, #0]
 8001fa4:	2319      	movs	r3, #25
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	4970      	ldr	r1, [pc, #448]	; (800216c <HAL_I2C_Master_Transmit+0x1f4>)
 8001faa:	68f8      	ldr	r0, [r7, #12]
 8001fac:	f000 fdc0 	bl	8002b30 <I2C_WaitOnFlagUntilTimeout>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	e0d3      	b.n	8002162 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d101      	bne.n	8001fc8 <HAL_I2C_Master_Transmit+0x50>
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	e0cc      	b.n	8002162 <HAL_I2C_Master_Transmit+0x1ea>
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d007      	beq.n	8001fee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f042 0201 	orr.w	r2, r2, #1
 8001fec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ffc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2221      	movs	r2, #33	; 0x21
 8002002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2210      	movs	r2, #16
 800200a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2200      	movs	r2, #0
 8002012:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	893a      	ldrh	r2, [r7, #8]
 800201e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002024:	b29a      	uxth	r2, r3
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	4a50      	ldr	r2, [pc, #320]	; (8002170 <HAL_I2C_Master_Transmit+0x1f8>)
 800202e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002030:	8979      	ldrh	r1, [r7, #10]
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	6a3a      	ldr	r2, [r7, #32]
 8002036:	68f8      	ldr	r0, [r7, #12]
 8002038:	f000 fbc4 	bl	80027c4 <I2C_MasterRequestWrite>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e08d      	b.n	8002162 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002046:	2300      	movs	r3, #0
 8002048:	613b      	str	r3, [r7, #16]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	695b      	ldr	r3, [r3, #20]
 8002050:	613b      	str	r3, [r7, #16]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	613b      	str	r3, [r7, #16]
 800205a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800205c:	e066      	b.n	800212c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	6a39      	ldr	r1, [r7, #32]
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f000 fe3a 	bl	8002cdc <I2C_WaitOnTXEFlagUntilTimeout>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d00d      	beq.n	800208a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	2b04      	cmp	r3, #4
 8002074:	d107      	bne.n	8002086 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002084:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e06b      	b.n	8002162 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208e:	781a      	ldrb	r2, [r3, #0]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209a:	1c5a      	adds	r2, r3, #1
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	3b01      	subs	r3, #1
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b2:	3b01      	subs	r3, #1
 80020b4:	b29a      	uxth	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	695b      	ldr	r3, [r3, #20]
 80020c0:	f003 0304 	and.w	r3, r3, #4
 80020c4:	2b04      	cmp	r3, #4
 80020c6:	d11b      	bne.n	8002100 <HAL_I2C_Master_Transmit+0x188>
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d017      	beq.n	8002100 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d4:	781a      	ldrb	r2, [r3, #0]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e0:	1c5a      	adds	r2, r3, #1
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	3b01      	subs	r3, #1
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f8:	3b01      	subs	r3, #1
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002100:	697a      	ldr	r2, [r7, #20]
 8002102:	6a39      	ldr	r1, [r7, #32]
 8002104:	68f8      	ldr	r0, [r7, #12]
 8002106:	f000 fe2a 	bl	8002d5e <I2C_WaitOnBTFFlagUntilTimeout>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d00d      	beq.n	800212c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002114:	2b04      	cmp	r3, #4
 8002116:	d107      	bne.n	8002128 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002126:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e01a      	b.n	8002162 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002130:	2b00      	cmp	r3, #0
 8002132:	d194      	bne.n	800205e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002142:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2220      	movs	r2, #32
 8002148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800215c:	2300      	movs	r3, #0
 800215e:	e000      	b.n	8002162 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002160:	2302      	movs	r3, #2
  }
}
 8002162:	4618      	mov	r0, r3
 8002164:	3718      	adds	r7, #24
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	00100002 	.word	0x00100002
 8002170:	ffff0000 	.word	0xffff0000

08002174 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b08c      	sub	sp, #48	; 0x30
 8002178:	af02      	add	r7, sp, #8
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	607a      	str	r2, [r7, #4]
 800217e:	461a      	mov	r2, r3
 8002180:	460b      	mov	r3, r1
 8002182:	817b      	strh	r3, [r7, #10]
 8002184:	4613      	mov	r3, r2
 8002186:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002188:	f7ff faac 	bl	80016e4 <HAL_GetTick>
 800218c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b20      	cmp	r3, #32
 8002198:	f040 8213 	bne.w	80025c2 <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800219c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	2319      	movs	r3, #25
 80021a2:	2201      	movs	r2, #1
 80021a4:	497e      	ldr	r1, [pc, #504]	; (80023a0 <HAL_I2C_Master_Receive+0x22c>)
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f000 fcc2 	bl	8002b30 <I2C_WaitOnFlagUntilTimeout>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80021b2:	2302      	movs	r3, #2
 80021b4:	e206      	b.n	80025c4 <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d101      	bne.n	80021c4 <HAL_I2C_Master_Receive+0x50>
 80021c0:	2302      	movs	r3, #2
 80021c2:	e1ff      	b.n	80025c4 <HAL_I2C_Master_Receive+0x450>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d007      	beq.n	80021ea <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f042 0201 	orr.w	r2, r2, #1
 80021e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2222      	movs	r2, #34	; 0x22
 80021fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2210      	movs	r2, #16
 8002206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	893a      	ldrh	r2, [r7, #8]
 800221a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002220:	b29a      	uxth	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	4a5e      	ldr	r2, [pc, #376]	; (80023a4 <HAL_I2C_Master_Receive+0x230>)
 800222a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800222c:	8979      	ldrh	r1, [r7, #10]
 800222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002230:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f000 fb3c 	bl	80028b0 <I2C_MasterRequestRead>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e1c0      	b.n	80025c4 <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002246:	2b00      	cmp	r3, #0
 8002248:	d113      	bne.n	8002272 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800224a:	2300      	movs	r3, #0
 800224c:	623b      	str	r3, [r7, #32]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	695b      	ldr	r3, [r3, #20]
 8002254:	623b      	str	r3, [r7, #32]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	623b      	str	r3, [r7, #32]
 800225e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	e194      	b.n	800259c <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002276:	2b01      	cmp	r3, #1
 8002278:	d11d      	bne.n	80022b6 <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002288:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800228a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800228c:	2300      	movs	r3, #0
 800228e:	61fb      	str	r3, [r7, #28]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	61fb      	str	r3, [r7, #28]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	61fb      	str	r3, [r7, #28]
 80022a0:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022b0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80022b2:	b662      	cpsie	i
 80022b4:	e172      	b.n	800259c <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d11d      	bne.n	80022fa <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022cc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80022ce:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022d0:	2300      	movs	r3, #0
 80022d2:	61bb      	str	r3, [r7, #24]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	61bb      	str	r3, [r7, #24]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	61bb      	str	r3, [r7, #24]
 80022e4:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80022f6:	b662      	cpsie	i
 80022f8:	e150      	b.n	800259c <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002308:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800230a:	2300      	movs	r3, #0
 800230c:	617b      	str	r3, [r7, #20]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	695b      	ldr	r3, [r3, #20]
 8002314:	617b      	str	r3, [r7, #20]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	617b      	str	r3, [r7, #20]
 800231e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002320:	e13c      	b.n	800259c <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002326:	2b03      	cmp	r3, #3
 8002328:	f200 80f5 	bhi.w	8002516 <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002330:	2b01      	cmp	r3, #1
 8002332:	d123      	bne.n	800237c <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002336:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002338:	68f8      	ldr	r0, [r7, #12]
 800233a:	f000 fd51 	bl	8002de0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e13d      	b.n	80025c4 <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	691a      	ldr	r2, [r3, #16]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002352:	b2d2      	uxtb	r2, r2
 8002354:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235a:	1c5a      	adds	r2, r3, #1
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002364:	3b01      	subs	r3, #1
 8002366:	b29a      	uxth	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002370:	b29b      	uxth	r3, r3
 8002372:	3b01      	subs	r3, #1
 8002374:	b29a      	uxth	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	855a      	strh	r2, [r3, #42]	; 0x2a
 800237a:	e10f      	b.n	800259c <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002380:	2b02      	cmp	r3, #2
 8002382:	d150      	bne.n	8002426 <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002386:	9300      	str	r3, [sp, #0]
 8002388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800238a:	2200      	movs	r2, #0
 800238c:	4906      	ldr	r1, [pc, #24]	; (80023a8 <HAL_I2C_Master_Receive+0x234>)
 800238e:	68f8      	ldr	r0, [r7, #12]
 8002390:	f000 fbce 	bl	8002b30 <I2C_WaitOnFlagUntilTimeout>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d008      	beq.n	80023ac <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e112      	b.n	80025c4 <HAL_I2C_Master_Receive+0x450>
 800239e:	bf00      	nop
 80023a0:	00100002 	.word	0x00100002
 80023a4:	ffff0000 	.word	0xffff0000
 80023a8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80023ac:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023bc:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	691a      	ldr	r2, [r3, #16]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c8:	b2d2      	uxtb	r2, r2
 80023ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d0:	1c5a      	adds	r2, r3, #1
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023da:	3b01      	subs	r3, #1
 80023dc:	b29a      	uxth	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	3b01      	subs	r3, #1
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80023f0:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	691a      	ldr	r2, [r3, #16]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fc:	b2d2      	uxtb	r2, r2
 80023fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002404:	1c5a      	adds	r2, r3, #1
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800240e:	3b01      	subs	r3, #1
 8002410:	b29a      	uxth	r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800241a:	b29b      	uxth	r3, r3
 800241c:	3b01      	subs	r3, #1
 800241e:	b29a      	uxth	r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002424:	e0ba      	b.n	800259c <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800242c:	2200      	movs	r2, #0
 800242e:	4967      	ldr	r1, [pc, #412]	; (80025cc <HAL_I2C_Master_Receive+0x458>)
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f000 fb7d 	bl	8002b30 <I2C_WaitOnFlagUntilTimeout>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e0c1      	b.n	80025c4 <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800244e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002450:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	691a      	ldr	r2, [r3, #16]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245c:	b2d2      	uxtb	r2, r2
 800245e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002464:	1c5a      	adds	r2, r3, #1
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800246e:	3b01      	subs	r3, #1
 8002470:	b29a      	uxth	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800247a:	b29b      	uxth	r3, r3
 800247c:	3b01      	subs	r3, #1
 800247e:	b29a      	uxth	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800248a:	2200      	movs	r2, #0
 800248c:	494f      	ldr	r1, [pc, #316]	; (80025cc <HAL_I2C_Master_Receive+0x458>)
 800248e:	68f8      	ldr	r0, [r7, #12]
 8002490:	f000 fb4e 	bl	8002b30 <I2C_WaitOnFlagUntilTimeout>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e092      	b.n	80025c4 <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ac:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	691a      	ldr	r2, [r3, #16]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b8:	b2d2      	uxtb	r2, r2
 80024ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c0:	1c5a      	adds	r2, r3, #1
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ca:	3b01      	subs	r3, #1
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	3b01      	subs	r3, #1
 80024da:	b29a      	uxth	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80024e0:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	691a      	ldr	r2, [r3, #16]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ec:	b2d2      	uxtb	r2, r2
 80024ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f4:	1c5a      	adds	r2, r3, #1
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024fe:	3b01      	subs	r3, #1
 8002500:	b29a      	uxth	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800250a:	b29b      	uxth	r3, r3
 800250c:	3b01      	subs	r3, #1
 800250e:	b29a      	uxth	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002514:	e042      	b.n	800259c <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002518:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f000 fc60 	bl	8002de0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e04c      	b.n	80025c4 <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	691a      	ldr	r2, [r3, #16]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002534:	b2d2      	uxtb	r2, r2
 8002536:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253c:	1c5a      	adds	r2, r3, #1
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002546:	3b01      	subs	r3, #1
 8002548:	b29a      	uxth	r2, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002552:	b29b      	uxth	r3, r3
 8002554:	3b01      	subs	r3, #1
 8002556:	b29a      	uxth	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	f003 0304 	and.w	r3, r3, #4
 8002566:	2b04      	cmp	r3, #4
 8002568:	d118      	bne.n	800259c <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	691a      	ldr	r2, [r3, #16]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002574:	b2d2      	uxtb	r2, r2
 8002576:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257c:	1c5a      	adds	r2, r3, #1
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002586:	3b01      	subs	r3, #1
 8002588:	b29a      	uxth	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002592:	b29b      	uxth	r3, r3
 8002594:	3b01      	subs	r3, #1
 8002596:	b29a      	uxth	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f47f aebe 	bne.w	8002322 <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2220      	movs	r2, #32
 80025aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025be:	2300      	movs	r3, #0
 80025c0:	e000      	b.n	80025c4 <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 80025c2:	2302      	movs	r3, #2
  }
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3728      	adds	r7, #40	; 0x28
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	00010004 	.word	0x00010004

080025d0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b088      	sub	sp, #32
 80025d4:	af02      	add	r7, sp, #8
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	4608      	mov	r0, r1
 80025da:	4611      	mov	r1, r2
 80025dc:	461a      	mov	r2, r3
 80025de:	4603      	mov	r3, r0
 80025e0:	817b      	strh	r3, [r7, #10]
 80025e2:	460b      	mov	r3, r1
 80025e4:	813b      	strh	r3, [r7, #8]
 80025e6:	4613      	mov	r3, r2
 80025e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025ea:	f7ff f87b 	bl	80016e4 <HAL_GetTick>
 80025ee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b20      	cmp	r3, #32
 80025fa:	f040 80d9 	bne.w	80027b0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	2319      	movs	r3, #25
 8002604:	2201      	movs	r2, #1
 8002606:	496d      	ldr	r1, [pc, #436]	; (80027bc <HAL_I2C_Mem_Write+0x1ec>)
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f000 fa91 	bl	8002b30 <I2C_WaitOnFlagUntilTimeout>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002614:	2302      	movs	r3, #2
 8002616:	e0cc      	b.n	80027b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800261e:	2b01      	cmp	r3, #1
 8002620:	d101      	bne.n	8002626 <HAL_I2C_Mem_Write+0x56>
 8002622:	2302      	movs	r3, #2
 8002624:	e0c5      	b.n	80027b2 <HAL_I2C_Mem_Write+0x1e2>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0301 	and.w	r3, r3, #1
 8002638:	2b01      	cmp	r3, #1
 800263a:	d007      	beq.n	800264c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f042 0201 	orr.w	r2, r2, #1
 800264a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800265a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2221      	movs	r2, #33	; 0x21
 8002660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2240      	movs	r2, #64	; 0x40
 8002668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6a3a      	ldr	r2, [r7, #32]
 8002676:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800267c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002682:	b29a      	uxth	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	4a4d      	ldr	r2, [pc, #308]	; (80027c0 <HAL_I2C_Mem_Write+0x1f0>)
 800268c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800268e:	88f8      	ldrh	r0, [r7, #6]
 8002690:	893a      	ldrh	r2, [r7, #8]
 8002692:	8979      	ldrh	r1, [r7, #10]
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	9301      	str	r3, [sp, #4]
 8002698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800269a:	9300      	str	r3, [sp, #0]
 800269c:	4603      	mov	r3, r0
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	f000 f9bc 	bl	8002a1c <I2C_RequestMemoryWrite>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d052      	beq.n	8002750 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e081      	b.n	80027b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f000 fb12 	bl	8002cdc <I2C_WaitOnTXEFlagUntilTimeout>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00d      	beq.n	80026da <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	d107      	bne.n	80026d6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e06b      	b.n	80027b2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026de:	781a      	ldrb	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ea:	1c5a      	adds	r2, r3, #1
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f4:	3b01      	subs	r3, #1
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002700:	b29b      	uxth	r3, r3
 8002702:	3b01      	subs	r3, #1
 8002704:	b29a      	uxth	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b04      	cmp	r3, #4
 8002716:	d11b      	bne.n	8002750 <HAL_I2C_Mem_Write+0x180>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800271c:	2b00      	cmp	r3, #0
 800271e:	d017      	beq.n	8002750 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002724:	781a      	ldrb	r2, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002730:	1c5a      	adds	r2, r3, #1
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800273a:	3b01      	subs	r3, #1
 800273c:	b29a      	uxth	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002746:	b29b      	uxth	r3, r3
 8002748:	3b01      	subs	r3, #1
 800274a:	b29a      	uxth	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1aa      	bne.n	80026ae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002758:	697a      	ldr	r2, [r7, #20]
 800275a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f000 fafe 	bl	8002d5e <I2C_WaitOnBTFFlagUntilTimeout>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00d      	beq.n	8002784 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276c:	2b04      	cmp	r3, #4
 800276e:	d107      	bne.n	8002780 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800277e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e016      	b.n	80027b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002792:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2220      	movs	r2, #32
 8002798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80027ac:	2300      	movs	r3, #0
 80027ae:	e000      	b.n	80027b2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80027b0:	2302      	movs	r3, #2
  }
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3718      	adds	r7, #24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	00100002 	.word	0x00100002
 80027c0:	ffff0000 	.word	0xffff0000

080027c4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b088      	sub	sp, #32
 80027c8:	af02      	add	r7, sp, #8
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	607a      	str	r2, [r7, #4]
 80027ce:	603b      	str	r3, [r7, #0]
 80027d0:	460b      	mov	r3, r1
 80027d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	2b08      	cmp	r3, #8
 80027de:	d006      	beq.n	80027ee <I2C_MasterRequestWrite+0x2a>
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d003      	beq.n	80027ee <I2C_MasterRequestWrite+0x2a>
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027ec:	d108      	bne.n	8002800 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	e00b      	b.n	8002818 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002804:	2b12      	cmp	r3, #18
 8002806:	d107      	bne.n	8002818 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002816:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	9300      	str	r3, [sp, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002824:	68f8      	ldr	r0, [r7, #12]
 8002826:	f000 f983 	bl	8002b30 <I2C_WaitOnFlagUntilTimeout>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e035      	b.n	80028a0 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800283c:	d108      	bne.n	8002850 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800283e:	897b      	ldrh	r3, [r7, #10]
 8002840:	b2db      	uxtb	r3, r3
 8002842:	461a      	mov	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800284c:	611a      	str	r2, [r3, #16]
 800284e:	e01b      	b.n	8002888 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002850:	897b      	ldrh	r3, [r7, #10]
 8002852:	11db      	asrs	r3, r3, #7
 8002854:	b2db      	uxtb	r3, r3
 8002856:	f003 0306 	and.w	r3, r3, #6
 800285a:	b2db      	uxtb	r3, r3
 800285c:	f063 030f 	orn	r3, r3, #15
 8002860:	b2da      	uxtb	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	490e      	ldr	r1, [pc, #56]	; (80028a8 <I2C_MasterRequestWrite+0xe4>)
 800286e:	68f8      	ldr	r0, [r7, #12]
 8002870:	f000 f9b5 	bl	8002bde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e010      	b.n	80028a0 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800287e:	897b      	ldrh	r3, [r7, #10]
 8002880:	b2da      	uxtb	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	4907      	ldr	r1, [pc, #28]	; (80028ac <I2C_MasterRequestWrite+0xe8>)
 800288e:	68f8      	ldr	r0, [r7, #12]
 8002890:	f000 f9a5 	bl	8002bde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e000      	b.n	80028a0 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3718      	adds	r7, #24
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	00010008 	.word	0x00010008
 80028ac:	00010002 	.word	0x00010002

080028b0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b088      	sub	sp, #32
 80028b4:	af02      	add	r7, sp, #8
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	607a      	str	r2, [r7, #4]
 80028ba:	603b      	str	r3, [r7, #0]
 80028bc:	460b      	mov	r3, r1
 80028be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80028d4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	2b08      	cmp	r3, #8
 80028da:	d006      	beq.n	80028ea <I2C_MasterRequestRead+0x3a>
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d003      	beq.n	80028ea <I2C_MasterRequestRead+0x3a>
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028e8:	d108      	bne.n	80028fc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028f8:	601a      	str	r2, [r3, #0]
 80028fa:	e00b      	b.n	8002914 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002900:	2b11      	cmp	r3, #17
 8002902:	d107      	bne.n	8002914 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002912:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	9300      	str	r3, [sp, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002920:	68f8      	ldr	r0, [r7, #12]
 8002922:	f000 f905 	bl	8002b30 <I2C_WaitOnFlagUntilTimeout>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e06d      	b.n	8002a0c <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002938:	d108      	bne.n	800294c <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800293a:	897b      	ldrh	r3, [r7, #10]
 800293c:	b2db      	uxtb	r3, r3
 800293e:	f043 0301 	orr.w	r3, r3, #1
 8002942:	b2da      	uxtb	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	611a      	str	r2, [r3, #16]
 800294a:	e053      	b.n	80029f4 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800294c:	897b      	ldrh	r3, [r7, #10]
 800294e:	11db      	asrs	r3, r3, #7
 8002950:	b2db      	uxtb	r3, r3
 8002952:	f003 0306 	and.w	r3, r3, #6
 8002956:	b2db      	uxtb	r3, r3
 8002958:	f063 030f 	orn	r3, r3, #15
 800295c:	b2da      	uxtb	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	492a      	ldr	r1, [pc, #168]	; (8002a14 <I2C_MasterRequestRead+0x164>)
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f000 f937 	bl	8002bde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e048      	b.n	8002a0c <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800297a:	897b      	ldrh	r3, [r7, #10]
 800297c:	b2da      	uxtb	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	4923      	ldr	r1, [pc, #140]	; (8002a18 <I2C_MasterRequestRead+0x168>)
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f000 f927 	bl	8002bde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e038      	b.n	8002a0c <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800299a:	2300      	movs	r3, #0
 800299c:	613b      	str	r3, [r7, #16]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	695b      	ldr	r3, [r3, #20]
 80029a4:	613b      	str	r3, [r7, #16]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	613b      	str	r3, [r7, #16]
 80029ae:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029be:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029cc:	68f8      	ldr	r0, [r7, #12]
 80029ce:	f000 f8af 	bl	8002b30 <I2C_WaitOnFlagUntilTimeout>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e017      	b.n	8002a0c <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80029dc:	897b      	ldrh	r3, [r7, #10]
 80029de:	11db      	asrs	r3, r3, #7
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	f003 0306 	and.w	r3, r3, #6
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	f063 030e 	orn	r3, r3, #14
 80029ec:	b2da      	uxtb	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	4907      	ldr	r1, [pc, #28]	; (8002a18 <I2C_MasterRequestRead+0x168>)
 80029fa:	68f8      	ldr	r0, [r7, #12]
 80029fc:	f000 f8ef 	bl	8002bde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e000      	b.n	8002a0c <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3718      	adds	r7, #24
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	00010008 	.word	0x00010008
 8002a18:	00010002 	.word	0x00010002

08002a1c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b088      	sub	sp, #32
 8002a20:	af02      	add	r7, sp, #8
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	4608      	mov	r0, r1
 8002a26:	4611      	mov	r1, r2
 8002a28:	461a      	mov	r2, r3
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	817b      	strh	r3, [r7, #10]
 8002a2e:	460b      	mov	r3, r1
 8002a30:	813b      	strh	r3, [r7, #8]
 8002a32:	4613      	mov	r3, r2
 8002a34:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a44:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a48:	9300      	str	r3, [sp, #0]
 8002a4a:	6a3b      	ldr	r3, [r7, #32]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a52:	68f8      	ldr	r0, [r7, #12]
 8002a54:	f000 f86c 	bl	8002b30 <I2C_WaitOnFlagUntilTimeout>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e05f      	b.n	8002b22 <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a62:	897b      	ldrh	r3, [r7, #10]
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	461a      	mov	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a70:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a74:	6a3a      	ldr	r2, [r7, #32]
 8002a76:	492d      	ldr	r1, [pc, #180]	; (8002b2c <I2C_RequestMemoryWrite+0x110>)
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f000 f8b0 	bl	8002bde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e04c      	b.n	8002b22 <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a88:	2300      	movs	r3, #0
 8002a8a:	617b      	str	r3, [r7, #20]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	617b      	str	r3, [r7, #20]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	617b      	str	r3, [r7, #20]
 8002a9c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aa0:	6a39      	ldr	r1, [r7, #32]
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f000 f91a 	bl	8002cdc <I2C_WaitOnTXEFlagUntilTimeout>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00d      	beq.n	8002aca <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	d107      	bne.n	8002ac6 <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ac4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e02b      	b.n	8002b22 <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002aca:	88fb      	ldrh	r3, [r7, #6]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d105      	bne.n	8002adc <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ad0:	893b      	ldrh	r3, [r7, #8]
 8002ad2:	b2da      	uxtb	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	611a      	str	r2, [r3, #16]
 8002ada:	e021      	b.n	8002b20 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002adc:	893b      	ldrh	r3, [r7, #8]
 8002ade:	0a1b      	lsrs	r3, r3, #8
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	b2da      	uxtb	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aec:	6a39      	ldr	r1, [r7, #32]
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f000 f8f4 	bl	8002cdc <I2C_WaitOnTXEFlagUntilTimeout>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00d      	beq.n	8002b16 <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d107      	bne.n	8002b12 <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b10:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e005      	b.n	8002b22 <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b16:	893b      	ldrh	r3, [r7, #8]
 8002b18:	b2da      	uxtb	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3718      	adds	r7, #24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	00010002 	.word	0x00010002

08002b30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	603b      	str	r3, [r7, #0]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b40:	e025      	b.n	8002b8e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b48:	d021      	beq.n	8002b8e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b4a:	f7fe fdcb 	bl	80016e4 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	683a      	ldr	r2, [r7, #0]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d302      	bcc.n	8002b60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d116      	bne.n	8002b8e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2220      	movs	r2, #32
 8002b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	f043 0220 	orr.w	r2, r3, #32
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e023      	b.n	8002bd6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	0c1b      	lsrs	r3, r3, #16
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d10d      	bne.n	8002bb4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	43da      	mvns	r2, r3
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	bf0c      	ite	eq
 8002baa:	2301      	moveq	r3, #1
 8002bac:	2300      	movne	r3, #0
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	e00c      	b.n	8002bce <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	43da      	mvns	r2, r3
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	bf0c      	ite	eq
 8002bc6:	2301      	moveq	r3, #1
 8002bc8:	2300      	movne	r3, #0
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	461a      	mov	r2, r3
 8002bce:	79fb      	ldrb	r3, [r7, #7]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d0b6      	beq.n	8002b42 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b084      	sub	sp, #16
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	60f8      	str	r0, [r7, #12]
 8002be6:	60b9      	str	r1, [r7, #8]
 8002be8:	607a      	str	r2, [r7, #4]
 8002bea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bec:	e051      	b.n	8002c92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	695b      	ldr	r3, [r3, #20]
 8002bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bfc:	d123      	bne.n	8002c46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c0c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c16:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2220      	movs	r2, #32
 8002c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	f043 0204 	orr.w	r2, r3, #4
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e046      	b.n	8002cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c4c:	d021      	beq.n	8002c92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c4e:	f7fe fd49 	bl	80016e4 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d302      	bcc.n	8002c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d116      	bne.n	8002c92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2220      	movs	r2, #32
 8002c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	f043 0220 	orr.w	r2, r3, #32
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e020      	b.n	8002cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	0c1b      	lsrs	r3, r3, #16
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d10c      	bne.n	8002cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	43da      	mvns	r2, r3
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	bf14      	ite	ne
 8002cae:	2301      	movne	r3, #1
 8002cb0:	2300      	moveq	r3, #0
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	e00b      	b.n	8002cce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	43da      	mvns	r2, r3
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	bf14      	ite	ne
 8002cc8:	2301      	movne	r3, #1
 8002cca:	2300      	moveq	r3, #0
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d18d      	bne.n	8002bee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3710      	adds	r7, #16
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ce8:	e02d      	b.n	8002d46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f000 f8ce 	bl	8002e8c <I2C_IsAcknowledgeFailed>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e02d      	b.n	8002d56 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d00:	d021      	beq.n	8002d46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d02:	f7fe fcef 	bl	80016e4 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	68ba      	ldr	r2, [r7, #8]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d302      	bcc.n	8002d18 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d116      	bne.n	8002d46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2220      	movs	r2, #32
 8002d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	f043 0220 	orr.w	r2, r3, #32
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e007      	b.n	8002d56 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	695b      	ldr	r3, [r3, #20]
 8002d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d50:	2b80      	cmp	r3, #128	; 0x80
 8002d52:	d1ca      	bne.n	8002cea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b084      	sub	sp, #16
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	60f8      	str	r0, [r7, #12]
 8002d66:	60b9      	str	r1, [r7, #8]
 8002d68:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d6a:	e02d      	b.n	8002dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f000 f88d 	bl	8002e8c <I2C_IsAcknowledgeFailed>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e02d      	b.n	8002dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d82:	d021      	beq.n	8002dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d84:	f7fe fcae 	bl	80016e4 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	68ba      	ldr	r2, [r7, #8]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d302      	bcc.n	8002d9a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d116      	bne.n	8002dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2220      	movs	r2, #32
 8002da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db4:	f043 0220 	orr.w	r2, r3, #32
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e007      	b.n	8002dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	f003 0304 	and.w	r3, r3, #4
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	d1ca      	bne.n	8002d6c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3710      	adds	r7, #16
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002dec:	e042      	b.n	8002e74 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	695b      	ldr	r3, [r3, #20]
 8002df4:	f003 0310 	and.w	r3, r3, #16
 8002df8:	2b10      	cmp	r3, #16
 8002dfa:	d119      	bne.n	8002e30 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f06f 0210 	mvn.w	r2, #16
 8002e04:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2220      	movs	r2, #32
 8002e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e029      	b.n	8002e84 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e30:	f7fe fc58 	bl	80016e4 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	68ba      	ldr	r2, [r7, #8]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d302      	bcc.n	8002e46 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d116      	bne.n	8002e74 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2220      	movs	r2, #32
 8002e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e60:	f043 0220 	orr.w	r2, r3, #32
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e007      	b.n	8002e84 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e7e:	2b40      	cmp	r3, #64	; 0x40
 8002e80:	d1b5      	bne.n	8002dee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3710      	adds	r7, #16
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ea2:	d11b      	bne.n	8002edc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002eac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec8:	f043 0204 	orr.w	r2, r3, #4
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e000      	b.n	8002ede <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bc80      	pop	{r7}
 8002ee6:	4770      	bx	lr

08002ee8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e26c      	b.n	80033d4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f000 8087 	beq.w	8003016 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f08:	4b92      	ldr	r3, [pc, #584]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f003 030c 	and.w	r3, r3, #12
 8002f10:	2b04      	cmp	r3, #4
 8002f12:	d00c      	beq.n	8002f2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f14:	4b8f      	ldr	r3, [pc, #572]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f003 030c 	and.w	r3, r3, #12
 8002f1c:	2b08      	cmp	r3, #8
 8002f1e:	d112      	bne.n	8002f46 <HAL_RCC_OscConfig+0x5e>
 8002f20:	4b8c      	ldr	r3, [pc, #560]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f2c:	d10b      	bne.n	8002f46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f2e:	4b89      	ldr	r3, [pc, #548]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d06c      	beq.n	8003014 <HAL_RCC_OscConfig+0x12c>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d168      	bne.n	8003014 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e246      	b.n	80033d4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f4e:	d106      	bne.n	8002f5e <HAL_RCC_OscConfig+0x76>
 8002f50:	4b80      	ldr	r3, [pc, #512]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a7f      	ldr	r2, [pc, #508]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 8002f56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f5a:	6013      	str	r3, [r2, #0]
 8002f5c:	e02e      	b.n	8002fbc <HAL_RCC_OscConfig+0xd4>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d10c      	bne.n	8002f80 <HAL_RCC_OscConfig+0x98>
 8002f66:	4b7b      	ldr	r3, [pc, #492]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a7a      	ldr	r2, [pc, #488]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 8002f6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f70:	6013      	str	r3, [r2, #0]
 8002f72:	4b78      	ldr	r3, [pc, #480]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a77      	ldr	r2, [pc, #476]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 8002f78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f7c:	6013      	str	r3, [r2, #0]
 8002f7e:	e01d      	b.n	8002fbc <HAL_RCC_OscConfig+0xd4>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f88:	d10c      	bne.n	8002fa4 <HAL_RCC_OscConfig+0xbc>
 8002f8a:	4b72      	ldr	r3, [pc, #456]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a71      	ldr	r2, [pc, #452]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 8002f90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f94:	6013      	str	r3, [r2, #0]
 8002f96:	4b6f      	ldr	r3, [pc, #444]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a6e      	ldr	r2, [pc, #440]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 8002f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fa0:	6013      	str	r3, [r2, #0]
 8002fa2:	e00b      	b.n	8002fbc <HAL_RCC_OscConfig+0xd4>
 8002fa4:	4b6b      	ldr	r3, [pc, #428]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a6a      	ldr	r2, [pc, #424]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 8002faa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fae:	6013      	str	r3, [r2, #0]
 8002fb0:	4b68      	ldr	r3, [pc, #416]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a67      	ldr	r2, [pc, #412]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 8002fb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d013      	beq.n	8002fec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc4:	f7fe fb8e 	bl	80016e4 <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fcc:	f7fe fb8a 	bl	80016e4 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b64      	cmp	r3, #100	; 0x64
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e1fa      	b.n	80033d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fde:	4b5d      	ldr	r3, [pc, #372]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d0f0      	beq.n	8002fcc <HAL_RCC_OscConfig+0xe4>
 8002fea:	e014      	b.n	8003016 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fec:	f7fe fb7a 	bl	80016e4 <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ff4:	f7fe fb76 	bl	80016e4 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b64      	cmp	r3, #100	; 0x64
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e1e6      	b.n	80033d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003006:	4b53      	ldr	r3, [pc, #332]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1f0      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x10c>
 8003012:	e000      	b.n	8003016 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003014:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d063      	beq.n	80030ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003022:	4b4c      	ldr	r3, [pc, #304]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f003 030c 	and.w	r3, r3, #12
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00b      	beq.n	8003046 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800302e:	4b49      	ldr	r3, [pc, #292]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f003 030c 	and.w	r3, r3, #12
 8003036:	2b08      	cmp	r3, #8
 8003038:	d11c      	bne.n	8003074 <HAL_RCC_OscConfig+0x18c>
 800303a:	4b46      	ldr	r3, [pc, #280]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d116      	bne.n	8003074 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003046:	4b43      	ldr	r3, [pc, #268]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d005      	beq.n	800305e <HAL_RCC_OscConfig+0x176>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d001      	beq.n	800305e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e1ba      	b.n	80033d4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800305e:	4b3d      	ldr	r3, [pc, #244]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	4939      	ldr	r1, [pc, #228]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 800306e:	4313      	orrs	r3, r2
 8003070:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003072:	e03a      	b.n	80030ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d020      	beq.n	80030be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800307c:	4b36      	ldr	r3, [pc, #216]	; (8003158 <HAL_RCC_OscConfig+0x270>)
 800307e:	2201      	movs	r2, #1
 8003080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003082:	f7fe fb2f 	bl	80016e4 <HAL_GetTick>
 8003086:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003088:	e008      	b.n	800309c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800308a:	f7fe fb2b 	bl	80016e4 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	2b02      	cmp	r3, #2
 8003096:	d901      	bls.n	800309c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e19b      	b.n	80033d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800309c:	4b2d      	ldr	r3, [pc, #180]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d0f0      	beq.n	800308a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030a8:	4b2a      	ldr	r3, [pc, #168]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	00db      	lsls	r3, r3, #3
 80030b6:	4927      	ldr	r1, [pc, #156]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	600b      	str	r3, [r1, #0]
 80030bc:	e015      	b.n	80030ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030be:	4b26      	ldr	r3, [pc, #152]	; (8003158 <HAL_RCC_OscConfig+0x270>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c4:	f7fe fb0e 	bl	80016e4 <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030cc:	f7fe fb0a 	bl	80016e4 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e17a      	b.n	80033d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030de:	4b1d      	ldr	r3, [pc, #116]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1f0      	bne.n	80030cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0308 	and.w	r3, r3, #8
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d03a      	beq.n	800316c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d019      	beq.n	8003132 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030fe:	4b17      	ldr	r3, [pc, #92]	; (800315c <HAL_RCC_OscConfig+0x274>)
 8003100:	2201      	movs	r2, #1
 8003102:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003104:	f7fe faee 	bl	80016e4 <HAL_GetTick>
 8003108:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800310a:	e008      	b.n	800311e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800310c:	f7fe faea 	bl	80016e4 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e15a      	b.n	80033d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800311e:	4b0d      	ldr	r3, [pc, #52]	; (8003154 <HAL_RCC_OscConfig+0x26c>)
 8003120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d0f0      	beq.n	800310c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800312a:	2001      	movs	r0, #1
 800312c:	f000 fada 	bl	80036e4 <RCC_Delay>
 8003130:	e01c      	b.n	800316c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003132:	4b0a      	ldr	r3, [pc, #40]	; (800315c <HAL_RCC_OscConfig+0x274>)
 8003134:	2200      	movs	r2, #0
 8003136:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003138:	f7fe fad4 	bl	80016e4 <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800313e:	e00f      	b.n	8003160 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003140:	f7fe fad0 	bl	80016e4 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b02      	cmp	r3, #2
 800314c:	d908      	bls.n	8003160 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e140      	b.n	80033d4 <HAL_RCC_OscConfig+0x4ec>
 8003152:	bf00      	nop
 8003154:	40021000 	.word	0x40021000
 8003158:	42420000 	.word	0x42420000
 800315c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003160:	4b9e      	ldr	r3, [pc, #632]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 8003162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d1e9      	bne.n	8003140 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0304 	and.w	r3, r3, #4
 8003174:	2b00      	cmp	r3, #0
 8003176:	f000 80a6 	beq.w	80032c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800317a:	2300      	movs	r3, #0
 800317c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800317e:	4b97      	ldr	r3, [pc, #604]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10d      	bne.n	80031a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800318a:	4b94      	ldr	r3, [pc, #592]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	4a93      	ldr	r2, [pc, #588]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 8003190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003194:	61d3      	str	r3, [r2, #28]
 8003196:	4b91      	ldr	r3, [pc, #580]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800319e:	60bb      	str	r3, [r7, #8]
 80031a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031a2:	2301      	movs	r3, #1
 80031a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a6:	4b8e      	ldr	r3, [pc, #568]	; (80033e0 <HAL_RCC_OscConfig+0x4f8>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d118      	bne.n	80031e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031b2:	4b8b      	ldr	r3, [pc, #556]	; (80033e0 <HAL_RCC_OscConfig+0x4f8>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a8a      	ldr	r2, [pc, #552]	; (80033e0 <HAL_RCC_OscConfig+0x4f8>)
 80031b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031be:	f7fe fa91 	bl	80016e4 <HAL_GetTick>
 80031c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c4:	e008      	b.n	80031d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031c6:	f7fe fa8d 	bl	80016e4 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	2b64      	cmp	r3, #100	; 0x64
 80031d2:	d901      	bls.n	80031d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e0fd      	b.n	80033d4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d8:	4b81      	ldr	r3, [pc, #516]	; (80033e0 <HAL_RCC_OscConfig+0x4f8>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d0f0      	beq.n	80031c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d106      	bne.n	80031fa <HAL_RCC_OscConfig+0x312>
 80031ec:	4b7b      	ldr	r3, [pc, #492]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	4a7a      	ldr	r2, [pc, #488]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 80031f2:	f043 0301 	orr.w	r3, r3, #1
 80031f6:	6213      	str	r3, [r2, #32]
 80031f8:	e02d      	b.n	8003256 <HAL_RCC_OscConfig+0x36e>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10c      	bne.n	800321c <HAL_RCC_OscConfig+0x334>
 8003202:	4b76      	ldr	r3, [pc, #472]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 8003204:	6a1b      	ldr	r3, [r3, #32]
 8003206:	4a75      	ldr	r2, [pc, #468]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 8003208:	f023 0301 	bic.w	r3, r3, #1
 800320c:	6213      	str	r3, [r2, #32]
 800320e:	4b73      	ldr	r3, [pc, #460]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 8003210:	6a1b      	ldr	r3, [r3, #32]
 8003212:	4a72      	ldr	r2, [pc, #456]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 8003214:	f023 0304 	bic.w	r3, r3, #4
 8003218:	6213      	str	r3, [r2, #32]
 800321a:	e01c      	b.n	8003256 <HAL_RCC_OscConfig+0x36e>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	2b05      	cmp	r3, #5
 8003222:	d10c      	bne.n	800323e <HAL_RCC_OscConfig+0x356>
 8003224:	4b6d      	ldr	r3, [pc, #436]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 8003226:	6a1b      	ldr	r3, [r3, #32]
 8003228:	4a6c      	ldr	r2, [pc, #432]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 800322a:	f043 0304 	orr.w	r3, r3, #4
 800322e:	6213      	str	r3, [r2, #32]
 8003230:	4b6a      	ldr	r3, [pc, #424]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	4a69      	ldr	r2, [pc, #420]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 8003236:	f043 0301 	orr.w	r3, r3, #1
 800323a:	6213      	str	r3, [r2, #32]
 800323c:	e00b      	b.n	8003256 <HAL_RCC_OscConfig+0x36e>
 800323e:	4b67      	ldr	r3, [pc, #412]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	4a66      	ldr	r2, [pc, #408]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 8003244:	f023 0301 	bic.w	r3, r3, #1
 8003248:	6213      	str	r3, [r2, #32]
 800324a:	4b64      	ldr	r3, [pc, #400]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	4a63      	ldr	r2, [pc, #396]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 8003250:	f023 0304 	bic.w	r3, r3, #4
 8003254:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d015      	beq.n	800328a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800325e:	f7fe fa41 	bl	80016e4 <HAL_GetTick>
 8003262:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003264:	e00a      	b.n	800327c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003266:	f7fe fa3d 	bl	80016e4 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	f241 3288 	movw	r2, #5000	; 0x1388
 8003274:	4293      	cmp	r3, r2
 8003276:	d901      	bls.n	800327c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e0ab      	b.n	80033d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800327c:	4b57      	ldr	r3, [pc, #348]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 800327e:	6a1b      	ldr	r3, [r3, #32]
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d0ee      	beq.n	8003266 <HAL_RCC_OscConfig+0x37e>
 8003288:	e014      	b.n	80032b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800328a:	f7fe fa2b 	bl	80016e4 <HAL_GetTick>
 800328e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003290:	e00a      	b.n	80032a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003292:	f7fe fa27 	bl	80016e4 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d901      	bls.n	80032a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e095      	b.n	80033d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032a8:	4b4c      	ldr	r3, [pc, #304]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	f003 0302 	and.w	r3, r3, #2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1ee      	bne.n	8003292 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032b4:	7dfb      	ldrb	r3, [r7, #23]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d105      	bne.n	80032c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032ba:	4b48      	ldr	r3, [pc, #288]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	4a47      	ldr	r2, [pc, #284]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 80032c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	69db      	ldr	r3, [r3, #28]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f000 8081 	beq.w	80033d2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032d0:	4b42      	ldr	r3, [pc, #264]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f003 030c 	and.w	r3, r3, #12
 80032d8:	2b08      	cmp	r3, #8
 80032da:	d061      	beq.n	80033a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	69db      	ldr	r3, [r3, #28]
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d146      	bne.n	8003372 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032e4:	4b3f      	ldr	r3, [pc, #252]	; (80033e4 <HAL_RCC_OscConfig+0x4fc>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ea:	f7fe f9fb 	bl	80016e4 <HAL_GetTick>
 80032ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032f0:	e008      	b.n	8003304 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032f2:	f7fe f9f7 	bl	80016e4 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e067      	b.n	80033d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003304:	4b35      	ldr	r3, [pc, #212]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1f0      	bne.n	80032f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a1b      	ldr	r3, [r3, #32]
 8003314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003318:	d108      	bne.n	800332c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800331a:	4b30      	ldr	r3, [pc, #192]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	492d      	ldr	r1, [pc, #180]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 8003328:	4313      	orrs	r3, r2
 800332a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800332c:	4b2b      	ldr	r3, [pc, #172]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a19      	ldr	r1, [r3, #32]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333c:	430b      	orrs	r3, r1
 800333e:	4927      	ldr	r1, [pc, #156]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 8003340:	4313      	orrs	r3, r2
 8003342:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003344:	4b27      	ldr	r3, [pc, #156]	; (80033e4 <HAL_RCC_OscConfig+0x4fc>)
 8003346:	2201      	movs	r2, #1
 8003348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800334a:	f7fe f9cb 	bl	80016e4 <HAL_GetTick>
 800334e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003350:	e008      	b.n	8003364 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003352:	f7fe f9c7 	bl	80016e4 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b02      	cmp	r3, #2
 800335e:	d901      	bls.n	8003364 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e037      	b.n	80033d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003364:	4b1d      	ldr	r3, [pc, #116]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d0f0      	beq.n	8003352 <HAL_RCC_OscConfig+0x46a>
 8003370:	e02f      	b.n	80033d2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003372:	4b1c      	ldr	r3, [pc, #112]	; (80033e4 <HAL_RCC_OscConfig+0x4fc>)
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003378:	f7fe f9b4 	bl	80016e4 <HAL_GetTick>
 800337c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800337e:	e008      	b.n	8003392 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003380:	f7fe f9b0 	bl	80016e4 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b02      	cmp	r3, #2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e020      	b.n	80033d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003392:	4b12      	ldr	r3, [pc, #72]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1f0      	bne.n	8003380 <HAL_RCC_OscConfig+0x498>
 800339e:	e018      	b.n	80033d2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	69db      	ldr	r3, [r3, #28]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d101      	bne.n	80033ac <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e013      	b.n	80033d4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033ac:	4b0b      	ldr	r3, [pc, #44]	; (80033dc <HAL_RCC_OscConfig+0x4f4>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d106      	bne.n	80033ce <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d001      	beq.n	80033d2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e000      	b.n	80033d4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3718      	adds	r7, #24
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	40021000 	.word	0x40021000
 80033e0:	40007000 	.word	0x40007000
 80033e4:	42420060 	.word	0x42420060

080033e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d101      	bne.n	80033fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e0d0      	b.n	800359e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033fc:	4b6a      	ldr	r3, [pc, #424]	; (80035a8 <HAL_RCC_ClockConfig+0x1c0>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0307 	and.w	r3, r3, #7
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	429a      	cmp	r2, r3
 8003408:	d910      	bls.n	800342c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800340a:	4b67      	ldr	r3, [pc, #412]	; (80035a8 <HAL_RCC_ClockConfig+0x1c0>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f023 0207 	bic.w	r2, r3, #7
 8003412:	4965      	ldr	r1, [pc, #404]	; (80035a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	4313      	orrs	r3, r2
 8003418:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800341a:	4b63      	ldr	r3, [pc, #396]	; (80035a8 <HAL_RCC_ClockConfig+0x1c0>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0307 	and.w	r3, r3, #7
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	429a      	cmp	r2, r3
 8003426:	d001      	beq.n	800342c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e0b8      	b.n	800359e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d020      	beq.n	800347a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0304 	and.w	r3, r3, #4
 8003440:	2b00      	cmp	r3, #0
 8003442:	d005      	beq.n	8003450 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003444:	4b59      	ldr	r3, [pc, #356]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	4a58      	ldr	r2, [pc, #352]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 800344a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800344e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0308 	and.w	r3, r3, #8
 8003458:	2b00      	cmp	r3, #0
 800345a:	d005      	beq.n	8003468 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800345c:	4b53      	ldr	r3, [pc, #332]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	4a52      	ldr	r2, [pc, #328]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 8003462:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003466:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003468:	4b50      	ldr	r3, [pc, #320]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	494d      	ldr	r1, [pc, #308]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 8003476:	4313      	orrs	r3, r2
 8003478:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b00      	cmp	r3, #0
 8003484:	d040      	beq.n	8003508 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d107      	bne.n	800349e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800348e:	4b47      	ldr	r3, [pc, #284]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d115      	bne.n	80034c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e07f      	b.n	800359e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d107      	bne.n	80034b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034a6:	4b41      	ldr	r3, [pc, #260]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d109      	bne.n	80034c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e073      	b.n	800359e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034b6:	4b3d      	ldr	r3, [pc, #244]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e06b      	b.n	800359e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034c6:	4b39      	ldr	r3, [pc, #228]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f023 0203 	bic.w	r2, r3, #3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	4936      	ldr	r1, [pc, #216]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034d8:	f7fe f904 	bl	80016e4 <HAL_GetTick>
 80034dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034de:	e00a      	b.n	80034f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034e0:	f7fe f900 	bl	80016e4 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e053      	b.n	800359e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034f6:	4b2d      	ldr	r3, [pc, #180]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f003 020c 	and.w	r2, r3, #12
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	429a      	cmp	r2, r3
 8003506:	d1eb      	bne.n	80034e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003508:	4b27      	ldr	r3, [pc, #156]	; (80035a8 <HAL_RCC_ClockConfig+0x1c0>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0307 	and.w	r3, r3, #7
 8003510:	683a      	ldr	r2, [r7, #0]
 8003512:	429a      	cmp	r2, r3
 8003514:	d210      	bcs.n	8003538 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003516:	4b24      	ldr	r3, [pc, #144]	; (80035a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f023 0207 	bic.w	r2, r3, #7
 800351e:	4922      	ldr	r1, [pc, #136]	; (80035a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	4313      	orrs	r3, r2
 8003524:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003526:	4b20      	ldr	r3, [pc, #128]	; (80035a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0307 	and.w	r3, r3, #7
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	429a      	cmp	r2, r3
 8003532:	d001      	beq.n	8003538 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e032      	b.n	800359e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0304 	and.w	r3, r3, #4
 8003540:	2b00      	cmp	r3, #0
 8003542:	d008      	beq.n	8003556 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003544:	4b19      	ldr	r3, [pc, #100]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	4916      	ldr	r1, [pc, #88]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 8003552:	4313      	orrs	r3, r2
 8003554:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0308 	and.w	r3, r3, #8
 800355e:	2b00      	cmp	r3, #0
 8003560:	d009      	beq.n	8003576 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003562:	4b12      	ldr	r3, [pc, #72]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	490e      	ldr	r1, [pc, #56]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 8003572:	4313      	orrs	r3, r2
 8003574:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003576:	f000 f821 	bl	80035bc <HAL_RCC_GetSysClockFreq>
 800357a:	4601      	mov	r1, r0
 800357c:	4b0b      	ldr	r3, [pc, #44]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	091b      	lsrs	r3, r3, #4
 8003582:	f003 030f 	and.w	r3, r3, #15
 8003586:	4a0a      	ldr	r2, [pc, #40]	; (80035b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003588:	5cd3      	ldrb	r3, [r2, r3]
 800358a:	fa21 f303 	lsr.w	r3, r1, r3
 800358e:	4a09      	ldr	r2, [pc, #36]	; (80035b4 <HAL_RCC_ClockConfig+0x1cc>)
 8003590:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003592:	4b09      	ldr	r3, [pc, #36]	; (80035b8 <HAL_RCC_ClockConfig+0x1d0>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4618      	mov	r0, r3
 8003598:	f7fe f862 	bl	8001660 <HAL_InitTick>

  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	40022000 	.word	0x40022000
 80035ac:	40021000 	.word	0x40021000
 80035b0:	08004e84 	.word	0x08004e84
 80035b4:	2000000c 	.word	0x2000000c
 80035b8:	20000010 	.word	0x20000010

080035bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035bc:	b490      	push	{r4, r7}
 80035be:	b08a      	sub	sp, #40	; 0x28
 80035c0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80035c2:	4b2a      	ldr	r3, [pc, #168]	; (800366c <HAL_RCC_GetSysClockFreq+0xb0>)
 80035c4:	1d3c      	adds	r4, r7, #4
 80035c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80035cc:	4b28      	ldr	r3, [pc, #160]	; (8003670 <HAL_RCC_GetSysClockFreq+0xb4>)
 80035ce:	881b      	ldrh	r3, [r3, #0]
 80035d0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035d2:	2300      	movs	r3, #0
 80035d4:	61fb      	str	r3, [r7, #28]
 80035d6:	2300      	movs	r3, #0
 80035d8:	61bb      	str	r3, [r7, #24]
 80035da:	2300      	movs	r3, #0
 80035dc:	627b      	str	r3, [r7, #36]	; 0x24
 80035de:	2300      	movs	r3, #0
 80035e0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80035e2:	2300      	movs	r3, #0
 80035e4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80035e6:	4b23      	ldr	r3, [pc, #140]	; (8003674 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	f003 030c 	and.w	r3, r3, #12
 80035f2:	2b04      	cmp	r3, #4
 80035f4:	d002      	beq.n	80035fc <HAL_RCC_GetSysClockFreq+0x40>
 80035f6:	2b08      	cmp	r3, #8
 80035f8:	d003      	beq.n	8003602 <HAL_RCC_GetSysClockFreq+0x46>
 80035fa:	e02d      	b.n	8003658 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035fc:	4b1e      	ldr	r3, [pc, #120]	; (8003678 <HAL_RCC_GetSysClockFreq+0xbc>)
 80035fe:	623b      	str	r3, [r7, #32]
      break;
 8003600:	e02d      	b.n	800365e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	0c9b      	lsrs	r3, r3, #18
 8003606:	f003 030f 	and.w	r3, r3, #15
 800360a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800360e:	4413      	add	r3, r2
 8003610:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003614:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d013      	beq.n	8003648 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003620:	4b14      	ldr	r3, [pc, #80]	; (8003674 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	0c5b      	lsrs	r3, r3, #17
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800362e:	4413      	add	r3, r2
 8003630:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003634:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	4a0f      	ldr	r2, [pc, #60]	; (8003678 <HAL_RCC_GetSysClockFreq+0xbc>)
 800363a:	fb02 f203 	mul.w	r2, r2, r3
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	fbb2 f3f3 	udiv	r3, r2, r3
 8003644:	627b      	str	r3, [r7, #36]	; 0x24
 8003646:	e004      	b.n	8003652 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	4a0c      	ldr	r2, [pc, #48]	; (800367c <HAL_RCC_GetSysClockFreq+0xc0>)
 800364c:	fb02 f303 	mul.w	r3, r2, r3
 8003650:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003654:	623b      	str	r3, [r7, #32]
      break;
 8003656:	e002      	b.n	800365e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003658:	4b07      	ldr	r3, [pc, #28]	; (8003678 <HAL_RCC_GetSysClockFreq+0xbc>)
 800365a:	623b      	str	r3, [r7, #32]
      break;
 800365c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800365e:	6a3b      	ldr	r3, [r7, #32]
}
 8003660:	4618      	mov	r0, r3
 8003662:	3728      	adds	r7, #40	; 0x28
 8003664:	46bd      	mov	sp, r7
 8003666:	bc90      	pop	{r4, r7}
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	080048d8 	.word	0x080048d8
 8003670:	080048e8 	.word	0x080048e8
 8003674:	40021000 	.word	0x40021000
 8003678:	007a1200 	.word	0x007a1200
 800367c:	003d0900 	.word	0x003d0900

08003680 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003684:	4b02      	ldr	r3, [pc, #8]	; (8003690 <HAL_RCC_GetHCLKFreq+0x10>)
 8003686:	681b      	ldr	r3, [r3, #0]
}
 8003688:	4618      	mov	r0, r3
 800368a:	46bd      	mov	sp, r7
 800368c:	bc80      	pop	{r7}
 800368e:	4770      	bx	lr
 8003690:	2000000c 	.word	0x2000000c

08003694 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003698:	f7ff fff2 	bl	8003680 <HAL_RCC_GetHCLKFreq>
 800369c:	4601      	mov	r1, r0
 800369e:	4b05      	ldr	r3, [pc, #20]	; (80036b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	0a1b      	lsrs	r3, r3, #8
 80036a4:	f003 0307 	and.w	r3, r3, #7
 80036a8:	4a03      	ldr	r2, [pc, #12]	; (80036b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036aa:	5cd3      	ldrb	r3, [r2, r3]
 80036ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	40021000 	.word	0x40021000
 80036b8:	08004e94 	.word	0x08004e94

080036bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80036c0:	f7ff ffde 	bl	8003680 <HAL_RCC_GetHCLKFreq>
 80036c4:	4601      	mov	r1, r0
 80036c6:	4b05      	ldr	r3, [pc, #20]	; (80036dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	0adb      	lsrs	r3, r3, #11
 80036cc:	f003 0307 	and.w	r3, r3, #7
 80036d0:	4a03      	ldr	r2, [pc, #12]	; (80036e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036d2:	5cd3      	ldrb	r3, [r2, r3]
 80036d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80036d8:	4618      	mov	r0, r3
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	40021000 	.word	0x40021000
 80036e0:	08004e94 	.word	0x08004e94

080036e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b085      	sub	sp, #20
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80036ec:	4b0a      	ldr	r3, [pc, #40]	; (8003718 <RCC_Delay+0x34>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a0a      	ldr	r2, [pc, #40]	; (800371c <RCC_Delay+0x38>)
 80036f2:	fba2 2303 	umull	r2, r3, r2, r3
 80036f6:	0a5b      	lsrs	r3, r3, #9
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	fb02 f303 	mul.w	r3, r2, r3
 80036fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003700:	bf00      	nop
  }
  while (Delay --);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	1e5a      	subs	r2, r3, #1
 8003706:	60fa      	str	r2, [r7, #12]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d1f9      	bne.n	8003700 <RCC_Delay+0x1c>
}
 800370c:	bf00      	nop
 800370e:	3714      	adds	r7, #20
 8003710:	46bd      	mov	sp, r7
 8003712:	bc80      	pop	{r7}
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	2000000c 	.word	0x2000000c
 800371c:	10624dd3 	.word	0x10624dd3

08003720 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e01d      	b.n	800376e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003738:	b2db      	uxtb	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d106      	bne.n	800374c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f7fd fb5e 	bl	8000e08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2202      	movs	r2, #2
 8003750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	3304      	adds	r3, #4
 800375c:	4619      	mov	r1, r3
 800375e:	4610      	mov	r0, r2
 8003760:	f000 fa18 	bl	8003b94 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003776:	b480      	push	{r7}
 8003778:	b085      	sub	sp, #20
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68da      	ldr	r2, [r3, #12]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f042 0201 	orr.w	r2, r2, #1
 800378c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2b06      	cmp	r3, #6
 800379e:	d007      	beq.n	80037b0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f042 0201 	orr.w	r2, r2, #1
 80037ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3714      	adds	r7, #20
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bc80      	pop	{r7}
 80037ba:	4770      	bx	lr

080037bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d122      	bne.n	8003818 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d11b      	bne.n	8003818 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f06f 0202 	mvn.w	r2, #2
 80037e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	f003 0303 	and.w	r3, r3, #3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f9ad 	bl	8003b5e <HAL_TIM_IC_CaptureCallback>
 8003804:	e005      	b.n	8003812 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f9a0 	bl	8003b4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 f9af 	bl	8003b70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	f003 0304 	and.w	r3, r3, #4
 8003822:	2b04      	cmp	r3, #4
 8003824:	d122      	bne.n	800386c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	2b04      	cmp	r3, #4
 8003832:	d11b      	bne.n	800386c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f06f 0204 	mvn.w	r2, #4
 800383c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2202      	movs	r2, #2
 8003842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f983 	bl	8003b5e <HAL_TIM_IC_CaptureCallback>
 8003858:	e005      	b.n	8003866 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f976 	bl	8003b4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 f985 	bl	8003b70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	f003 0308 	and.w	r3, r3, #8
 8003876:	2b08      	cmp	r3, #8
 8003878:	d122      	bne.n	80038c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	f003 0308 	and.w	r3, r3, #8
 8003884:	2b08      	cmp	r3, #8
 8003886:	d11b      	bne.n	80038c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f06f 0208 	mvn.w	r2, #8
 8003890:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2204      	movs	r2, #4
 8003896:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	69db      	ldr	r3, [r3, #28]
 800389e:	f003 0303 	and.w	r3, r3, #3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d003      	beq.n	80038ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f959 	bl	8003b5e <HAL_TIM_IC_CaptureCallback>
 80038ac:	e005      	b.n	80038ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f94c 	bl	8003b4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 f95b 	bl	8003b70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	f003 0310 	and.w	r3, r3, #16
 80038ca:	2b10      	cmp	r3, #16
 80038cc:	d122      	bne.n	8003914 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	f003 0310 	and.w	r3, r3, #16
 80038d8:	2b10      	cmp	r3, #16
 80038da:	d11b      	bne.n	8003914 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f06f 0210 	mvn.w	r2, #16
 80038e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2208      	movs	r2, #8
 80038ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	69db      	ldr	r3, [r3, #28]
 80038f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d003      	beq.n	8003902 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 f92f 	bl	8003b5e <HAL_TIM_IC_CaptureCallback>
 8003900:	e005      	b.n	800390e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 f922 	bl	8003b4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 f931 	bl	8003b70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b01      	cmp	r3, #1
 8003920:	d10e      	bne.n	8003940 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	f003 0301 	and.w	r3, r3, #1
 800392c:	2b01      	cmp	r3, #1
 800392e:	d107      	bne.n	8003940 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f06f 0201 	mvn.w	r2, #1
 8003938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 f8fd 	bl	8003b3a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800394a:	2b80      	cmp	r3, #128	; 0x80
 800394c:	d10e      	bne.n	800396c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003958:	2b80      	cmp	r3, #128	; 0x80
 800395a:	d107      	bne.n	800396c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 fa59 	bl	8003e1e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003976:	2b40      	cmp	r3, #64	; 0x40
 8003978:	d10e      	bne.n	8003998 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003984:	2b40      	cmp	r3, #64	; 0x40
 8003986:	d107      	bne.n	8003998 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f8f5 	bl	8003b82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	f003 0320 	and.w	r3, r3, #32
 80039a2:	2b20      	cmp	r3, #32
 80039a4:	d10e      	bne.n	80039c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	f003 0320 	and.w	r3, r3, #32
 80039b0:	2b20      	cmp	r3, #32
 80039b2:	d107      	bne.n	80039c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f06f 0220 	mvn.w	r2, #32
 80039bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 fa24 	bl	8003e0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039c4:	bf00      	nop
 80039c6:	3708      	adds	r7, #8
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d101      	bne.n	80039e4 <HAL_TIM_ConfigClockSource+0x18>
 80039e0:	2302      	movs	r3, #2
 80039e2:	e0a6      	b.n	8003b32 <HAL_TIM_ConfigClockSource+0x166>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2202      	movs	r2, #2
 80039f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a02:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a0a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2b40      	cmp	r3, #64	; 0x40
 8003a1a:	d067      	beq.n	8003aec <HAL_TIM_ConfigClockSource+0x120>
 8003a1c:	2b40      	cmp	r3, #64	; 0x40
 8003a1e:	d80b      	bhi.n	8003a38 <HAL_TIM_ConfigClockSource+0x6c>
 8003a20:	2b10      	cmp	r3, #16
 8003a22:	d073      	beq.n	8003b0c <HAL_TIM_ConfigClockSource+0x140>
 8003a24:	2b10      	cmp	r3, #16
 8003a26:	d802      	bhi.n	8003a2e <HAL_TIM_ConfigClockSource+0x62>
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d06f      	beq.n	8003b0c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003a2c:	e078      	b.n	8003b20 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003a2e:	2b20      	cmp	r3, #32
 8003a30:	d06c      	beq.n	8003b0c <HAL_TIM_ConfigClockSource+0x140>
 8003a32:	2b30      	cmp	r3, #48	; 0x30
 8003a34:	d06a      	beq.n	8003b0c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003a36:	e073      	b.n	8003b20 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003a38:	2b70      	cmp	r3, #112	; 0x70
 8003a3a:	d00d      	beq.n	8003a58 <HAL_TIM_ConfigClockSource+0x8c>
 8003a3c:	2b70      	cmp	r3, #112	; 0x70
 8003a3e:	d804      	bhi.n	8003a4a <HAL_TIM_ConfigClockSource+0x7e>
 8003a40:	2b50      	cmp	r3, #80	; 0x50
 8003a42:	d033      	beq.n	8003aac <HAL_TIM_ConfigClockSource+0xe0>
 8003a44:	2b60      	cmp	r3, #96	; 0x60
 8003a46:	d041      	beq.n	8003acc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003a48:	e06a      	b.n	8003b20 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a4e:	d066      	beq.n	8003b1e <HAL_TIM_ConfigClockSource+0x152>
 8003a50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a54:	d017      	beq.n	8003a86 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003a56:	e063      	b.n	8003b20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6818      	ldr	r0, [r3, #0]
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	6899      	ldr	r1, [r3, #8]
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	f000 f96d 	bl	8003d46 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a7a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	609a      	str	r2, [r3, #8]
      break;
 8003a84:	e04c      	b.n	8003b20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6818      	ldr	r0, [r3, #0]
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	6899      	ldr	r1, [r3, #8]
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685a      	ldr	r2, [r3, #4]
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	f000 f956 	bl	8003d46 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	689a      	ldr	r2, [r3, #8]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003aa8:	609a      	str	r2, [r3, #8]
      break;
 8003aaa:	e039      	b.n	8003b20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6818      	ldr	r0, [r3, #0]
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	6859      	ldr	r1, [r3, #4]
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	461a      	mov	r2, r3
 8003aba:	f000 f8cd 	bl	8003c58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2150      	movs	r1, #80	; 0x50
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f000 f924 	bl	8003d12 <TIM_ITRx_SetConfig>
      break;
 8003aca:	e029      	b.n	8003b20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6818      	ldr	r0, [r3, #0]
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	6859      	ldr	r1, [r3, #4]
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	461a      	mov	r2, r3
 8003ada:	f000 f8eb 	bl	8003cb4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2160      	movs	r1, #96	; 0x60
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f000 f914 	bl	8003d12 <TIM_ITRx_SetConfig>
      break;
 8003aea:	e019      	b.n	8003b20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6818      	ldr	r0, [r3, #0]
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	6859      	ldr	r1, [r3, #4]
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	461a      	mov	r2, r3
 8003afa:	f000 f8ad 	bl	8003c58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2140      	movs	r1, #64	; 0x40
 8003b04:	4618      	mov	r0, r3
 8003b06:	f000 f904 	bl	8003d12 <TIM_ITRx_SetConfig>
      break;
 8003b0a:	e009      	b.n	8003b20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4619      	mov	r1, r3
 8003b16:	4610      	mov	r0, r2
 8003b18:	f000 f8fb 	bl	8003d12 <TIM_ITRx_SetConfig>
      break;
 8003b1c:	e000      	b.n	8003b20 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003b1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3710      	adds	r7, #16
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	b083      	sub	sp, #12
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003b42:	bf00      	nop
 8003b44:	370c      	adds	r7, #12
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bc80      	pop	{r7}
 8003b4a:	4770      	bx	lr

08003b4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b54:	bf00      	nop
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bc80      	pop	{r7}
 8003b5c:	4770      	bx	lr

08003b5e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b083      	sub	sp, #12
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b66:	bf00      	nop
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bc80      	pop	{r7}
 8003b6e:	4770      	bx	lr

08003b70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bc80      	pop	{r7}
 8003b80:	4770      	bx	lr

08003b82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b083      	sub	sp, #12
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b8a:	bf00      	nop
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bc80      	pop	{r7}
 8003b92:	4770      	bx	lr

08003b94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a29      	ldr	r2, [pc, #164]	; (8003c4c <TIM_Base_SetConfig+0xb8>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d00b      	beq.n	8003bc4 <TIM_Base_SetConfig+0x30>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bb2:	d007      	beq.n	8003bc4 <TIM_Base_SetConfig+0x30>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a26      	ldr	r2, [pc, #152]	; (8003c50 <TIM_Base_SetConfig+0xbc>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d003      	beq.n	8003bc4 <TIM_Base_SetConfig+0x30>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a25      	ldr	r2, [pc, #148]	; (8003c54 <TIM_Base_SetConfig+0xc0>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d108      	bne.n	8003bd6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a1c      	ldr	r2, [pc, #112]	; (8003c4c <TIM_Base_SetConfig+0xb8>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d00b      	beq.n	8003bf6 <TIM_Base_SetConfig+0x62>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003be4:	d007      	beq.n	8003bf6 <TIM_Base_SetConfig+0x62>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a19      	ldr	r2, [pc, #100]	; (8003c50 <TIM_Base_SetConfig+0xbc>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d003      	beq.n	8003bf6 <TIM_Base_SetConfig+0x62>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a18      	ldr	r2, [pc, #96]	; (8003c54 <TIM_Base_SetConfig+0xc0>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d108      	bne.n	8003c08 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	689a      	ldr	r2, [r3, #8]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a07      	ldr	r2, [pc, #28]	; (8003c4c <TIM_Base_SetConfig+0xb8>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d103      	bne.n	8003c3c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	691a      	ldr	r2, [r3, #16]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	615a      	str	r2, [r3, #20]
}
 8003c42:	bf00      	nop
 8003c44:	3714      	adds	r7, #20
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bc80      	pop	{r7}
 8003c4a:	4770      	bx	lr
 8003c4c:	40012c00 	.word	0x40012c00
 8003c50:	40000400 	.word	0x40000400
 8003c54:	40000800 	.word	0x40000800

08003c58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b087      	sub	sp, #28
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	f023 0201 	bic.w	r2, r3, #1
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	011b      	lsls	r3, r3, #4
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	f023 030a 	bic.w	r3, r3, #10
 8003c94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c96:	697a      	ldr	r2, [r7, #20]
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	621a      	str	r2, [r3, #32]
}
 8003caa:	bf00      	nop
 8003cac:	371c      	adds	r7, #28
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bc80      	pop	{r7}
 8003cb2:	4770      	bx	lr

08003cb4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b087      	sub	sp, #28
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	f023 0210 	bic.w	r2, r3, #16
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
 8003cd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003cde:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	031b      	lsls	r3, r3, #12
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003cf0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	011b      	lsls	r3, r3, #4
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	697a      	ldr	r2, [r7, #20]
 8003d00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	621a      	str	r2, [r3, #32]
}
 8003d08:	bf00      	nop
 8003d0a:	371c      	adds	r7, #28
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bc80      	pop	{r7}
 8003d10:	4770      	bx	lr

08003d12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d12:	b480      	push	{r7}
 8003d14:	b085      	sub	sp, #20
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
 8003d1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d2a:	683a      	ldr	r2, [r7, #0]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	f043 0307 	orr.w	r3, r3, #7
 8003d34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	68fa      	ldr	r2, [r7, #12]
 8003d3a:	609a      	str	r2, [r3, #8]
}
 8003d3c:	bf00      	nop
 8003d3e:	3714      	adds	r7, #20
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bc80      	pop	{r7}
 8003d44:	4770      	bx	lr

08003d46 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d46:	b480      	push	{r7}
 8003d48:	b087      	sub	sp, #28
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	60f8      	str	r0, [r7, #12]
 8003d4e:	60b9      	str	r1, [r7, #8]
 8003d50:	607a      	str	r2, [r7, #4]
 8003d52:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d60:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	021a      	lsls	r2, r3, #8
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	431a      	orrs	r2, r3
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	609a      	str	r2, [r3, #8]
}
 8003d7a:	bf00      	nop
 8003d7c:	371c      	adds	r7, #28
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bc80      	pop	{r7}
 8003d82:	4770      	bx	lr

08003d84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d101      	bne.n	8003d9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d98:	2302      	movs	r3, #2
 8003d9a:	e032      	b.n	8003e02 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2202      	movs	r2, #2
 8003da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dd4:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	68ba      	ldr	r2, [r7, #8]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68ba      	ldr	r2, [r7, #8]
 8003dee:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3714      	adds	r7, #20
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bc80      	pop	{r7}
 8003e0a:	4770      	bx	lr

08003e0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bc80      	pop	{r7}
 8003e1c:	4770      	bx	lr

08003e1e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b083      	sub	sp, #12
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e26:	bf00      	nop
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bc80      	pop	{r7}
 8003e2e:	4770      	bx	lr

08003e30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e03f      	b.n	8003ec2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d106      	bne.n	8003e5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7fc fffa 	bl	8000e50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2224      	movs	r2, #36	; 0x24
 8003e60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68da      	ldr	r2, [r3, #12]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 fb95 	bl	80045a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	691a      	ldr	r2, [r3, #16]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	695a      	ldr	r2, [r3, #20]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68da      	ldr	r2, [r3, #12]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ea8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2220      	movs	r2, #32
 8003ebc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3708      	adds	r7, #8
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b088      	sub	sp, #32
 8003ece:	af02      	add	r7, sp, #8
 8003ed0:	60f8      	str	r0, [r7, #12]
 8003ed2:	60b9      	str	r1, [r7, #8]
 8003ed4:	603b      	str	r3, [r7, #0]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003eda:	2300      	movs	r3, #0
 8003edc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b20      	cmp	r3, #32
 8003ee8:	f040 8083 	bne.w	8003ff2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d002      	beq.n	8003ef8 <HAL_UART_Transmit+0x2e>
 8003ef2:	88fb      	ldrh	r3, [r7, #6]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d101      	bne.n	8003efc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e07b      	b.n	8003ff4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d101      	bne.n	8003f0a <HAL_UART_Transmit+0x40>
 8003f06:	2302      	movs	r3, #2
 8003f08:	e074      	b.n	8003ff4 <HAL_UART_Transmit+0x12a>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2221      	movs	r2, #33	; 0x21
 8003f1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003f20:	f7fd fbe0 	bl	80016e4 <HAL_GetTick>
 8003f24:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	88fa      	ldrh	r2, [r7, #6]
 8003f2a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	88fa      	ldrh	r2, [r7, #6]
 8003f30:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003f32:	e042      	b.n	8003fba <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f4a:	d122      	bne.n	8003f92 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	9300      	str	r3, [sp, #0]
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	2200      	movs	r2, #0
 8003f54:	2180      	movs	r1, #128	; 0x80
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f000 f9bb 	bl	80042d2 <UART_WaitOnFlagUntilTimeout>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e046      	b.n	8003ff4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	881b      	ldrh	r3, [r3, #0]
 8003f6e:	461a      	mov	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f78:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d103      	bne.n	8003f8a <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	3302      	adds	r3, #2
 8003f86:	60bb      	str	r3, [r7, #8]
 8003f88:	e017      	b.n	8003fba <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	60bb      	str	r3, [r7, #8]
 8003f90:	e013      	b.n	8003fba <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	9300      	str	r3, [sp, #0]
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	2180      	movs	r1, #128	; 0x80
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f000 f998 	bl	80042d2 <UART_WaitOnFlagUntilTimeout>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d001      	beq.n	8003fac <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e023      	b.n	8003ff4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	1c5a      	adds	r2, r3, #1
 8003fb0:	60ba      	str	r2, [r7, #8]
 8003fb2:	781a      	ldrb	r2, [r3, #0]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d1b7      	bne.n	8003f34 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	9300      	str	r3, [sp, #0]
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	2140      	movs	r1, #64	; 0x40
 8003fce:	68f8      	ldr	r0, [r7, #12]
 8003fd0:	f000 f97f 	bl	80042d2 <UART_WaitOnFlagUntilTimeout>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e00a      	b.n	8003ff4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2220      	movs	r2, #32
 8003fe2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	e000      	b.n	8003ff4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003ff2:	2302      	movs	r3, #2
  }
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3718      	adds	r7, #24
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	4613      	mov	r3, r2
 8004008:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b20      	cmp	r3, #32
 8004014:	d140      	bne.n	8004098 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d002      	beq.n	8004022 <HAL_UART_Receive_IT+0x26>
 800401c:	88fb      	ldrh	r3, [r7, #6]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d101      	bne.n	8004026 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e039      	b.n	800409a <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800402c:	2b01      	cmp	r3, #1
 800402e:	d101      	bne.n	8004034 <HAL_UART_Receive_IT+0x38>
 8004030:	2302      	movs	r3, #2
 8004032:	e032      	b.n	800409a <HAL_UART_Receive_IT+0x9e>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	68ba      	ldr	r2, [r7, #8]
 8004040:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	88fa      	ldrh	r2, [r7, #6]
 8004046:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	88fa      	ldrh	r2, [r7, #6]
 800404c:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2222      	movs	r2, #34	; 0x22
 8004058:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68da      	ldr	r2, [r3, #12]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004072:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	695a      	ldr	r2, [r3, #20]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f042 0201 	orr.w	r2, r2, #1
 8004082:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68da      	ldr	r2, [r3, #12]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f042 0220 	orr.w	r2, r2, #32
 8004092:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004094:	2300      	movs	r3, #0
 8004096:	e000      	b.n	800409a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004098:	2302      	movs	r3, #2
  }
}
 800409a:	4618      	mov	r0, r3
 800409c:	3714      	adds	r7, #20
 800409e:	46bd      	mov	sp, r7
 80040a0:	bc80      	pop	{r7}
 80040a2:	4770      	bx	lr

080040a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b088      	sub	sp, #32
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80040c4:	2300      	movs	r3, #0
 80040c6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80040c8:	2300      	movs	r3, #0
 80040ca:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	f003 030f 	and.w	r3, r3, #15
 80040d2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10d      	bne.n	80040f6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	f003 0320 	and.w	r3, r3, #32
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d008      	beq.n	80040f6 <HAL_UART_IRQHandler+0x52>
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	f003 0320 	and.w	r3, r3, #32
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d003      	beq.n	80040f6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f9d7 	bl	80044a2 <UART_Receive_IT>
      return;
 80040f4:	e0cc      	b.n	8004290 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f000 80ab 	beq.w	8004254 <HAL_UART_IRQHandler+0x1b0>
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	f003 0301 	and.w	r3, r3, #1
 8004104:	2b00      	cmp	r3, #0
 8004106:	d105      	bne.n	8004114 <HAL_UART_IRQHandler+0x70>
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800410e:	2b00      	cmp	r3, #0
 8004110:	f000 80a0 	beq.w	8004254 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00a      	beq.n	8004134 <HAL_UART_IRQHandler+0x90>
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004124:	2b00      	cmp	r3, #0
 8004126:	d005      	beq.n	8004134 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800412c:	f043 0201 	orr.w	r2, r3, #1
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	f003 0304 	and.w	r3, r3, #4
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00a      	beq.n	8004154 <HAL_UART_IRQHandler+0xb0>
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b00      	cmp	r3, #0
 8004146:	d005      	beq.n	8004154 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800414c:	f043 0202 	orr.w	r2, r3, #2
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00a      	beq.n	8004174 <HAL_UART_IRQHandler+0xd0>
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	f003 0301 	and.w	r3, r3, #1
 8004164:	2b00      	cmp	r3, #0
 8004166:	d005      	beq.n	8004174 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800416c:	f043 0204 	orr.w	r2, r3, #4
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	f003 0308 	and.w	r3, r3, #8
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00a      	beq.n	8004194 <HAL_UART_IRQHandler+0xf0>
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	f003 0301 	and.w	r3, r3, #1
 8004184:	2b00      	cmp	r3, #0
 8004186:	d005      	beq.n	8004194 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800418c:	f043 0208 	orr.w	r2, r3, #8
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004198:	2b00      	cmp	r3, #0
 800419a:	d078      	beq.n	800428e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	f003 0320 	and.w	r3, r3, #32
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d007      	beq.n	80041b6 <HAL_UART_IRQHandler+0x112>
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	f003 0320 	and.w	r3, r3, #32
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d002      	beq.n	80041b6 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 f976 	bl	80044a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	bf14      	ite	ne
 80041c4:	2301      	movne	r3, #1
 80041c6:	2300      	moveq	r3, #0
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041d0:	f003 0308 	and.w	r3, r3, #8
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d102      	bne.n	80041de <HAL_UART_IRQHandler+0x13a>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d031      	beq.n	8004242 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 f8c1 	bl	8004366 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d023      	beq.n	800423a <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	695a      	ldr	r2, [r3, #20]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004200:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004206:	2b00      	cmp	r3, #0
 8004208:	d013      	beq.n	8004232 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800420e:	4a22      	ldr	r2, [pc, #136]	; (8004298 <HAL_UART_IRQHandler+0x1f4>)
 8004210:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004216:	4618      	mov	r0, r3
 8004218:	f7fd fb9e 	bl	8001958 <HAL_DMA_Abort_IT>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d016      	beq.n	8004250 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800422c:	4610      	mov	r0, r2
 800422e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004230:	e00e      	b.n	8004250 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f844 	bl	80042c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004238:	e00a      	b.n	8004250 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 f840 	bl	80042c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004240:	e006      	b.n	8004250 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 f83c 	bl	80042c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800424e:	e01e      	b.n	800428e <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004250:	bf00      	nop
    return;
 8004252:	e01c      	b.n	800428e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800425a:	2b00      	cmp	r3, #0
 800425c:	d008      	beq.n	8004270 <HAL_UART_IRQHandler+0x1cc>
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004264:	2b00      	cmp	r3, #0
 8004266:	d003      	beq.n	8004270 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 f8ad 	bl	80043c8 <UART_Transmit_IT>
    return;
 800426e:	e00f      	b.n	8004290 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00a      	beq.n	8004290 <HAL_UART_IRQHandler+0x1ec>
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004280:	2b00      	cmp	r3, #0
 8004282:	d005      	beq.n	8004290 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 f8f4 	bl	8004472 <UART_EndTransmit_IT>
    return;
 800428a:	bf00      	nop
 800428c:	e000      	b.n	8004290 <HAL_UART_IRQHandler+0x1ec>
    return;
 800428e:	bf00      	nop
  }
}
 8004290:	3720      	adds	r7, #32
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	080043a1 	.word	0x080043a1

0800429c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bc80      	pop	{r7}
 80042ac:	4770      	bx	lr

080042ae <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80042ae:	b480      	push	{r7}
 80042b0:	b083      	sub	sp, #12
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80042b6:	bf00      	nop
 80042b8:	370c      	adds	r7, #12
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bc80      	pop	{r7}
 80042be:	4770      	bx	lr

080042c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bc80      	pop	{r7}
 80042d0:	4770      	bx	lr

080042d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b084      	sub	sp, #16
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	60f8      	str	r0, [r7, #12]
 80042da:	60b9      	str	r1, [r7, #8]
 80042dc:	603b      	str	r3, [r7, #0]
 80042de:	4613      	mov	r3, r2
 80042e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042e2:	e02c      	b.n	800433e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ea:	d028      	beq.n	800433e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d007      	beq.n	8004302 <UART_WaitOnFlagUntilTimeout+0x30>
 80042f2:	f7fd f9f7 	bl	80016e4 <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d21d      	bcs.n	800433e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68da      	ldr	r2, [r3, #12]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004310:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	695a      	ldr	r2, [r3, #20]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f022 0201 	bic.w	r2, r2, #1
 8004320:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2220      	movs	r2, #32
 8004326:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2220      	movs	r2, #32
 800432e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e00f      	b.n	800435e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	4013      	ands	r3, r2
 8004348:	68ba      	ldr	r2, [r7, #8]
 800434a:	429a      	cmp	r2, r3
 800434c:	bf0c      	ite	eq
 800434e:	2301      	moveq	r3, #1
 8004350:	2300      	movne	r3, #0
 8004352:	b2db      	uxtb	r3, r3
 8004354:	461a      	mov	r2, r3
 8004356:	79fb      	ldrb	r3, [r7, #7]
 8004358:	429a      	cmp	r2, r3
 800435a:	d0c3      	beq.n	80042e4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004366:	b480      	push	{r7}
 8004368:	b083      	sub	sp, #12
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68da      	ldr	r2, [r3, #12]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800437c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	695a      	ldr	r2, [r3, #20]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f022 0201 	bic.w	r2, r2, #1
 800438c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2220      	movs	r2, #32
 8004392:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004396:	bf00      	nop
 8004398:	370c      	adds	r7, #12
 800439a:	46bd      	mov	sp, r7
 800439c:	bc80      	pop	{r7}
 800439e:	4770      	bx	lr

080043a0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f7ff ff80 	bl	80042c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043c0:	bf00      	nop
 80043c2:	3710      	adds	r7, #16
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	2b21      	cmp	r3, #33	; 0x21
 80043da:	d144      	bne.n	8004466 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043e4:	d11a      	bne.n	800441c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a1b      	ldr	r3, [r3, #32]
 80043ea:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	881b      	ldrh	r3, [r3, #0]
 80043f0:	461a      	mov	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043fa:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d105      	bne.n	8004410 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a1b      	ldr	r3, [r3, #32]
 8004408:	1c9a      	adds	r2, r3, #2
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	621a      	str	r2, [r3, #32]
 800440e:	e00e      	b.n	800442e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a1b      	ldr	r3, [r3, #32]
 8004414:	1c5a      	adds	r2, r3, #1
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	621a      	str	r2, [r3, #32]
 800441a:	e008      	b.n	800442e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a1b      	ldr	r3, [r3, #32]
 8004420:	1c59      	adds	r1, r3, #1
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	6211      	str	r1, [r2, #32]
 8004426:	781a      	ldrb	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004432:	b29b      	uxth	r3, r3
 8004434:	3b01      	subs	r3, #1
 8004436:	b29b      	uxth	r3, r3
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	4619      	mov	r1, r3
 800443c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10f      	bne.n	8004462 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68da      	ldr	r2, [r3, #12]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004450:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68da      	ldr	r2, [r3, #12]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004460:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004462:	2300      	movs	r3, #0
 8004464:	e000      	b.n	8004468 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004466:	2302      	movs	r3, #2
  }
}
 8004468:	4618      	mov	r0, r3
 800446a:	3714      	adds	r7, #20
 800446c:	46bd      	mov	sp, r7
 800446e:	bc80      	pop	{r7}
 8004470:	4770      	bx	lr

08004472 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004472:	b580      	push	{r7, lr}
 8004474:	b082      	sub	sp, #8
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68da      	ldr	r2, [r3, #12]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004488:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2220      	movs	r2, #32
 800448e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f7ff ff02 	bl	800429c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3708      	adds	r7, #8
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b084      	sub	sp, #16
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	2b22      	cmp	r3, #34	; 0x22
 80044b4:	d171      	bne.n	800459a <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044be:	d123      	bne.n	8004508 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c4:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d10e      	bne.n	80044ec <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044da:	b29a      	uxth	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e4:	1c9a      	adds	r2, r3, #2
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	629a      	str	r2, [r3, #40]	; 0x28
 80044ea:	e029      	b.n	8004540 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004500:	1c5a      	adds	r2, r3, #1
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	629a      	str	r2, [r3, #40]	; 0x28
 8004506:	e01b      	b.n	8004540 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d10a      	bne.n	8004526 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	6858      	ldr	r0, [r3, #4]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451a:	1c59      	adds	r1, r3, #1
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	6291      	str	r1, [r2, #40]	; 0x28
 8004520:	b2c2      	uxtb	r2, r0
 8004522:	701a      	strb	r2, [r3, #0]
 8004524:	e00c      	b.n	8004540 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	b2da      	uxtb	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004532:	1c58      	adds	r0, r3, #1
 8004534:	6879      	ldr	r1, [r7, #4]
 8004536:	6288      	str	r0, [r1, #40]	; 0x28
 8004538:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800453c:	b2d2      	uxtb	r2, r2
 800453e:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004544:	b29b      	uxth	r3, r3
 8004546:	3b01      	subs	r3, #1
 8004548:	b29b      	uxth	r3, r3
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	4619      	mov	r1, r3
 800454e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004550:	2b00      	cmp	r3, #0
 8004552:	d120      	bne.n	8004596 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68da      	ldr	r2, [r3, #12]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f022 0220 	bic.w	r2, r2, #32
 8004562:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68da      	ldr	r2, [r3, #12]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004572:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	695a      	ldr	r2, [r3, #20]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f022 0201 	bic.w	r2, r2, #1
 8004582:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2220      	movs	r2, #32
 8004588:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f7ff fe8e 	bl	80042ae <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004592:	2300      	movs	r3, #0
 8004594:	e002      	b.n	800459c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004596:	2300      	movs	r3, #0
 8004598:	e000      	b.n	800459c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800459a:	2302      	movs	r3, #2
  }
}
 800459c:	4618      	mov	r0, r3
 800459e:	3710      	adds	r7, #16
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	68da      	ldr	r2, [r3, #12]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	430a      	orrs	r2, r1
 80045c0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	689a      	ldr	r2, [r3, #8]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	431a      	orrs	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	695b      	ldr	r3, [r3, #20]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80045de:	f023 030c 	bic.w	r3, r3, #12
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	6812      	ldr	r2, [r2, #0]
 80045e6:	68f9      	ldr	r1, [r7, #12]
 80045e8:	430b      	orrs	r3, r1
 80045ea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	699a      	ldr	r2, [r3, #24]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	430a      	orrs	r2, r1
 8004600:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a52      	ldr	r2, [pc, #328]	; (8004750 <UART_SetConfig+0x1ac>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d14e      	bne.n	80046aa <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800460c:	f7ff f856 	bl	80036bc <HAL_RCC_GetPCLK2Freq>
 8004610:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004612:	68ba      	ldr	r2, [r7, #8]
 8004614:	4613      	mov	r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	4413      	add	r3, r2
 800461a:	009a      	lsls	r2, r3, #2
 800461c:	441a      	add	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	fbb2 f3f3 	udiv	r3, r2, r3
 8004628:	4a4a      	ldr	r2, [pc, #296]	; (8004754 <UART_SetConfig+0x1b0>)
 800462a:	fba2 2303 	umull	r2, r3, r2, r3
 800462e:	095b      	lsrs	r3, r3, #5
 8004630:	0119      	lsls	r1, r3, #4
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	4613      	mov	r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	4413      	add	r3, r2
 800463a:	009a      	lsls	r2, r3, #2
 800463c:	441a      	add	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	fbb2 f2f3 	udiv	r2, r2, r3
 8004648:	4b42      	ldr	r3, [pc, #264]	; (8004754 <UART_SetConfig+0x1b0>)
 800464a:	fba3 0302 	umull	r0, r3, r3, r2
 800464e:	095b      	lsrs	r3, r3, #5
 8004650:	2064      	movs	r0, #100	; 0x64
 8004652:	fb00 f303 	mul.w	r3, r0, r3
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	011b      	lsls	r3, r3, #4
 800465a:	3332      	adds	r3, #50	; 0x32
 800465c:	4a3d      	ldr	r2, [pc, #244]	; (8004754 <UART_SetConfig+0x1b0>)
 800465e:	fba2 2303 	umull	r2, r3, r2, r3
 8004662:	095b      	lsrs	r3, r3, #5
 8004664:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004668:	4419      	add	r1, r3
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	4613      	mov	r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	4413      	add	r3, r2
 8004672:	009a      	lsls	r2, r3, #2
 8004674:	441a      	add	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004680:	4b34      	ldr	r3, [pc, #208]	; (8004754 <UART_SetConfig+0x1b0>)
 8004682:	fba3 0302 	umull	r0, r3, r3, r2
 8004686:	095b      	lsrs	r3, r3, #5
 8004688:	2064      	movs	r0, #100	; 0x64
 800468a:	fb00 f303 	mul.w	r3, r0, r3
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	011b      	lsls	r3, r3, #4
 8004692:	3332      	adds	r3, #50	; 0x32
 8004694:	4a2f      	ldr	r2, [pc, #188]	; (8004754 <UART_SetConfig+0x1b0>)
 8004696:	fba2 2303 	umull	r2, r3, r2, r3
 800469a:	095b      	lsrs	r3, r3, #5
 800469c:	f003 020f 	and.w	r2, r3, #15
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	440a      	add	r2, r1
 80046a6:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80046a8:	e04d      	b.n	8004746 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80046aa:	f7fe fff3 	bl	8003694 <HAL_RCC_GetPCLK1Freq>
 80046ae:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046b0:	68ba      	ldr	r2, [r7, #8]
 80046b2:	4613      	mov	r3, r2
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	4413      	add	r3, r2
 80046b8:	009a      	lsls	r2, r3, #2
 80046ba:	441a      	add	r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c6:	4a23      	ldr	r2, [pc, #140]	; (8004754 <UART_SetConfig+0x1b0>)
 80046c8:	fba2 2303 	umull	r2, r3, r2, r3
 80046cc:	095b      	lsrs	r3, r3, #5
 80046ce:	0119      	lsls	r1, r3, #4
 80046d0:	68ba      	ldr	r2, [r7, #8]
 80046d2:	4613      	mov	r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	4413      	add	r3, r2
 80046d8:	009a      	lsls	r2, r3, #2
 80046da:	441a      	add	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80046e6:	4b1b      	ldr	r3, [pc, #108]	; (8004754 <UART_SetConfig+0x1b0>)
 80046e8:	fba3 0302 	umull	r0, r3, r3, r2
 80046ec:	095b      	lsrs	r3, r3, #5
 80046ee:	2064      	movs	r0, #100	; 0x64
 80046f0:	fb00 f303 	mul.w	r3, r0, r3
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	011b      	lsls	r3, r3, #4
 80046f8:	3332      	adds	r3, #50	; 0x32
 80046fa:	4a16      	ldr	r2, [pc, #88]	; (8004754 <UART_SetConfig+0x1b0>)
 80046fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004700:	095b      	lsrs	r3, r3, #5
 8004702:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004706:	4419      	add	r1, r3
 8004708:	68ba      	ldr	r2, [r7, #8]
 800470a:	4613      	mov	r3, r2
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	4413      	add	r3, r2
 8004710:	009a      	lsls	r2, r3, #2
 8004712:	441a      	add	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	fbb2 f2f3 	udiv	r2, r2, r3
 800471e:	4b0d      	ldr	r3, [pc, #52]	; (8004754 <UART_SetConfig+0x1b0>)
 8004720:	fba3 0302 	umull	r0, r3, r3, r2
 8004724:	095b      	lsrs	r3, r3, #5
 8004726:	2064      	movs	r0, #100	; 0x64
 8004728:	fb00 f303 	mul.w	r3, r0, r3
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	011b      	lsls	r3, r3, #4
 8004730:	3332      	adds	r3, #50	; 0x32
 8004732:	4a08      	ldr	r2, [pc, #32]	; (8004754 <UART_SetConfig+0x1b0>)
 8004734:	fba2 2303 	umull	r2, r3, r2, r3
 8004738:	095b      	lsrs	r3, r3, #5
 800473a:	f003 020f 	and.w	r2, r3, #15
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	440a      	add	r2, r1
 8004744:	609a      	str	r2, [r3, #8]
}
 8004746:	bf00      	nop
 8004748:	3710      	adds	r7, #16
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	40013800 	.word	0x40013800
 8004754:	51eb851f 	.word	0x51eb851f

08004758 <__libc_init_array>:
 8004758:	b570      	push	{r4, r5, r6, lr}
 800475a:	2500      	movs	r5, #0
 800475c:	4e0c      	ldr	r6, [pc, #48]	; (8004790 <__libc_init_array+0x38>)
 800475e:	4c0d      	ldr	r4, [pc, #52]	; (8004794 <__libc_init_array+0x3c>)
 8004760:	1ba4      	subs	r4, r4, r6
 8004762:	10a4      	asrs	r4, r4, #2
 8004764:	42a5      	cmp	r5, r4
 8004766:	d109      	bne.n	800477c <__libc_init_array+0x24>
 8004768:	f000 f894 	bl	8004894 <_init>
 800476c:	2500      	movs	r5, #0
 800476e:	4e0a      	ldr	r6, [pc, #40]	; (8004798 <__libc_init_array+0x40>)
 8004770:	4c0a      	ldr	r4, [pc, #40]	; (800479c <__libc_init_array+0x44>)
 8004772:	1ba4      	subs	r4, r4, r6
 8004774:	10a4      	asrs	r4, r4, #2
 8004776:	42a5      	cmp	r5, r4
 8004778:	d105      	bne.n	8004786 <__libc_init_array+0x2e>
 800477a:	bd70      	pop	{r4, r5, r6, pc}
 800477c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004780:	4798      	blx	r3
 8004782:	3501      	adds	r5, #1
 8004784:	e7ee      	b.n	8004764 <__libc_init_array+0xc>
 8004786:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800478a:	4798      	blx	r3
 800478c:	3501      	adds	r5, #1
 800478e:	e7f2      	b.n	8004776 <__libc_init_array+0x1e>
 8004790:	08004ec4 	.word	0x08004ec4
 8004794:	08004ec4 	.word	0x08004ec4
 8004798:	08004ec4 	.word	0x08004ec4
 800479c:	08004ec8 	.word	0x08004ec8

080047a0 <__itoa>:
 80047a0:	1e93      	subs	r3, r2, #2
 80047a2:	2b22      	cmp	r3, #34	; 0x22
 80047a4:	b510      	push	{r4, lr}
 80047a6:	460c      	mov	r4, r1
 80047a8:	d904      	bls.n	80047b4 <__itoa+0x14>
 80047aa:	2300      	movs	r3, #0
 80047ac:	461c      	mov	r4, r3
 80047ae:	700b      	strb	r3, [r1, #0]
 80047b0:	4620      	mov	r0, r4
 80047b2:	bd10      	pop	{r4, pc}
 80047b4:	2a0a      	cmp	r2, #10
 80047b6:	d109      	bne.n	80047cc <__itoa+0x2c>
 80047b8:	2800      	cmp	r0, #0
 80047ba:	da07      	bge.n	80047cc <__itoa+0x2c>
 80047bc:	232d      	movs	r3, #45	; 0x2d
 80047be:	700b      	strb	r3, [r1, #0]
 80047c0:	2101      	movs	r1, #1
 80047c2:	4240      	negs	r0, r0
 80047c4:	4421      	add	r1, r4
 80047c6:	f000 f827 	bl	8004818 <__utoa>
 80047ca:	e7f1      	b.n	80047b0 <__itoa+0x10>
 80047cc:	2100      	movs	r1, #0
 80047ce:	e7f9      	b.n	80047c4 <__itoa+0x24>

080047d0 <itoa>:
 80047d0:	f7ff bfe6 	b.w	80047a0 <__itoa>

080047d4 <memcpy>:
 80047d4:	b510      	push	{r4, lr}
 80047d6:	1e43      	subs	r3, r0, #1
 80047d8:	440a      	add	r2, r1
 80047da:	4291      	cmp	r1, r2
 80047dc:	d100      	bne.n	80047e0 <memcpy+0xc>
 80047de:	bd10      	pop	{r4, pc}
 80047e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047e8:	e7f7      	b.n	80047da <memcpy+0x6>

080047ea <memset>:
 80047ea:	4603      	mov	r3, r0
 80047ec:	4402      	add	r2, r0
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d100      	bne.n	80047f4 <memset+0xa>
 80047f2:	4770      	bx	lr
 80047f4:	f803 1b01 	strb.w	r1, [r3], #1
 80047f8:	e7f9      	b.n	80047ee <memset+0x4>

080047fa <strcat>:
 80047fa:	4603      	mov	r3, r0
 80047fc:	b510      	push	{r4, lr}
 80047fe:	781a      	ldrb	r2, [r3, #0]
 8004800:	1c5c      	adds	r4, r3, #1
 8004802:	b93a      	cbnz	r2, 8004814 <strcat+0x1a>
 8004804:	3b01      	subs	r3, #1
 8004806:	f811 2b01 	ldrb.w	r2, [r1], #1
 800480a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800480e:	2a00      	cmp	r2, #0
 8004810:	d1f9      	bne.n	8004806 <strcat+0xc>
 8004812:	bd10      	pop	{r4, pc}
 8004814:	4623      	mov	r3, r4
 8004816:	e7f2      	b.n	80047fe <strcat+0x4>

08004818 <__utoa>:
 8004818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800481a:	b08b      	sub	sp, #44	; 0x2c
 800481c:	4605      	mov	r5, r0
 800481e:	460c      	mov	r4, r1
 8004820:	466e      	mov	r6, sp
 8004822:	4b1b      	ldr	r3, [pc, #108]	; (8004890 <__utoa+0x78>)
 8004824:	f103 0c20 	add.w	ip, r3, #32
 8004828:	4637      	mov	r7, r6
 800482a:	6818      	ldr	r0, [r3, #0]
 800482c:	6859      	ldr	r1, [r3, #4]
 800482e:	3308      	adds	r3, #8
 8004830:	c703      	stmia	r7!, {r0, r1}
 8004832:	4563      	cmp	r3, ip
 8004834:	463e      	mov	r6, r7
 8004836:	d1f7      	bne.n	8004828 <__utoa+0x10>
 8004838:	6818      	ldr	r0, [r3, #0]
 800483a:	791b      	ldrb	r3, [r3, #4]
 800483c:	6038      	str	r0, [r7, #0]
 800483e:	713b      	strb	r3, [r7, #4]
 8004840:	1e93      	subs	r3, r2, #2
 8004842:	2b22      	cmp	r3, #34	; 0x22
 8004844:	f04f 0300 	mov.w	r3, #0
 8004848:	d904      	bls.n	8004854 <__utoa+0x3c>
 800484a:	7023      	strb	r3, [r4, #0]
 800484c:	461c      	mov	r4, r3
 800484e:	4620      	mov	r0, r4
 8004850:	b00b      	add	sp, #44	; 0x2c
 8004852:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004854:	1e66      	subs	r6, r4, #1
 8004856:	fbb5 f0f2 	udiv	r0, r5, r2
 800485a:	fb02 5510 	mls	r5, r2, r0, r5
 800485e:	af0a      	add	r7, sp, #40	; 0x28
 8004860:	443d      	add	r5, r7
 8004862:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8004866:	1c59      	adds	r1, r3, #1
 8004868:	f806 5f01 	strb.w	r5, [r6, #1]!
 800486c:	4605      	mov	r5, r0
 800486e:	b968      	cbnz	r0, 800488c <__utoa+0x74>
 8004870:	4622      	mov	r2, r4
 8004872:	5460      	strb	r0, [r4, r1]
 8004874:	4423      	add	r3, r4
 8004876:	1b19      	subs	r1, r3, r4
 8004878:	1b10      	subs	r0, r2, r4
 800487a:	4281      	cmp	r1, r0
 800487c:	dde7      	ble.n	800484e <__utoa+0x36>
 800487e:	7811      	ldrb	r1, [r2, #0]
 8004880:	7818      	ldrb	r0, [r3, #0]
 8004882:	f802 0b01 	strb.w	r0, [r2], #1
 8004886:	f803 1901 	strb.w	r1, [r3], #-1
 800488a:	e7f4      	b.n	8004876 <__utoa+0x5e>
 800488c:	460b      	mov	r3, r1
 800488e:	e7e2      	b.n	8004856 <__utoa+0x3e>
 8004890:	08004e9c 	.word	0x08004e9c

08004894 <_init>:
 8004894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004896:	bf00      	nop
 8004898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800489a:	bc08      	pop	{r3}
 800489c:	469e      	mov	lr, r3
 800489e:	4770      	bx	lr

080048a0 <_fini>:
 80048a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048a2:	bf00      	nop
 80048a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048a6:	bc08      	pop	{r3}
 80048a8:	469e      	mov	lr, r3
 80048aa:	4770      	bx	lr
