
Ihor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043e8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000618  080044f4  080044f4  000144f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b0c  08004b0c  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08004b0c  08004b0c  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b0c  08004b0c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b0c  08004b0c  00014b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b10  08004b10  00014b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08004b14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000620  20000018  08004b2c  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000638  08004b2c  00020638  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f267  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002145  00000000  00000000  0002f2a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f10  00000000  00000000  000313f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e10  00000000  00000000  00032300  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014a04  00000000  00000000  00033110  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000af37  00000000  00000000  00047b14  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007343c  00000000  00000000  00052a4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c5e87  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fb8  00000000  00000000  000c5f04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	080044dc 	.word	0x080044dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	080044dc 	.word	0x080044dc

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <BMP_180_Init>:
#define BMP_TEMPERATURE_DELAY      	5
#define BMP_MODE_PRESSURE           0xF4
#define BMP_OSS                     8
#define BMP_PRESSURE_DELAY          26

HAL_StatusTypeDef BMP_180_Init(Bmp180 *bmp, I2C_HandleTypeDef *i2c) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b08a      	sub	sp, #40	; 0x28
 8000160:	af02      	add	r7, sp, #8
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef res;
	uint8_t reg = BMP_AC1_H;
 8000166:	23aa      	movs	r3, #170	; 0xaa
 8000168:	77bb      	strb	r3, [r7, #30]

	res = HAL_I2C_Master_Transmit(i2c, BMP_ADDRESS, &reg, 1,
 800016a:	f107 021e 	add.w	r2, r7, #30
 800016e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000172:	9300      	str	r3, [sp, #0]
 8000174:	2301      	movs	r3, #1
 8000176:	21ee      	movs	r1, #238	; 0xee
 8000178:	6838      	ldr	r0, [r7, #0]
 800017a:	f001 fd21 	bl	8001bc0 <HAL_I2C_Master_Transmit>
 800017e:	4603      	mov	r3, r0
 8000180:	77fb      	strb	r3, [r7, #31]
	I2C_TIMEOUT);

	if (res != HAL_OK)
 8000182:	7ffb      	ldrb	r3, [r7, #31]
 8000184:	2b00      	cmp	r3, #0
 8000186:	d001      	beq.n	800018c <BMP_180_Init+0x30>
		return res;
 8000188:	7ffb      	ldrb	r3, [r7, #31]
 800018a:	e080      	b.n	800028e <BMP_180_Init+0x132>

	uint8_t data[22] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 800018c:	f107 0308 	add.w	r3, r7, #8
 8000190:	2200      	movs	r2, #0
 8000192:	601a      	str	r2, [r3, #0]
 8000194:	605a      	str	r2, [r3, #4]
 8000196:	609a      	str	r2, [r3, #8]
 8000198:	60da      	str	r2, [r3, #12]
 800019a:	611a      	str	r2, [r3, #16]
 800019c:	829a      	strh	r2, [r3, #20]
			0, 0, 0, 0 };

	res = HAL_I2C_Master_Receive(i2c, BMP_ADDRESS, data, 22, I2C_TIMEOUT);
 800019e:	f107 0208 	add.w	r2, r7, #8
 80001a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001a6:	9300      	str	r3, [sp, #0]
 80001a8:	2316      	movs	r3, #22
 80001aa:	21ee      	movs	r1, #238	; 0xee
 80001ac:	6838      	ldr	r0, [r7, #0]
 80001ae:	f001 fe05 	bl	8001dbc <HAL_I2C_Master_Receive>
 80001b2:	4603      	mov	r3, r0
 80001b4:	77fb      	strb	r3, [r7, #31]

	if (res != HAL_OK)
 80001b6:	7ffb      	ldrb	r3, [r7, #31]
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d001      	beq.n	80001c0 <BMP_180_Init+0x64>
		return res;
 80001bc:	7ffb      	ldrb	r3, [r7, #31]
 80001be:	e066      	b.n	800028e <BMP_180_Init+0x132>

	bmp->_AC1 = ((int16_t) data[0] << 8) | data[1];
 80001c0:	7a3b      	ldrb	r3, [r7, #8]
 80001c2:	021b      	lsls	r3, r3, #8
 80001c4:	b21a      	sxth	r2, r3
 80001c6:	7a7b      	ldrb	r3, [r7, #9]
 80001c8:	b21b      	sxth	r3, r3
 80001ca:	4313      	orrs	r3, r2
 80001cc:	b21a      	sxth	r2, r3
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	801a      	strh	r2, [r3, #0]
	bmp->_AC2 = ((int16_t) data[2] << 8) | data[3];
 80001d2:	7abb      	ldrb	r3, [r7, #10]
 80001d4:	021b      	lsls	r3, r3, #8
 80001d6:	b21a      	sxth	r2, r3
 80001d8:	7afb      	ldrb	r3, [r7, #11]
 80001da:	b21b      	sxth	r3, r3
 80001dc:	4313      	orrs	r3, r2
 80001de:	b21a      	sxth	r2, r3
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	805a      	strh	r2, [r3, #2]
	bmp->_AC3 = ((int16_t) data[4] << 8) | data[5];
 80001e4:	7b3b      	ldrb	r3, [r7, #12]
 80001e6:	021b      	lsls	r3, r3, #8
 80001e8:	b21a      	sxth	r2, r3
 80001ea:	7b7b      	ldrb	r3, [r7, #13]
 80001ec:	b21b      	sxth	r3, r3
 80001ee:	4313      	orrs	r3, r2
 80001f0:	b21a      	sxth	r2, r3
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	809a      	strh	r2, [r3, #4]
	bmp->_AC4 = ((uint16_t) data[6] << 8) | data[7];
 80001f6:	7bbb      	ldrb	r3, [r7, #14]
 80001f8:	021b      	lsls	r3, r3, #8
 80001fa:	b21a      	sxth	r2, r3
 80001fc:	7bfb      	ldrb	r3, [r7, #15]
 80001fe:	b21b      	sxth	r3, r3
 8000200:	4313      	orrs	r3, r2
 8000202:	b21b      	sxth	r3, r3
 8000204:	b29a      	uxth	r2, r3
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	80da      	strh	r2, [r3, #6]
	bmp->_AC5 = ((uint16_t) data[8] << 8) | data[9];
 800020a:	7c3b      	ldrb	r3, [r7, #16]
 800020c:	021b      	lsls	r3, r3, #8
 800020e:	b21a      	sxth	r2, r3
 8000210:	7c7b      	ldrb	r3, [r7, #17]
 8000212:	b21b      	sxth	r3, r3
 8000214:	4313      	orrs	r3, r2
 8000216:	b21b      	sxth	r3, r3
 8000218:	b29a      	uxth	r2, r3
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	811a      	strh	r2, [r3, #8]
	bmp->_AC6 = ((uint16_t) data[10] << 8) | data[11];
 800021e:	7cbb      	ldrb	r3, [r7, #18]
 8000220:	021b      	lsls	r3, r3, #8
 8000222:	b21a      	sxth	r2, r3
 8000224:	7cfb      	ldrb	r3, [r7, #19]
 8000226:	b21b      	sxth	r3, r3
 8000228:	4313      	orrs	r3, r2
 800022a:	b21b      	sxth	r3, r3
 800022c:	b29a      	uxth	r2, r3
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	815a      	strh	r2, [r3, #10]
	bmp->_B1 = ((int16_t) data[12] << 8) | data[13];
 8000232:	7d3b      	ldrb	r3, [r7, #20]
 8000234:	021b      	lsls	r3, r3, #8
 8000236:	b21a      	sxth	r2, r3
 8000238:	7d7b      	ldrb	r3, [r7, #21]
 800023a:	b21b      	sxth	r3, r3
 800023c:	4313      	orrs	r3, r2
 800023e:	b21a      	sxth	r2, r3
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	819a      	strh	r2, [r3, #12]
	bmp->_B2 = ((int16_t) data[14] << 8) | data[15];
 8000244:	7dbb      	ldrb	r3, [r7, #22]
 8000246:	021b      	lsls	r3, r3, #8
 8000248:	b21a      	sxth	r2, r3
 800024a:	7dfb      	ldrb	r3, [r7, #23]
 800024c:	b21b      	sxth	r3, r3
 800024e:	4313      	orrs	r3, r2
 8000250:	b21a      	sxth	r2, r3
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	81da      	strh	r2, [r3, #14]
	bmp->_MB = ((int16_t) data[16] << 8) | data[17];
 8000256:	7e3b      	ldrb	r3, [r7, #24]
 8000258:	021b      	lsls	r3, r3, #8
 800025a:	b21a      	sxth	r2, r3
 800025c:	7e7b      	ldrb	r3, [r7, #25]
 800025e:	b21b      	sxth	r3, r3
 8000260:	4313      	orrs	r3, r2
 8000262:	b21a      	sxth	r2, r3
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	821a      	strh	r2, [r3, #16]
	bmp->_MC = ((int16_t) data[18] << 8) | data[19];
 8000268:	7ebb      	ldrb	r3, [r7, #26]
 800026a:	021b      	lsls	r3, r3, #8
 800026c:	b21a      	sxth	r2, r3
 800026e:	7efb      	ldrb	r3, [r7, #27]
 8000270:	b21b      	sxth	r3, r3
 8000272:	4313      	orrs	r3, r2
 8000274:	b21a      	sxth	r2, r3
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	825a      	strh	r2, [r3, #18]
	bmp->_MD = ((int16_t) data[20] << 8) | data[21];
 800027a:	7f3b      	ldrb	r3, [r7, #28]
 800027c:	021b      	lsls	r3, r3, #8
 800027e:	b21a      	sxth	r2, r3
 8000280:	7f7b      	ldrb	r3, [r7, #29]
 8000282:	b21b      	sxth	r3, r3
 8000284:	4313      	orrs	r3, r2
 8000286:	b21a      	sxth	r2, r3
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	829a      	strh	r2, [r3, #20]

	return res;
 800028c:	7ffb      	ldrb	r3, [r7, #31]
}
 800028e:	4618      	mov	r0, r3
 8000290:	3720      	adds	r7, #32
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
	...

08000298 <BMP_180_Update>:

HAL_StatusTypeDef BMP_180_Update(Bmp180 *bmp, I2C_HandleTypeDef *i2c) {
 8000298:	b580      	push	{r7, lr}
 800029a:	b098      	sub	sp, #96	; 0x60
 800029c:	af02      	add	r7, sp, #8
 800029e:	6078      	str	r0, [r7, #4]
 80002a0:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef res;

	/*
	 * read temperature
	 */
	uint8_t to_transmit[2] = { BMP_CONTROL, BMP_MODE_TEMPERATURE };
 80002a2:	4bb2      	ldr	r3, [pc, #712]	; (800056c <BMP_180_Update+0x2d4>)
 80002a4:	881b      	ldrh	r3, [r3, #0]
 80002a6:	82bb      	strh	r3, [r7, #20]
	uint8_t receive_data[5] = { 0, 0, 0, 0, 0 };
 80002a8:	f107 030c 	add.w	r3, r7, #12
 80002ac:	2200      	movs	r2, #0
 80002ae:	601a      	str	r2, [r3, #0]
 80002b0:	711a      	strb	r2, [r3, #4]

	uint8_t *msc = &receive_data[0];
 80002b2:	f107 030c 	add.w	r3, r7, #12
 80002b6:	657b      	str	r3, [r7, #84]	; 0x54
	uint8_t *msb = &receive_data[2];
 80002b8:	f107 030c 	add.w	r3, r7, #12
 80002bc:	3302      	adds	r3, #2
 80002be:	653b      	str	r3, [r7, #80]	; 0x50
	uint8_t *lsb = &receive_data[3];
 80002c0:	f107 030c 	add.w	r3, r7, #12
 80002c4:	3303      	adds	r3, #3
 80002c6:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint8_t *xlsb = &receive_data[4];
 80002c8:	f107 030c 	add.w	r3, r7, #12
 80002cc:	3304      	adds	r3, #4
 80002ce:	64bb      	str	r3, [r7, #72]	; 0x48

	// start the measurement
	res = HAL_I2C_Master_Transmit(i2c, BMP_ADDRESS, to_transmit, 2,
 80002d0:	f107 0214 	add.w	r2, r7, #20
 80002d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002d8:	9300      	str	r3, [sp, #0]
 80002da:	2302      	movs	r3, #2
 80002dc:	21ee      	movs	r1, #238	; 0xee
 80002de:	6838      	ldr	r0, [r7, #0]
 80002e0:	f001 fc6e 	bl	8001bc0 <HAL_I2C_Master_Transmit>
 80002e4:	4603      	mov	r3, r0
 80002e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	I2C_TIMEOUT);
	if (res != HAL_OK)
 80002ea:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d002      	beq.n	80002f8 <BMP_180_Update+0x60>
		return res;
 80002f2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80002f6:	e134      	b.n	8000562 <BMP_180_Update+0x2ca>

	do {
		// read result
		res = HAL_I2C_Master_Transmit(i2c, BMP_ADDRESS, to_transmit, 1,
 80002f8:	f107 0214 	add.w	r2, r7, #20
 80002fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000300:	9300      	str	r3, [sp, #0]
 8000302:	2301      	movs	r3, #1
 8000304:	21ee      	movs	r1, #238	; 0xee
 8000306:	6838      	ldr	r0, [r7, #0]
 8000308:	f001 fc5a 	bl	8001bc0 <HAL_I2C_Master_Transmit>
 800030c:	4603      	mov	r3, r0
 800030e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		I2C_TIMEOUT);
		if (res != HAL_OK)
 8000312:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000316:	2b00      	cmp	r3, #0
 8000318:	d002      	beq.n	8000320 <BMP_180_Update+0x88>
			return res;
 800031a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800031e:	e120      	b.n	8000562 <BMP_180_Update+0x2ca>
		res = HAL_I2C_Master_Receive(i2c, BMP_ADDRESS, receive_data, 5,
 8000320:	f107 020c 	add.w	r2, r7, #12
 8000324:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000328:	9300      	str	r3, [sp, #0]
 800032a:	2305      	movs	r3, #5
 800032c:	21ee      	movs	r1, #238	; 0xee
 800032e:	6838      	ldr	r0, [r7, #0]
 8000330:	f001 fd44 	bl	8001dbc <HAL_I2C_Master_Receive>
 8000334:	4603      	mov	r3, r0
 8000336:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		I2C_TIMEOUT);
		if (res != HAL_OK)
 800033a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800033e:	2b00      	cmp	r3, #0
 8000340:	d002      	beq.n	8000348 <BMP_180_Update+0xb0>
			return res;
 8000342:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000346:	e10c      	b.n	8000562 <BMP_180_Update+0x2ca>
	} while ((*msc >> 5) & 0x01);
 8000348:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	095b      	lsrs	r3, r3, #5
 800034e:	b2db      	uxtb	r3, r3
 8000350:	f003 0301 	and.w	r3, r3, #1
 8000354:	2b00      	cmp	r3, #0
 8000356:	d1cf      	bne.n	80002f8 <BMP_180_Update+0x60>
	uint32_t ut = (*msb << 8) + *lsb;
 8000358:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	021b      	lsls	r3, r3, #8
 800035e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000360:	7812      	ldrb	r2, [r2, #0]
 8000362:	4413      	add	r3, r2
 8000364:	643b      	str	r3, [r7, #64]	; 0x40

	/*
	 * read pressure
	 */
	to_transmit[1] = BMP_MODE_PRESSURE;
 8000366:	23f4      	movs	r3, #244	; 0xf4
 8000368:	757b      	strb	r3, [r7, #21]

	// start the measurement
	res = HAL_I2C_Master_Transmit(i2c, BMP_ADDRESS, to_transmit, 2,
 800036a:	f107 0214 	add.w	r2, r7, #20
 800036e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000372:	9300      	str	r3, [sp, #0]
 8000374:	2302      	movs	r3, #2
 8000376:	21ee      	movs	r1, #238	; 0xee
 8000378:	6838      	ldr	r0, [r7, #0]
 800037a:	f001 fc21 	bl	8001bc0 <HAL_I2C_Master_Transmit>
 800037e:	4603      	mov	r3, r0
 8000380:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	I2C_TIMEOUT);
	if (res != HAL_OK)
 8000384:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000388:	2b00      	cmp	r3, #0
 800038a:	d002      	beq.n	8000392 <BMP_180_Update+0xfa>
		return res;
 800038c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000390:	e0e7      	b.n	8000562 <BMP_180_Update+0x2ca>

	do {
		// read result
		res = HAL_I2C_Master_Transmit(i2c, BMP_ADDRESS, to_transmit, 1,
 8000392:	f107 0214 	add.w	r2, r7, #20
 8000396:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800039a:	9300      	str	r3, [sp, #0]
 800039c:	2301      	movs	r3, #1
 800039e:	21ee      	movs	r1, #238	; 0xee
 80003a0:	6838      	ldr	r0, [r7, #0]
 80003a2:	f001 fc0d 	bl	8001bc0 <HAL_I2C_Master_Transmit>
 80003a6:	4603      	mov	r3, r0
 80003a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		I2C_TIMEOUT);
		if (res != HAL_OK)
 80003ac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d002      	beq.n	80003ba <BMP_180_Update+0x122>
			return res;
 80003b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80003b8:	e0d3      	b.n	8000562 <BMP_180_Update+0x2ca>
		res = HAL_I2C_Master_Receive(i2c, BMP_ADDRESS, receive_data, 5,
 80003ba:	f107 020c 	add.w	r2, r7, #12
 80003be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003c2:	9300      	str	r3, [sp, #0]
 80003c4:	2305      	movs	r3, #5
 80003c6:	21ee      	movs	r1, #238	; 0xee
 80003c8:	6838      	ldr	r0, [r7, #0]
 80003ca:	f001 fcf7 	bl	8001dbc <HAL_I2C_Master_Receive>
 80003ce:	4603      	mov	r3, r0
 80003d0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		I2C_TIMEOUT);
		if (res != HAL_OK)
 80003d4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d002      	beq.n	80003e2 <BMP_180_Update+0x14a>
			return res;
 80003dc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80003e0:	e0bf      	b.n	8000562 <BMP_180_Update+0x2ca>
	} while ((*msc >> 5) & 0x01);
 80003e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	095b      	lsrs	r3, r3, #5
 80003e8:	b2db      	uxtb	r3, r3
 80003ea:	f003 0301 	and.w	r3, r3, #1
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d1cf      	bne.n	8000392 <BMP_180_Update+0xfa>

	int32_t up = (((*msb) << 16) + ((*lsb) << 8) + *xlsb) >> (8 - BMP_OSS);
 80003f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	041a      	lsls	r2, r3, #16
 80003f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	021b      	lsls	r3, r3, #8
 80003fe:	4413      	add	r3, r2
 8000400:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000402:	7812      	ldrb	r2, [r2, #0]
 8000404:	4413      	add	r3, r2
 8000406:	63fb      	str	r3, [r7, #60]	; 0x3c

	/*
	 * calculate
	 */
	// true temperature
	int32_t x1 = ((ut - bmp->_AC6) * bmp->_AC5) >> 15;
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	895b      	ldrh	r3, [r3, #10]
 800040c:	461a      	mov	r2, r3
 800040e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000410:	1a9b      	subs	r3, r3, r2
 8000412:	687a      	ldr	r2, [r7, #4]
 8000414:	8912      	ldrh	r2, [r2, #8]
 8000416:	fb02 f303 	mul.w	r3, r2, r3
 800041a:	0bdb      	lsrs	r3, r3, #15
 800041c:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t x2 = (bmp->_MC << 11) / (x1 + bmp->_MD);
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000424:	02da      	lsls	r2, r3, #11
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800042c:	4619      	mov	r1, r3
 800042e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000430:	440b      	add	r3, r1
 8000432:	fb92 f3f3 	sdiv	r3, r2, r3
 8000436:	637b      	str	r3, [r7, #52]	; 0x34
	int32_t b5 = x1 + x2;
 8000438:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800043a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800043c:	4413      	add	r3, r2
 800043e:	633b      	str	r3, [r7, #48]	; 0x30
	bmp->Temperature = (b5 + 8) >> 4;
 8000440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000442:	3308      	adds	r3, #8
 8000444:	111a      	asrs	r2, r3, #4
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	619a      	str	r2, [r3, #24]

	//true pressure
	int32_t b6 = b5 - 4000;
 800044a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800044c:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8000450:	62fb      	str	r3, [r7, #44]	; 0x2c
	x1 = (bmp->_B2 * (b6 * (b6 >> 12))) >> 11;
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000458:	4619      	mov	r1, r3
 800045a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800045c:	131b      	asrs	r3, r3, #12
 800045e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000460:	fb02 f303 	mul.w	r3, r2, r3
 8000464:	fb03 f301 	mul.w	r3, r3, r1
 8000468:	12db      	asrs	r3, r3, #11
 800046a:	63bb      	str	r3, [r7, #56]	; 0x38
	x2 = (bmp->_AC2 * b6) >> 11;
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000472:	461a      	mov	r2, r3
 8000474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000476:	fb03 f302 	mul.w	r3, r3, r2
 800047a:	12db      	asrs	r3, r3, #11
 800047c:	637b      	str	r3, [r7, #52]	; 0x34
	int32_t x3 = x1 + x2;
 800047e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000482:	4413      	add	r3, r2
 8000484:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t b3 = ((((bmp->_AC1 << 2) + x3) << BMP_OSS) + 2) >> 2;
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	f9b3 3000 	ldrsh.w	r3, [r3]
 800048c:	009a      	lsls	r2, r3, #2
 800048e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000490:	4413      	add	r3, r2
 8000492:	021b      	lsls	r3, r3, #8
 8000494:	3302      	adds	r3, #2
 8000496:	109b      	asrs	r3, r3, #2
 8000498:	627b      	str	r3, [r7, #36]	; 0x24
	x1 = (bmp->_AC3 * b6) >> 13;
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80004a0:	461a      	mov	r2, r3
 80004a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004a4:	fb03 f302 	mul.w	r3, r3, r2
 80004a8:	135b      	asrs	r3, r3, #13
 80004aa:	63bb      	str	r3, [r7, #56]	; 0x38
	x2 = (bmp->_B1 * (b6 + (b6 >> 12))) >> 16;
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80004b2:	4619      	mov	r1, r3
 80004b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004b6:	131a      	asrs	r2, r3, #12
 80004b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004ba:	4413      	add	r3, r2
 80004bc:	fb03 f301 	mul.w	r3, r3, r1
 80004c0:	141b      	asrs	r3, r3, #16
 80004c2:	637b      	str	r3, [r7, #52]	; 0x34
	x3 = (x1 + x2 + 2) >> 2;
 80004c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80004c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80004c8:	4413      	add	r3, r2
 80004ca:	3302      	adds	r3, #2
 80004cc:	109b      	asrs	r3, r3, #2
 80004ce:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t b4 = (uint32_t) bmp->_AC4 * (uint32_t) (x3 + 32768) >> 15;
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	88db      	ldrh	r3, [r3, #6]
 80004d4:	461a      	mov	r2, r3
 80004d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004d8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80004dc:	fb03 f302 	mul.w	r3, r3, r2
 80004e0:	0bdb      	lsrs	r3, r3, #15
 80004e2:	623b      	str	r3, [r7, #32]
	uint32_t b7 = (uint32_t) (up - b3) * (50000 >> BMP_OSS);
 80004e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80004e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004e8:	1ad3      	subs	r3, r2, r3
 80004ea:	461a      	mov	r2, r3
 80004ec:	4613      	mov	r3, r2
 80004ee:	005b      	lsls	r3, r3, #1
 80004f0:	4413      	add	r3, r2
 80004f2:	019a      	lsls	r2, r3, #6
 80004f4:	4413      	add	r3, r2
 80004f6:	61fb      	str	r3, [r7, #28]
	int32_t p = (b7 < 0x80000000) ? (b7 << 1) / b4 : (b7 < 1) / b4;
 80004f8:	69fb      	ldr	r3, [r7, #28]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	db05      	blt.n	800050a <BMP_180_Update+0x272>
 80004fe:	69fb      	ldr	r3, [r7, #28]
 8000500:	005a      	lsls	r2, r3, #1
 8000502:	6a3b      	ldr	r3, [r7, #32]
 8000504:	fbb2 f3f3 	udiv	r3, r2, r3
 8000508:	e009      	b.n	800051e <BMP_180_Update+0x286>
 800050a:	69fb      	ldr	r3, [r7, #28]
 800050c:	2b00      	cmp	r3, #0
 800050e:	bf0c      	ite	eq
 8000510:	2301      	moveq	r3, #1
 8000512:	2300      	movne	r3, #0
 8000514:	b2db      	uxtb	r3, r3
 8000516:	461a      	mov	r2, r3
 8000518:	6a3b      	ldr	r3, [r7, #32]
 800051a:	fbb2 f3f3 	udiv	r3, r2, r3
 800051e:	61bb      	str	r3, [r7, #24]
	x1 = (p >> 8);
 8000520:	69bb      	ldr	r3, [r7, #24]
 8000522:	121b      	asrs	r3, r3, #8
 8000524:	63bb      	str	r3, [r7, #56]	; 0x38
	x1 *= x1;
 8000526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000528:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800052a:	fb02 f303 	mul.w	r3, r2, r3
 800052e:	63bb      	str	r3, [r7, #56]	; 0x38
	x1 = (x1 * 3038) >> 16;
 8000530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000532:	f640 32de 	movw	r2, #3038	; 0xbde
 8000536:	fb02 f303 	mul.w	r3, r2, r3
 800053a:	141b      	asrs	r3, r3, #16
 800053c:	63bb      	str	r3, [r7, #56]	; 0x38
	x2 = (-7357 * p) >> 16;
 800053e:	69bb      	ldr	r3, [r7, #24]
 8000540:	4a0b      	ldr	r2, [pc, #44]	; (8000570 <BMP_180_Update+0x2d8>)
 8000542:	fb02 f303 	mul.w	r3, r2, r3
 8000546:	141b      	asrs	r3, r3, #16
 8000548:	637b      	str	r3, [r7, #52]	; 0x34
	bmp->Pressure = p + ((x1 + x2 + 3791) >> 4);
 800054a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800054c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800054e:	4413      	add	r3, r2
 8000550:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8000554:	111a      	asrs	r2, r3, #4
 8000556:	69bb      	ldr	r3, [r7, #24]
 8000558:	441a      	add	r2, r3
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	61da      	str	r2, [r3, #28]
	return res;
 800055e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8000562:	4618      	mov	r0, r3
 8000564:	3758      	adds	r7, #88	; 0x58
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	080044f4 	.word	0x080044f4
 8000570:	ffffe343 	.word	0xffffe343

08000574 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000574:	b590      	push	{r4, r7, lr}
 8000576:	b095      	sub	sp, #84	; 0x54
 8000578:	af12      	add	r7, sp, #72	; 0x48
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800057a:	f000 fe67 	bl	800124c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800057e:	f000 f83f 	bl	8000600 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000582:	f000 f929 	bl	80007d8 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000586:	f000 f8fd 	bl	8000784 <MX_USART1_UART_Init>
	MX_I2C1_Init();
 800058a:	f000 f87f 	bl	800068c <MX_I2C1_Init>
	MX_TIM2_Init();
 800058e:	f000 f8ab 	bl	80006e8 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */

	ssd1306_Init(hi2c1, 0x78);
 8000592:	4c16      	ldr	r4, [pc, #88]	; (80005ec <main+0x78>)
 8000594:	2378      	movs	r3, #120	; 0x78
 8000596:	9311      	str	r3, [sp, #68]	; 0x44
 8000598:	4668      	mov	r0, sp
 800059a:	f104 0310 	add.w	r3, r4, #16
 800059e:	2244      	movs	r2, #68	; 0x44
 80005a0:	4619      	mov	r1, r3
 80005a2:	f003 ff3b 	bl	800441c <memcpy>
 80005a6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80005aa:	f000 f967 	bl	800087c <ssd1306_Init>
	for (uint8_t i = 0; i < 6; ++i) {
 80005ae:	2300      	movs	r3, #0
 80005b0:	71fb      	strb	r3, [r7, #7]
 80005b2:	e00f      	b.n	80005d4 <main+0x60>
		TCA_Set(&hi2c1, (TcaAddress) i);
 80005b4:	79fb      	ldrb	r3, [r7, #7]
 80005b6:	4619      	mov	r1, r3
 80005b8:	480c      	ldr	r0, [pc, #48]	; (80005ec <main+0x78>)
 80005ba:	f000 fdfd 	bl	80011b8 <TCA_Set>
		BMP_180_Init(&bmp[i], &hi2c1);
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	015b      	lsls	r3, r3, #5
 80005c2:	4a0b      	ldr	r2, [pc, #44]	; (80005f0 <main+0x7c>)
 80005c4:	4413      	add	r3, r2
 80005c6:	4909      	ldr	r1, [pc, #36]	; (80005ec <main+0x78>)
 80005c8:	4618      	mov	r0, r3
 80005ca:	f7ff fdc7 	bl	800015c <BMP_180_Init>
	for (uint8_t i = 0; i < 6; ++i) {
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	3301      	adds	r3, #1
 80005d2:	71fb      	strb	r3, [r7, #7]
 80005d4:	79fb      	ldrb	r3, [r7, #7]
 80005d6:	2b05      	cmp	r3, #5
 80005d8:	d9ec      	bls.n	80005b4 <main+0x40>
	}

	HAL_UART_Receive_IT(&huart1, (uint8_t*) requestCode, 1);
 80005da:	2201      	movs	r2, #1
 80005dc:	4905      	ldr	r1, [pc, #20]	; (80005f4 <main+0x80>)
 80005de:	4806      	ldr	r0, [pc, #24]	; (80005f8 <main+0x84>)
 80005e0:	f003 fb30 	bl	8003c44 <HAL_UART_Receive_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 80005e4:	4805      	ldr	r0, [pc, #20]	; (80005fc <main+0x88>)
 80005e6:	f002 feea 	bl	80033be <HAL_TIM_Base_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80005ea:	e7fe      	b.n	80005ea <main+0x76>
 80005ec:	20000558 	.word	0x20000558
 80005f0:	20000498 	.word	0x20000498
 80005f4:	20000034 	.word	0x20000034
 80005f8:	200005ac 	.word	0x200005ac
 80005fc:	200005ec 	.word	0x200005ec

08000600 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b090      	sub	sp, #64	; 0x40
 8000604:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000606:	f107 0318 	add.w	r3, r7, #24
 800060a:	2228      	movs	r2, #40	; 0x28
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f003 ff0f 	bl	8004432 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	60da      	str	r2, [r3, #12]
 8000620:	611a      	str	r2, [r3, #16]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000622:	2301      	movs	r3, #1
 8000624:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000626:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800062a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000630:	2301      	movs	r3, #1
 8000632:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000634:	2302      	movs	r3, #2
 8000636:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000638:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800063c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800063e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000642:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000644:	f107 0318 	add.w	r3, r7, #24
 8000648:	4618      	mov	r0, r3
 800064a:	f002 fa71 	bl	8002b30 <HAL_RCC_OscConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x58>
		Error_Handler();
 8000654:	f000 f90c 	bl	8000870 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000658:	230f      	movs	r3, #15
 800065a:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065c:	2302      	movs	r3, #2
 800065e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000664:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000668:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	2102      	movs	r1, #2
 8000672:	4618      	mov	r0, r3
 8000674:	f002 fcdc 	bl	8003030 <HAL_RCC_ClockConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0x82>
		Error_Handler();
 800067e:	f000 f8f7 	bl	8000870 <Error_Handler>
	}
}
 8000682:	bf00      	nop
 8000684:	3740      	adds	r7, #64	; 0x40
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
	...

0800068c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000690:	4b12      	ldr	r3, [pc, #72]	; (80006dc <MX_I2C1_Init+0x50>)
 8000692:	4a13      	ldr	r2, [pc, #76]	; (80006e0 <MX_I2C1_Init+0x54>)
 8000694:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8000696:	4b11      	ldr	r3, [pc, #68]	; (80006dc <MX_I2C1_Init+0x50>)
 8000698:	4a12      	ldr	r2, [pc, #72]	; (80006e4 <MX_I2C1_Init+0x58>)
 800069a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800069c:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <MX_I2C1_Init+0x50>)
 800069e:	2200      	movs	r2, #0
 80006a0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <MX_I2C1_Init+0x50>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <MX_I2C1_Init+0x50>)
 80006aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ae:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006b0:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <MX_I2C1_Init+0x50>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80006b6:	4b09      	ldr	r3, [pc, #36]	; (80006dc <MX_I2C1_Init+0x50>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006bc:	4b07      	ldr	r3, [pc, #28]	; (80006dc <MX_I2C1_Init+0x50>)
 80006be:	2200      	movs	r2, #0
 80006c0:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <MX_I2C1_Init+0x50>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80006c8:	4804      	ldr	r0, [pc, #16]	; (80006dc <MX_I2C1_Init+0x50>)
 80006ca:	f001 f951 	bl	8001970 <HAL_I2C_Init>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80006d4:	f000 f8cc 	bl	8000870 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000558 	.word	0x20000558
 80006e0:	40005400 	.word	0x40005400
 80006e4:	00061a80 	.word	0x00061a80

080006e8 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b086      	sub	sp, #24
 80006ec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80006ee:	f107 0308 	add.w	r3, r7, #8
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80006fc:	463b      	mov	r3, r7
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000704:	4b1e      	ldr	r3, [pc, #120]	; (8000780 <MX_TIM2_Init+0x98>)
 8000706:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800070a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 7199;
 800070c:	4b1c      	ldr	r3, [pc, #112]	; (8000780 <MX_TIM2_Init+0x98>)
 800070e:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000712:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000714:	4b1a      	ldr	r3, [pc, #104]	; (8000780 <MX_TIM2_Init+0x98>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1999;
 800071a:	4b19      	ldr	r3, [pc, #100]	; (8000780 <MX_TIM2_Init+0x98>)
 800071c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000720:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000722:	4b17      	ldr	r3, [pc, #92]	; (8000780 <MX_TIM2_Init+0x98>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000728:	4b15      	ldr	r3, [pc, #84]	; (8000780 <MX_TIM2_Init+0x98>)
 800072a:	2200      	movs	r2, #0
 800072c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800072e:	4814      	ldr	r0, [pc, #80]	; (8000780 <MX_TIM2_Init+0x98>)
 8000730:	f002 fe1a 	bl	8003368 <HAL_TIM_Base_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_TIM2_Init+0x56>
		Error_Handler();
 800073a:	f000 f899 	bl	8000870 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800073e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000742:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000744:	f107 0308 	add.w	r3, r7, #8
 8000748:	4619      	mov	r1, r3
 800074a:	480d      	ldr	r0, [pc, #52]	; (8000780 <MX_TIM2_Init+0x98>)
 800074c:	f002 ff62 	bl	8003614 <HAL_TIM_ConfigClockSource>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_TIM2_Init+0x72>
		Error_Handler();
 8000756:	f000 f88b 	bl	8000870 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800075a:	2300      	movs	r3, #0
 800075c:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800075e:	2300      	movs	r3, #0
 8000760:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000762:	463b      	mov	r3, r7
 8000764:	4619      	mov	r1, r3
 8000766:	4806      	ldr	r0, [pc, #24]	; (8000780 <MX_TIM2_Init+0x98>)
 8000768:	f003 f930 	bl	80039cc <HAL_TIMEx_MasterConfigSynchronization>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_TIM2_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 8000772:	f000 f87d 	bl	8000870 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	3718      	adds	r7, #24
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	200005ec 	.word	0x200005ec

08000784 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000788:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <MX_USART1_UART_Init+0x4c>)
 800078a:	4a12      	ldr	r2, [pc, #72]	; (80007d4 <MX_USART1_UART_Init+0x50>)
 800078c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 800078e:	4b10      	ldr	r3, [pc, #64]	; (80007d0 <MX_USART1_UART_Init+0x4c>)
 8000790:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000794:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <MX_USART1_UART_Init+0x4c>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <MX_USART1_UART_Init+0x4c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <MX_USART1_UART_Init+0x4c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80007a8:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <MX_USART1_UART_Init+0x4c>)
 80007aa:	220c      	movs	r2, #12
 80007ac:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ae:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <MX_USART1_UART_Init+0x4c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b4:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <MX_USART1_UART_Init+0x4c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80007ba:	4805      	ldr	r0, [pc, #20]	; (80007d0 <MX_USART1_UART_Init+0x4c>)
 80007bc:	f003 f95c 	bl	8003a78 <HAL_UART_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80007c6:	f000 f853 	bl	8000870 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	200005ac 	.word	0x200005ac
 80007d4:	40013800 	.word	0x40013800

080007d8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b088      	sub	sp, #32
 80007dc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80007de:	f107 0310 	add.w	r3, r7, #16
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80007ec:	4b1e      	ldr	r3, [pc, #120]	; (8000868 <MX_GPIO_Init+0x90>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	4a1d      	ldr	r2, [pc, #116]	; (8000868 <MX_GPIO_Init+0x90>)
 80007f2:	f043 0320 	orr.w	r3, r3, #32
 80007f6:	6193      	str	r3, [r2, #24]
 80007f8:	4b1b      	ldr	r3, [pc, #108]	; (8000868 <MX_GPIO_Init+0x90>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	f003 0320 	and.w	r3, r3, #32
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000804:	4b18      	ldr	r3, [pc, #96]	; (8000868 <MX_GPIO_Init+0x90>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	4a17      	ldr	r2, [pc, #92]	; (8000868 <MX_GPIO_Init+0x90>)
 800080a:	f043 0308 	orr.w	r3, r3, #8
 800080e:	6193      	str	r3, [r2, #24]
 8000810:	4b15      	ldr	r3, [pc, #84]	; (8000868 <MX_GPIO_Init+0x90>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	f003 0308 	and.w	r3, r3, #8
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800081c:	4b12      	ldr	r3, [pc, #72]	; (8000868 <MX_GPIO_Init+0x90>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	4a11      	ldr	r2, [pc, #68]	; (8000868 <MX_GPIO_Init+0x90>)
 8000822:	f043 0304 	orr.w	r3, r3, #4
 8000826:	6193      	str	r3, [r2, #24]
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_GPIO_Init+0x90>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	f003 0304 	and.w	r3, r3, #4
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000834:	2201      	movs	r2, #1
 8000836:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800083a:	480c      	ldr	r0, [pc, #48]	; (800086c <MX_GPIO_Init+0x94>)
 800083c:	f001 f868 	bl	8001910 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PB14 */
	GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000840:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000844:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000846:	2301      	movs	r3, #1
 8000848:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	2302      	movs	r3, #2
 8000850:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000852:	f107 0310 	add.w	r3, r7, #16
 8000856:	4619      	mov	r1, r3
 8000858:	4804      	ldr	r0, [pc, #16]	; (800086c <MX_GPIO_Init+0x94>)
 800085a:	f000 feff 	bl	800165c <HAL_GPIO_Init>

}
 800085e:	bf00      	nop
 8000860:	3720      	adds	r7, #32
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40021000 	.word	0x40021000
 800086c:	40010c00 	.word	0x40010c00

08000870 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr

0800087c <ssd1306_Init>:
static uint8_t SSD1306_Buffer[SSD1306_WIDTH * SSD1306_HEIGHT / 8];

// Een scherm-object om lokaal in te werken
static SSD1306_t SSD1306;

int ssd1306_Init(I2C_HandleTypeDef i2c_port, uint8_t address) {
 800087c:	b084      	sub	sp, #16
 800087e:	b5b0      	push	{r4, r5, r7, lr}
 8000880:	b086      	sub	sp, #24
 8000882:	af00      	add	r7, sp, #0
 8000884:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000888:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	SSD1306.I2C_port = i2c_port;
 800088c:	4b19      	ldr	r3, [pc, #100]	; (80008f4 <ssd1306_Init+0x78>)
 800088e:	330c      	adds	r3, #12
 8000890:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000894:	2254      	movs	r2, #84	; 0x54
 8000896:	4618      	mov	r0, r3
 8000898:	f003 fdc0 	bl	800441c <memcpy>
	SSD1306.Address = address;
 800089c:	4a15      	ldr	r2, [pc, #84]	; (80008f4 <ssd1306_Init+0x78>)
 800089e:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 80008a2:	7213      	strb	r3, [r2, #8]
	// Waiting for SEG/COM ON after reset
	HAL_Delay(100);
 80008a4:	2064      	movs	r0, #100	; 0x64
 80008a6:	f000 fd33 	bl	8001310 <HAL_Delay>
	// Initialize LCD
	uint8_t init_data[] = { 0xAE, 0xA6, 0x20, 0x00, 0x21, 0x00, 0x7F, 0x22,
 80008aa:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <ssd1306_Init+0x7c>)
 80008ac:	1d3c      	adds	r4, r7, #4
 80008ae:	461d      	mov	r5, r3
 80008b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008b4:	682b      	ldr	r3, [r5, #0]
 80008b6:	461a      	mov	r2, r3
 80008b8:	8022      	strh	r2, [r4, #0]
 80008ba:	3402      	adds	r4, #2
 80008bc:	0c1b      	lsrs	r3, r3, #16
 80008be:	7023      	strb	r3, [r4, #0]
	// 0xC8 - COM scan direction (horizontal mirroring)
	// 0xA8, 0x3F - multiplex ratio
	// 0x81, 0x7F - contrast ratio 127
	// 0x8D, 0x14 - enable charge pump
	// 0xAF - display on (only just after enabling charge pump)
	ssd1306_SendToDisplay(Commands, init_data, sizeof(init_data));
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	2213      	movs	r2, #19
 80008c4:	4619      	mov	r1, r3
 80008c6:	2000      	movs	r0, #0
 80008c8:	f000 f952 	bl	8000b70 <ssd1306_SendToDisplay>
	// clearing screen
	ssd1306_Fill(Black);
 80008cc:	2000      	movs	r0, #0
 80008ce:	f000 f815 	bl	80008fc <ssd1306_Fill>
	ssd1306_UpdateScreen();
 80008d2:	f000 f835 	bl	8000940 <ssd1306_UpdateScreen>
	// setting default position
	SSD1306.CurrentX = 0;
 80008d6:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <ssd1306_Init+0x78>)
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80008dc:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <ssd1306_Init+0x78>)
 80008de:	2200      	movs	r2, #0
 80008e0:	605a      	str	r2, [r3, #4]
}
 80008e2:	bf00      	nop
 80008e4:	4618      	mov	r0, r3
 80008e6:	3718      	adds	r7, #24
 80008e8:	46bd      	mov	sp, r7
 80008ea:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80008ee:	b004      	add	sp, #16
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	20000438 	.word	0x20000438
 80008f8:	080044f8 	.word	0x080044f8

080008fc <ssd1306_Fill>:

void ssd1306_Fill(SSD1306_COLOR color) {
 80008fc:	b480      	push	{r7}
 80008fe:	b085      	sub	sp, #20
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	71fb      	strb	r3, [r7, #7]
	uint8_t toBuffer = 0x00; // black
 8000906:	2300      	movs	r3, #0
 8000908:	73fb      	strb	r3, [r7, #15]
	if (color == White) {
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d101      	bne.n	8000914 <ssd1306_Fill+0x18>
		toBuffer = 0xFF; // white
 8000910:	23ff      	movs	r3, #255	; 0xff
 8000912:	73fb      	strb	r3, [r7, #15]
	}
	for (uint32_t i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000914:	2300      	movs	r3, #0
 8000916:	60bb      	str	r3, [r7, #8]
 8000918:	e007      	b.n	800092a <ssd1306_Fill+0x2e>
		SSD1306_Buffer[i] = toBuffer;
 800091a:	4a08      	ldr	r2, [pc, #32]	; (800093c <ssd1306_Fill+0x40>)
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	4413      	add	r3, r2
 8000920:	7bfa      	ldrb	r2, [r7, #15]
 8000922:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	3301      	adds	r3, #1
 8000928:	60bb      	str	r3, [r7, #8]
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000930:	d3f3      	bcc.n	800091a <ssd1306_Fill+0x1e>
	}
}
 8000932:	bf00      	nop
 8000934:	3714      	adds	r7, #20
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr
 800093c:	20000038 	.word	0x20000038

08000940 <ssd1306_UpdateScreen>:

void ssd1306_UpdateScreen(void) {
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
	uint8_t update_region_data[6] = { 0x21, 0x00, 0x7F, 0x22, 0x00, 0x07 };
 8000946:	4a11      	ldr	r2, [pc, #68]	; (800098c <ssd1306_UpdateScreen+0x4c>)
 8000948:	1d3b      	adds	r3, r7, #4
 800094a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800094e:	6018      	str	r0, [r3, #0]
 8000950:	3304      	adds	r3, #4
 8000952:	8019      	strh	r1, [r3, #0]
	//0x21, 0x00, 0x7F - column address from 0 to 127
	//0x22, 0x00, 0x07 - page address from 0 to 7
	ssd1306_SendToDisplay(Commands, update_region_data, 6);
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	2206      	movs	r2, #6
 8000958:	4619      	mov	r1, r3
 800095a:	2000      	movs	r0, #0
 800095c:	f000 f908 	bl	8000b70 <ssd1306_SendToDisplay>

	//update pages from 0 to 7
	for (uint32_t page = 0; page < 8; page++) {
 8000960:	2300      	movs	r3, #0
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	e00b      	b.n	800097e <ssd1306_UpdateScreen+0x3e>
		ssd1306_SendToDisplay(Datas, &SSD1306_Buffer[SSD1306_WIDTH * page],
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	01db      	lsls	r3, r3, #7
 800096a:	4a09      	ldr	r2, [pc, #36]	; (8000990 <ssd1306_UpdateScreen+0x50>)
 800096c:	4413      	add	r3, r2
 800096e:	2280      	movs	r2, #128	; 0x80
 8000970:	4619      	mov	r1, r3
 8000972:	2040      	movs	r0, #64	; 0x40
 8000974:	f000 f8fc 	bl	8000b70 <ssd1306_SendToDisplay>
	for (uint32_t page = 0; page < 8; page++) {
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	3301      	adds	r3, #1
 800097c:	60fb      	str	r3, [r7, #12]
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	2b07      	cmp	r3, #7
 8000982:	d9f0      	bls.n	8000966 <ssd1306_UpdateScreen+0x26>
				SSD1306_WIDTH);
	}
}
 8000984:	bf00      	nop
 8000986:	3710      	adds	r7, #16
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	0800450c 	.word	0x0800450c
 8000990:	20000038 	.word	0x20000038

08000994 <ssd1306_DrawPixel>:

void ssd1306_DrawPixel(uint32_t x, uint32_t y, SSD1306_COLOR color) {
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	4613      	mov	r3, r2
 80009a0:	71fb      	strb	r3, [r7, #7]
	if ((x < SSD1306_WIDTH) && (y < SSD1306_HEIGHT)) {
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	2b7f      	cmp	r3, #127	; 0x7f
 80009a6:	d836      	bhi.n	8000a16 <ssd1306_DrawPixel+0x82>
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	2b3f      	cmp	r3, #63	; 0x3f
 80009ac:	d833      	bhi.n	8000a16 <ssd1306_DrawPixel+0x82>
		if (color == White) {
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d117      	bne.n	80009e4 <ssd1306_DrawPixel+0x50>
			SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	08db      	lsrs	r3, r3, #3
 80009b8:	01d9      	lsls	r1, r3, #7
 80009ba:	68fa      	ldr	r2, [r7, #12]
 80009bc:	440a      	add	r2, r1
 80009be:	4918      	ldr	r1, [pc, #96]	; (8000a20 <ssd1306_DrawPixel+0x8c>)
 80009c0:	5c8a      	ldrb	r2, [r1, r2]
 80009c2:	b251      	sxtb	r1, r2
 80009c4:	68ba      	ldr	r2, [r7, #8]
 80009c6:	f002 0207 	and.w	r2, r2, #7
 80009ca:	2001      	movs	r0, #1
 80009cc:	fa00 f202 	lsl.w	r2, r0, r2
 80009d0:	b252      	sxtb	r2, r2
 80009d2:	430a      	orrs	r2, r1
 80009d4:	b251      	sxtb	r1, r2
 80009d6:	01da      	lsls	r2, r3, #7
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	4413      	add	r3, r2
 80009dc:	b2c9      	uxtb	r1, r1
 80009de:	4a10      	ldr	r2, [pc, #64]	; (8000a20 <ssd1306_DrawPixel+0x8c>)
 80009e0:	54d1      	strb	r1, [r2, r3]
		} else {
			SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
		}
	}
}
 80009e2:	e018      	b.n	8000a16 <ssd1306_DrawPixel+0x82>
			SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	08db      	lsrs	r3, r3, #3
 80009e8:	01d9      	lsls	r1, r3, #7
 80009ea:	68fa      	ldr	r2, [r7, #12]
 80009ec:	440a      	add	r2, r1
 80009ee:	490c      	ldr	r1, [pc, #48]	; (8000a20 <ssd1306_DrawPixel+0x8c>)
 80009f0:	5c8a      	ldrb	r2, [r1, r2]
 80009f2:	b251      	sxtb	r1, r2
 80009f4:	68ba      	ldr	r2, [r7, #8]
 80009f6:	f002 0207 	and.w	r2, r2, #7
 80009fa:	2001      	movs	r0, #1
 80009fc:	fa00 f202 	lsl.w	r2, r0, r2
 8000a00:	b252      	sxtb	r2, r2
 8000a02:	43d2      	mvns	r2, r2
 8000a04:	b252      	sxtb	r2, r2
 8000a06:	400a      	ands	r2, r1
 8000a08:	b251      	sxtb	r1, r2
 8000a0a:	01da      	lsls	r2, r3, #7
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	4413      	add	r3, r2
 8000a10:	b2c9      	uxtb	r1, r1
 8000a12:	4a03      	ldr	r2, [pc, #12]	; (8000a20 <ssd1306_DrawPixel+0x8c>)
 8000a14:	54d1      	strb	r1, [r2, r3]
}
 8000a16:	bf00      	nop
 8000a18:	3714      	adds	r7, #20
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bc80      	pop	{r7}
 8000a1e:	4770      	bx	lr
 8000a20:	20000038 	.word	0x20000038

08000a24 <ssd1306_WriteChar>:

void ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000a24:	b590      	push	{r4, r7, lr}
 8000a26:	b089      	sub	sp, #36	; 0x24
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4604      	mov	r4, r0
 8000a2c:	4638      	mov	r0, r7
 8000a2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000a32:	4623      	mov	r3, r4
 8000a34:	73fb      	strb	r3, [r7, #15]
	uint32_t pixel, x;

	if ((((SSD1306.CurrentX + Font.FontWidth) < SSD1306_WIDTH)
 8000a36:	4b36      	ldr	r3, [pc, #216]	; (8000b10 <ssd1306_WriteChar+0xec>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	783a      	ldrb	r2, [r7, #0]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	2b7f      	cmp	r3, #127	; 0x7f
 8000a40:	d85c      	bhi.n	8000afc <ssd1306_WriteChar+0xd8>
			&& ((SSD1306.CurrentY + Font.FontHeight) < SSD1306_HEIGHT))) {
 8000a42:	4b33      	ldr	r3, [pc, #204]	; (8000b10 <ssd1306_WriteChar+0xec>)
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	787a      	ldrb	r2, [r7, #1]
 8000a48:	4413      	add	r3, r2
 8000a4a:	2b3f      	cmp	r3, #63	; 0x3f
 8000a4c:	d856      	bhi.n	8000afc <ssd1306_WriteChar+0xd8>
		// write char to display buffer
		for (uint32_t y = 0; y < Font.FontHeight; y++) {
 8000a4e:	2300      	movs	r3, #0
 8000a50:	617b      	str	r3, [r7, #20]
 8000a52:	e04e      	b.n	8000af2 <ssd1306_WriteChar+0xce>
			// get font pixel
			if (ch < 127)
 8000a54:	7bfb      	ldrb	r3, [r7, #15]
 8000a56:	2b7e      	cmp	r3, #126	; 0x7e
 8000a58:	d80c      	bhi.n	8000a74 <ssd1306_WriteChar+0x50>
				pixel = Font.fontEn[(ch - 32) * Font.FontHeight + y];
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	7bfb      	ldrb	r3, [r7, #15]
 8000a5e:	3b20      	subs	r3, #32
 8000a60:	7879      	ldrb	r1, [r7, #1]
 8000a62:	fb01 f303 	mul.w	r3, r1, r3
 8000a66:	4619      	mov	r1, r3
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	440b      	add	r3, r1
 8000a6c:	4413      	add	r3, r2
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	61fb      	str	r3, [r7, #28]
 8000a72:	e00b      	b.n	8000a8c <ssd1306_WriteChar+0x68>
			else
				pixel = Font.fontRu[(ch - 192) * Font.FontHeight + y];
 8000a74:	68ba      	ldr	r2, [r7, #8]
 8000a76:	7bfb      	ldrb	r3, [r7, #15]
 8000a78:	3bc0      	subs	r3, #192	; 0xc0
 8000a7a:	7879      	ldrb	r1, [r7, #1]
 8000a7c:	fb01 f303 	mul.w	r3, r1, r3
 8000a80:	4619      	mov	r1, r3
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	440b      	add	r3, r1
 8000a86:	4413      	add	r3, r2
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	61fb      	str	r3, [r7, #28]
			// write pixel to display buffer
			x = Font.FontWidth;
 8000a8c:	783b      	ldrb	r3, [r7, #0]
 8000a8e:	61bb      	str	r3, [r7, #24]
			while (x--) {
 8000a90:	e027      	b.n	8000ae2 <ssd1306_WriteChar+0xbe>
				if (pixel & 0x0001) {
 8000a92:	69fb      	ldr	r3, [r7, #28]
 8000a94:	f003 0301 	and.w	r3, r3, #1
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d00d      	beq.n	8000ab8 <ssd1306_WriteChar+0x94>
					ssd1306_DrawPixel(SSD1306.CurrentX + x,
 8000a9c:	4b1c      	ldr	r3, [pc, #112]	; (8000b10 <ssd1306_WriteChar+0xec>)
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	69bb      	ldr	r3, [r7, #24]
 8000aa2:	18d0      	adds	r0, r2, r3
							(SSD1306.CurrentY + y), color);
 8000aa4:	4b1a      	ldr	r3, [pc, #104]	; (8000b10 <ssd1306_WriteChar+0xec>)
 8000aa6:	685a      	ldr	r2, [r3, #4]
					ssd1306_DrawPixel(SSD1306.CurrentX + x,
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	4413      	add	r3, r2
 8000aac:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	f7ff ff6f 	bl	8000994 <ssd1306_DrawPixel>
 8000ab6:	e011      	b.n	8000adc <ssd1306_WriteChar+0xb8>
				} else {
					ssd1306_DrawPixel(SSD1306.CurrentX + x,
 8000ab8:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <ssd1306_WriteChar+0xec>)
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	69bb      	ldr	r3, [r7, #24]
 8000abe:	18d0      	adds	r0, r2, r3
							(SSD1306.CurrentY + y), !color);
 8000ac0:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <ssd1306_WriteChar+0xec>)
 8000ac2:	685a      	ldr	r2, [r3, #4]
					ssd1306_DrawPixel(SSD1306.CurrentX + x,
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	18d1      	adds	r1, r2, r3
 8000ac8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	bf0c      	ite	eq
 8000ad0:	2301      	moveq	r3, #1
 8000ad2:	2300      	movne	r3, #0
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	f7ff ff5c 	bl	8000994 <ssd1306_DrawPixel>
				}
				pixel >>= 1;
 8000adc:	69fb      	ldr	r3, [r7, #28]
 8000ade:	085b      	lsrs	r3, r3, #1
 8000ae0:	61fb      	str	r3, [r7, #28]
			while (x--) {
 8000ae2:	69bb      	ldr	r3, [r7, #24]
 8000ae4:	1e5a      	subs	r2, r3, #1
 8000ae6:	61ba      	str	r2, [r7, #24]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d1d2      	bne.n	8000a92 <ssd1306_WriteChar+0x6e>
		for (uint32_t y = 0; y < Font.FontHeight; y++) {
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	3301      	adds	r3, #1
 8000af0:	617b      	str	r3, [r7, #20]
 8000af2:	787b      	ldrb	r3, [r7, #1]
 8000af4:	461a      	mov	r2, r3
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d3ab      	bcc.n	8000a54 <ssd1306_WriteChar+0x30>
			}
		}
	}

	// going to next position
	SSD1306.CurrentX += Font.FontWidth;
 8000afc:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <ssd1306_WriteChar+0xec>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	783a      	ldrb	r2, [r7, #0]
 8000b02:	4413      	add	r3, r2
 8000b04:	4a02      	ldr	r2, [pc, #8]	; (8000b10 <ssd1306_WriteChar+0xec>)
 8000b06:	6013      	str	r3, [r2, #0]
}
 8000b08:	bf00      	nop
 8000b0a:	3724      	adds	r7, #36	; 0x24
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd90      	pop	{r4, r7, pc}
 8000b10:	20000438 	.word	0x20000438

08000b14 <ssd1306_WriteString>:

void ssd1306_WriteString(char *str, FontDef Font, SSD1306_COLOR color) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b086      	sub	sp, #24
 8000b18:	af02      	add	r7, sp, #8
 8000b1a:	60f8      	str	r0, [r7, #12]
 8000b1c:	4638      	mov	r0, r7
 8000b1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	// We schrijven alle char tot een nulbyte
	while (*str) {
 8000b22:	e00a      	b.n	8000b3a <ssd1306_WriteString+0x26>
		ssd1306_WriteChar(*str, Font, color);
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	7818      	ldrb	r0, [r3, #0]
 8000b28:	7e3b      	ldrb	r3, [r7, #24]
 8000b2a:	9300      	str	r3, [sp, #0]
 8000b2c:	463b      	mov	r3, r7
 8000b2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b30:	f7ff ff78 	bl	8000a24 <ssd1306_WriteChar>

		// Volgende char
		str++;
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	3301      	adds	r3, #1
 8000b38:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d1f0      	bne.n	8000b24 <ssd1306_WriteString+0x10>
	}

}
 8000b42:	bf00      	nop
 8000b44:	3710      	adds	r7, #16
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
	...

08000b4c <ssd1306_SetCursor>:

void ssd1306_SetCursor(uint32_t x, uint32_t y) {
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	6039      	str	r1, [r7, #0]
	SSD1306.CurrentX = x;
 8000b56:	4a05      	ldr	r2, [pc, #20]	; (8000b6c <ssd1306_SetCursor+0x20>)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6013      	str	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000b5c:	4a03      	ldr	r2, [pc, #12]	; (8000b6c <ssd1306_SetCursor+0x20>)
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	6053      	str	r3, [r2, #4]
}
 8000b62:	bf00      	nop
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bc80      	pop	{r7}
 8000b6a:	4770      	bx	lr
 8000b6c:	20000438 	.word	0x20000438

08000b70 <ssd1306_SendToDisplay>:
	//and send to display
	ssd1306_SendToDisplay(Commands, contrast_data, 2);
}

static void ssd1306_SendToDisplay(SSD1306_DATA_TYPE type, uint8_t *data,
		uint8_t length) {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af04      	add	r7, sp, #16
 8000b76:	4603      	mov	r3, r0
 8000b78:	6039      	str	r1, [r7, #0]
 8000b7a:	71fb      	strb	r3, [r7, #7]
 8000b7c:	4613      	mov	r3, r2
 8000b7e:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&(SSD1306.I2C_port), SSD1306.Address, type, 1, data,
 8000b80:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <ssd1306_SendToDisplay+0x3c>)
 8000b82:	7a1b      	ldrb	r3, [r3, #8]
 8000b84:	b299      	uxth	r1, r3
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	b298      	uxth	r0, r3
 8000b8a:	79bb      	ldrb	r3, [r7, #6]
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	220a      	movs	r2, #10
 8000b90:	9202      	str	r2, [sp, #8]
 8000b92:	9301      	str	r3, [sp, #4]
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	9300      	str	r3, [sp, #0]
 8000b98:	2301      	movs	r3, #1
 8000b9a:	4602      	mov	r2, r0
 8000b9c:	4804      	ldr	r0, [pc, #16]	; (8000bb0 <ssd1306_SendToDisplay+0x40>)
 8000b9e:	f001 fb3b 	bl	8002218 <HAL_I2C_Mem_Write>
			length, 10);
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000438 	.word	0x20000438
 8000bb0:	20000444 	.word	0x20000444

08000bb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bba:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <HAL_MspInit+0x5c>)
 8000bbc:	699b      	ldr	r3, [r3, #24]
 8000bbe:	4a14      	ldr	r2, [pc, #80]	; (8000c10 <HAL_MspInit+0x5c>)
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	6193      	str	r3, [r2, #24]
 8000bc6:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <HAL_MspInit+0x5c>)
 8000bc8:	699b      	ldr	r3, [r3, #24]
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	60bb      	str	r3, [r7, #8]
 8000bd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd2:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <HAL_MspInit+0x5c>)
 8000bd4:	69db      	ldr	r3, [r3, #28]
 8000bd6:	4a0e      	ldr	r2, [pc, #56]	; (8000c10 <HAL_MspInit+0x5c>)
 8000bd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bdc:	61d3      	str	r3, [r2, #28]
 8000bde:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <HAL_MspInit+0x5c>)
 8000be0:	69db      	ldr	r3, [r3, #28]
 8000be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000bea:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <HAL_MspInit+0x60>)
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <HAL_MspInit+0x60>)
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c06:	bf00      	nop
 8000c08:	3714      	adds	r7, #20
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc80      	pop	{r7}
 8000c0e:	4770      	bx	lr
 8000c10:	40021000 	.word	0x40021000
 8000c14:	40010000 	.word	0x40010000

08000c18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b088      	sub	sp, #32
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 0310 	add.w	r3, r7, #16
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a15      	ldr	r2, [pc, #84]	; (8000c88 <HAL_I2C_MspInit+0x70>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d123      	bne.n	8000c80 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c38:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <HAL_I2C_MspInit+0x74>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	4a13      	ldr	r2, [pc, #76]	; (8000c8c <HAL_I2C_MspInit+0x74>)
 8000c3e:	f043 0308 	orr.w	r3, r3, #8
 8000c42:	6193      	str	r3, [r2, #24]
 8000c44:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <HAL_I2C_MspInit+0x74>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	f003 0308 	and.w	r3, r3, #8
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c50:	23c0      	movs	r3, #192	; 0xc0
 8000c52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c54:	2312      	movs	r3, #18
 8000c56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c58:	2303      	movs	r3, #3
 8000c5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5c:	f107 0310 	add.w	r3, r7, #16
 8000c60:	4619      	mov	r1, r3
 8000c62:	480b      	ldr	r0, [pc, #44]	; (8000c90 <HAL_I2C_MspInit+0x78>)
 8000c64:	f000 fcfa 	bl	800165c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c68:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <HAL_I2C_MspInit+0x74>)
 8000c6a:	69db      	ldr	r3, [r3, #28]
 8000c6c:	4a07      	ldr	r2, [pc, #28]	; (8000c8c <HAL_I2C_MspInit+0x74>)
 8000c6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c72:	61d3      	str	r3, [r2, #28]
 8000c74:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <HAL_I2C_MspInit+0x74>)
 8000c76:	69db      	ldr	r3, [r3, #28]
 8000c78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c7c:	60bb      	str	r3, [r7, #8]
 8000c7e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c80:	bf00      	nop
 8000c82:	3720      	adds	r7, #32
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40005400 	.word	0x40005400
 8000c8c:	40021000 	.word	0x40021000
 8000c90:	40010c00 	.word	0x40010c00

08000c94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ca4:	d113      	bne.n	8000cce <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ca6:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <HAL_TIM_Base_MspInit+0x44>)
 8000ca8:	69db      	ldr	r3, [r3, #28]
 8000caa:	4a0b      	ldr	r2, [pc, #44]	; (8000cd8 <HAL_TIM_Base_MspInit+0x44>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	61d3      	str	r3, [r2, #28]
 8000cb2:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <HAL_TIM_Base_MspInit+0x44>)
 8000cb4:	69db      	ldr	r3, [r3, #28]
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	201c      	movs	r0, #28
 8000cc4:	f000 fc1d 	bl	8001502 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000cc8:	201c      	movs	r0, #28
 8000cca:	f000 fc36 	bl	800153a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000cce:	bf00      	nop
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40021000 	.word	0x40021000

08000cdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b088      	sub	sp, #32
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	f107 0310 	add.w	r3, r7, #16
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a20      	ldr	r2, [pc, #128]	; (8000d78 <HAL_UART_MspInit+0x9c>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d139      	bne.n	8000d70 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cfc:	4b1f      	ldr	r3, [pc, #124]	; (8000d7c <HAL_UART_MspInit+0xa0>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	4a1e      	ldr	r2, [pc, #120]	; (8000d7c <HAL_UART_MspInit+0xa0>)
 8000d02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d06:	6193      	str	r3, [r2, #24]
 8000d08:	4b1c      	ldr	r3, [pc, #112]	; (8000d7c <HAL_UART_MspInit+0xa0>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d14:	4b19      	ldr	r3, [pc, #100]	; (8000d7c <HAL_UART_MspInit+0xa0>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	4a18      	ldr	r2, [pc, #96]	; (8000d7c <HAL_UART_MspInit+0xa0>)
 8000d1a:	f043 0304 	orr.w	r3, r3, #4
 8000d1e:	6193      	str	r3, [r2, #24]
 8000d20:	4b16      	ldr	r3, [pc, #88]	; (8000d7c <HAL_UART_MspInit+0xa0>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	f003 0304 	and.w	r3, r3, #4
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d32:	2302      	movs	r3, #2
 8000d34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d36:	2303      	movs	r3, #3
 8000d38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3a:	f107 0310 	add.w	r3, r7, #16
 8000d3e:	4619      	mov	r1, r3
 8000d40:	480f      	ldr	r0, [pc, #60]	; (8000d80 <HAL_UART_MspInit+0xa4>)
 8000d42:	f000 fc8b 	bl	800165c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d54:	f107 0310 	add.w	r3, r7, #16
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4809      	ldr	r0, [pc, #36]	; (8000d80 <HAL_UART_MspInit+0xa4>)
 8000d5c:	f000 fc7e 	bl	800165c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d60:	2200      	movs	r2, #0
 8000d62:	2100      	movs	r1, #0
 8000d64:	2025      	movs	r0, #37	; 0x25
 8000d66:	f000 fbcc 	bl	8001502 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d6a:	2025      	movs	r0, #37	; 0x25
 8000d6c:	f000 fbe5 	bl	800153a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d70:	bf00      	nop
 8000d72:	3720      	adds	r7, #32
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40013800 	.word	0x40013800
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	40010800 	.word	0x40010800

08000d84 <transmit>:
extern Bmp180 bmp[6];
extern I2C_HandleTypeDef hi2c1;
uint8_t package[8];
char alphabet[] = "ABCDEFG";

void transmit(uint64_t data) {
 8000d84:	b590      	push	{r4, r7, lr}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	e9c7 0100 	strd	r0, r1, [r7]
	for (uint8_t i = 0; i < 8; ++i) {
 8000d8e:	2300      	movs	r3, #0
 8000d90:	73fb      	strb	r3, [r7, #15]
 8000d92:	e012      	b.n	8000dba <transmit+0x36>
		package[i] = (uint8_t) data;
 8000d94:	7bfb      	ldrb	r3, [r7, #15]
 8000d96:	7839      	ldrb	r1, [r7, #0]
 8000d98:	4a0f      	ldr	r2, [pc, #60]	; (8000dd8 <transmit+0x54>)
 8000d9a:	54d1      	strb	r1, [r2, r3]
		data >>= 8;
 8000d9c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000da0:	f04f 0300 	mov.w	r3, #0
 8000da4:	f04f 0400 	mov.w	r4, #0
 8000da8:	0a0b      	lsrs	r3, r1, #8
 8000daa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000dae:	0a14      	lsrs	r4, r2, #8
 8000db0:	e9c7 3400 	strd	r3, r4, [r7]
	for (uint8_t i = 0; i < 8; ++i) {
 8000db4:	7bfb      	ldrb	r3, [r7, #15]
 8000db6:	3301      	adds	r3, #1
 8000db8:	73fb      	strb	r3, [r7, #15]
 8000dba:	7bfb      	ldrb	r3, [r7, #15]
 8000dbc:	2b07      	cmp	r3, #7
 8000dbe:	d9e9      	bls.n	8000d94 <transmit+0x10>
	}
	HAL_UART_Transmit(&huart1, (uint8_t*) package, 8, 0xFFFF);
 8000dc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dc4:	2208      	movs	r2, #8
 8000dc6:	4904      	ldr	r1, [pc, #16]	; (8000dd8 <transmit+0x54>)
 8000dc8:	4804      	ldr	r0, [pc, #16]	; (8000ddc <transmit+0x58>)
 8000dca:	f002 fea2 	bl	8003b12 <HAL_UART_Transmit>
}
 8000dce:	bf00      	nop
 8000dd0:	3714      	adds	r7, #20
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd90      	pop	{r4, r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	2000062c 	.word	0x2000062c
 8000ddc:	200005ac 	.word	0x200005ac

08000de0 <case0>:

void case0() {
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
	transmit(500);
 8000de4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000de8:	f04f 0100 	mov.w	r1, #0
 8000dec:	f7ff ffca 	bl	8000d84 <transmit>
}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <case1>:

void case1() {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	transmit(91000);
 8000df8:	4803      	ldr	r0, [pc, #12]	; (8000e08 <case1+0x14>)
 8000dfa:	f04f 0100 	mov.w	r1, #0
 8000dfe:	f7ff ffc1 	bl	8000d84 <transmit>
}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	00016378 	.word	0x00016378

08000e0c <case2>:

void case2() {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
	transmit(92000);
 8000e10:	4803      	ldr	r0, [pc, #12]	; (8000e20 <case2+0x14>)
 8000e12:	f04f 0100 	mov.w	r1, #0
 8000e16:	f7ff ffb5 	bl	8000d84 <transmit>
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	00016760 	.word	0x00016760

08000e24 <case3>:

void case3() {
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
	transmit(93000);
 8000e28:	4803      	ldr	r0, [pc, #12]	; (8000e38 <case3+0x14>)
 8000e2a:	f04f 0100 	mov.w	r1, #0
 8000e2e:	f7ff ffa9 	bl	8000d84 <transmit>
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	00016b48 	.word	0x00016b48

08000e3c <case4>:

void case4() {
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
	transmit(94000);
 8000e40:	4803      	ldr	r0, [pc, #12]	; (8000e50 <case4+0x14>)
 8000e42:	f04f 0100 	mov.w	r1, #0
 8000e46:	f7ff ff9d 	bl	8000d84 <transmit>
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	00016f30 	.word	0x00016f30

08000e54 <case5>:

void case5() {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
	transmit(95000);
 8000e58:	4803      	ldr	r0, [pc, #12]	; (8000e68 <case5+0x14>)
 8000e5a:	f04f 0100 	mov.w	r1, #0
 8000e5e:	f7ff ff91 	bl	8000d84 <transmit>
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	00017318 	.word	0x00017318

08000e6c <case6>:

void case6() {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
	transmit(96000);
 8000e70:	4803      	ldr	r0, [pc, #12]	; (8000e80 <case6+0x14>)
 8000e72:	f04f 0100 	mov.w	r1, #0
 8000e76:	f7ff ff85 	bl	8000d84 <transmit>
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	00017700 	.word	0x00017700

08000e84 <caseDefault>:

void caseDefault() {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
	transmit(-1);
 8000e88:	f04f 30ff 	mov.w	r0, #4294967295
 8000e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e90:	f7ff ff78 	bl	8000d84 <transmit>
}
 8000e94:	bf00      	nop
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <NMI_Handler>:
/*           Cortex-M3 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */

	/* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr

08000ea4 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000eae:	4802      	ldr	r0, [pc, #8]	; (8000eb8 <HardFault_Handler+0x14>)
 8000eb0:	f000 fd2e 	bl	8001910 <HAL_GPIO_WritePin>
	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8000eb4:	e7fe      	b.n	8000eb4 <HardFault_Handler+0x10>
 8000eb6:	bf00      	nop
 8000eb8:	40010c00 	.word	0x40010c00

08000ebc <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8000ec0:	e7fe      	b.n	8000ec0 <MemManage_Handler+0x4>

08000ec2 <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8000ec6:	e7fe      	b.n	8000ec6 <BusFault_Handler+0x4>

08000ec8 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8000ecc:	e7fe      	b.n	8000ecc <UsageFault_Handler+0x4>

08000ece <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bc80      	pop	{r7}
 8000ed8:	4770      	bx	lr

08000eda <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bc80      	pop	{r7}
 8000ee4:	4770      	bx	lr

08000ee6 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bc80      	pop	{r7}
 8000ef0:	4770      	bx	lr

08000ef2 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8000ef6:	f000 f9ef 	bl	80012d8 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
	...

08000f00 <TIM2_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles TIM2 global interrupt.
 */
void TIM2_IRQHandler(void) {
 8000f00:	b590      	push	{r4, r7, lr}
 8000f02:	b09f      	sub	sp, #124	; 0x7c
 8000f04:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN TIM2_IRQn 0 */

	/* USER CODE END TIM2_IRQn 0 */
	HAL_TIM_IRQHandler(&htim2);
 8000f06:	4869      	ldr	r0, [pc, #420]	; (80010ac <TIM2_IRQHandler+0x1ac>)
 8000f08:	f002 fa7c 	bl	8003404 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM2_IRQn 1 */

	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000f0c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f10:	4867      	ldr	r0, [pc, #412]	; (80010b0 <TIM2_IRQHandler+0x1b0>)
 8000f12:	f000 fd15 	bl	8001940 <HAL_GPIO_TogglePin>
	ssd1306_Fill(Black);
 8000f16:	2000      	movs	r0, #0
 8000f18:	f7ff fcf0 	bl	80008fc <ssd1306_Fill>
	char info[6][17] = { { 'A', '-', 0 }, { 'B', '-', 0 }, { 'C', '-', 0 }, {
 8000f1c:	f107 0308 	add.w	r3, r7, #8
 8000f20:	2266      	movs	r2, #102	; 0x66
 8000f22:	2100      	movs	r1, #0
 8000f24:	4618      	mov	r0, r3
 8000f26:	f003 fa84 	bl	8004432 <memset>
 8000f2a:	2341      	movs	r3, #65	; 0x41
 8000f2c:	723b      	strb	r3, [r7, #8]
 8000f2e:	232d      	movs	r3, #45	; 0x2d
 8000f30:	727b      	strb	r3, [r7, #9]
 8000f32:	2342      	movs	r3, #66	; 0x42
 8000f34:	767b      	strb	r3, [r7, #25]
 8000f36:	232d      	movs	r3, #45	; 0x2d
 8000f38:	76bb      	strb	r3, [r7, #26]
 8000f3a:	2343      	movs	r3, #67	; 0x43
 8000f3c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8000f40:	232d      	movs	r3, #45	; 0x2d
 8000f42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000f46:	2344      	movs	r3, #68	; 0x44
 8000f48:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8000f4c:	232d      	movs	r3, #45	; 0x2d
 8000f4e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8000f52:	2345      	movs	r3, #69	; 0x45
 8000f54:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 8000f58:	232d      	movs	r3, #45	; 0x2d
 8000f5a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8000f5e:	2346      	movs	r3, #70	; 0x46
 8000f60:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 8000f64:	232d      	movs	r3, #45	; 0x2d
 8000f66:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			'D', '-', 0 }, { 'E', '-', 0 }, { 'F', '-', 0 } };

	for (uint8_t i = 0; i < 6; ++i) {
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8000f70:	e091      	b.n	8001096 <TIM2_IRQHandler+0x196>
		TCA_Set(&hi2c1, (TcaAddress) i);
 8000f72:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f76:	4619      	mov	r1, r3
 8000f78:	484e      	ldr	r0, [pc, #312]	; (80010b4 <TIM2_IRQHandler+0x1b4>)
 8000f7a:	f000 f91d 	bl	80011b8 <TCA_Set>
		BMP_180_Update(&bmp[i], &hi2c1);
 8000f7e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f82:	015b      	lsls	r3, r3, #5
 8000f84:	4a4c      	ldr	r2, [pc, #304]	; (80010b8 <TIM2_IRQHandler+0x1b8>)
 8000f86:	4413      	add	r3, r2
 8000f88:	494a      	ldr	r1, [pc, #296]	; (80010b4 <TIM2_IRQHandler+0x1b4>)
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff f984 	bl	8000298 <BMP_180_Update>
		char data_p[7] = { 0 };
 8000f90:	463b      	mov	r3, r7
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	f8c3 2003 	str.w	r2, [r3, #3]
		if (bmp[i].Pressure != 0) {
 8000f9a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f9e:	4a46      	ldr	r2, [pc, #280]	; (80010b8 <TIM2_IRQHandler+0x1b8>)
 8000fa0:	015b      	lsls	r3, r3, #5
 8000fa2:	4413      	add	r3, r2
 8000fa4:	331c      	adds	r3, #28
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d044      	beq.n	8001036 <TIM2_IRQHandler+0x136>
			itoa(bmp[i].Pressure, data_p, 10);
 8000fac:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000fb0:	4a41      	ldr	r2, [pc, #260]	; (80010b8 <TIM2_IRQHandler+0x1b8>)
 8000fb2:	015b      	lsls	r3, r3, #5
 8000fb4:	4413      	add	r3, r2
 8000fb6:	331c      	adds	r3, #28
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4639      	mov	r1, r7
 8000fbc:	220a      	movs	r2, #10
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f003 fa2a 	bl	8004418 <itoa>
			strcat(info[i], data_p);
 8000fc4:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000fc8:	f107 0108 	add.w	r1, r7, #8
 8000fcc:	4613      	mov	r3, r2
 8000fce:	011b      	lsls	r3, r3, #4
 8000fd0:	4413      	add	r3, r2
 8000fd2:	440b      	add	r3, r1
 8000fd4:	463a      	mov	r2, r7
 8000fd6:	4611      	mov	r1, r2
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f003 fa32 	bl	8004442 <strcat>

			itoa(bmp[i].Temperature, data_p, 10);
 8000fde:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000fe2:	4a35      	ldr	r2, [pc, #212]	; (80010b8 <TIM2_IRQHandler+0x1b8>)
 8000fe4:	015b      	lsls	r3, r3, #5
 8000fe6:	4413      	add	r3, r2
 8000fe8:	3318      	adds	r3, #24
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4639      	mov	r1, r7
 8000fee:	220a      	movs	r2, #10
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f003 fa11 	bl	8004418 <itoa>
			strcat(info[i], " ");
 8000ff6:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000ffa:	f107 0108 	add.w	r1, r7, #8
 8000ffe:	4613      	mov	r3, r2
 8001000:	011b      	lsls	r3, r3, #4
 8001002:	4413      	add	r3, r2
 8001004:	18cc      	adds	r4, r1, r3
 8001006:	4620      	mov	r0, r4
 8001008:	f7ff f8a0 	bl	800014c <strlen>
 800100c:	4603      	mov	r3, r0
 800100e:	4423      	add	r3, r4
 8001010:	492a      	ldr	r1, [pc, #168]	; (80010bc <TIM2_IRQHandler+0x1bc>)
 8001012:	461a      	mov	r2, r3
 8001014:	460b      	mov	r3, r1
 8001016:	881b      	ldrh	r3, [r3, #0]
 8001018:	8013      	strh	r3, [r2, #0]
			strcat(info[i], data_p);
 800101a:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800101e:	f107 0108 	add.w	r1, r7, #8
 8001022:	4613      	mov	r3, r2
 8001024:	011b      	lsls	r3, r3, #4
 8001026:	4413      	add	r3, r2
 8001028:	440b      	add	r3, r1
 800102a:	463a      	mov	r2, r7
 800102c:	4611      	mov	r1, r2
 800102e:	4618      	mov	r0, r3
 8001030:	f003 fa07 	bl	8004442 <strcat>
 8001034:	e012      	b.n	800105c <TIM2_IRQHandler+0x15c>
		} else {
			strcat(info[i], "invalid");
 8001036:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800103a:	f107 0108 	add.w	r1, r7, #8
 800103e:	4613      	mov	r3, r2
 8001040:	011b      	lsls	r3, r3, #4
 8001042:	4413      	add	r3, r2
 8001044:	18cc      	adds	r4, r1, r3
 8001046:	4620      	mov	r0, r4
 8001048:	f7ff f880 	bl	800014c <strlen>
 800104c:	4603      	mov	r3, r0
 800104e:	4423      	add	r3, r4
 8001050:	491b      	ldr	r1, [pc, #108]	; (80010c0 <TIM2_IRQHandler+0x1c0>)
 8001052:	461a      	mov	r2, r3
 8001054:	460b      	mov	r3, r1
 8001056:	cb03      	ldmia	r3!, {r0, r1}
 8001058:	6010      	str	r0, [r2, #0]
 800105a:	6051      	str	r1, [r2, #4]
		}
		ssd1306_SetCursor(4, i * 10);
 800105c:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001060:	4613      	mov	r3, r2
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	4413      	add	r3, r2
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	4619      	mov	r1, r3
 800106a:	2004      	movs	r0, #4
 800106c:	f7ff fd6e 	bl	8000b4c <ssd1306_SetCursor>
		ssd1306_WriteString(info[i], Font_7x9, White);
 8001070:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001074:	f107 0108 	add.w	r1, r7, #8
 8001078:	4613      	mov	r3, r2
 800107a:	011b      	lsls	r3, r3, #4
 800107c:	4413      	add	r3, r2
 800107e:	18c8      	adds	r0, r1, r3
 8001080:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <TIM2_IRQHandler+0x1c4>)
 8001082:	2201      	movs	r2, #1
 8001084:	9200      	str	r2, [sp, #0]
 8001086:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001088:	f7ff fd44 	bl	8000b14 <ssd1306_WriteString>
	for (uint8_t i = 0; i < 6; ++i) {
 800108c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001090:	3301      	adds	r3, #1
 8001092:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001096:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800109a:	2b05      	cmp	r3, #5
 800109c:	f67f af69 	bls.w	8000f72 <TIM2_IRQHandler+0x72>
	}

	ssd1306_UpdateScreen();
 80010a0:	f7ff fc4e 	bl	8000940 <ssd1306_UpdateScreen>
	/* USER CODE END TIM2_IRQn 1 */
}
 80010a4:	bf00      	nop
 80010a6:	3774      	adds	r7, #116	; 0x74
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd90      	pop	{r4, r7, pc}
 80010ac:	200005ec 	.word	0x200005ec
 80010b0:	40010c00 	.word	0x40010c00
 80010b4:	20000558 	.word	0x20000558
 80010b8:	20000498 	.word	0x20000498
 80010bc:	08004514 	.word	0x08004514
 80010c0:	08004518 	.word	0x08004518
 80010c4:	20000000 	.word	0x20000000

080010c8 <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART1_IRQn 0 */
	HAL_GPIO_WritePin(GPIOC, 13, GPIO_PIN_RESET);
 80010cc:	2200      	movs	r2, #0
 80010ce:	210d      	movs	r1, #13
 80010d0:	481c      	ldr	r0, [pc, #112]	; (8001144 <USART1_IRQHandler+0x7c>)
 80010d2:	f000 fc1d 	bl	8001910 <HAL_GPIO_WritePin>
	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
 80010d6:	481c      	ldr	r0, [pc, #112]	; (8001148 <USART1_IRQHandler+0x80>)
 80010d8:	f002 fe08 	bl	8003cec <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART1_IRQn 1 */

	switch (requestCode[0]) {
 80010dc:	4b1b      	ldr	r3, [pc, #108]	; (800114c <USART1_IRQHandler+0x84>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b06      	cmp	r3, #6
 80010e2:	d826      	bhi.n	8001132 <USART1_IRQHandler+0x6a>
 80010e4:	a201      	add	r2, pc, #4	; (adr r2, 80010ec <USART1_IRQHandler+0x24>)
 80010e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ea:	bf00      	nop
 80010ec:	08001109 	.word	0x08001109
 80010f0:	0800110f 	.word	0x0800110f
 80010f4:	08001115 	.word	0x08001115
 80010f8:	0800111b 	.word	0x0800111b
 80010fc:	08001121 	.word	0x08001121
 8001100:	08001127 	.word	0x08001127
 8001104:	0800112d 	.word	0x0800112d
	case 0:
		case0();
 8001108:	f7ff fe6a 	bl	8000de0 <case0>
		break;
 800110c:	e013      	b.n	8001136 <USART1_IRQHandler+0x6e>
	case 1:
		case1();
 800110e:	f7ff fe71 	bl	8000df4 <case1>
		break;
 8001112:	e010      	b.n	8001136 <USART1_IRQHandler+0x6e>
	case 2:
		case2();
 8001114:	f7ff fe7a 	bl	8000e0c <case2>
		break;
 8001118:	e00d      	b.n	8001136 <USART1_IRQHandler+0x6e>
	case 3:
		case3();
 800111a:	f7ff fe83 	bl	8000e24 <case3>
		break;
 800111e:	e00a      	b.n	8001136 <USART1_IRQHandler+0x6e>
	case 4:
		case4();
 8001120:	f7ff fe8c 	bl	8000e3c <case4>
		break;
 8001124:	e007      	b.n	8001136 <USART1_IRQHandler+0x6e>
	case 5:
		case5();
 8001126:	f7ff fe95 	bl	8000e54 <case5>
		break;
 800112a:	e004      	b.n	8001136 <USART1_IRQHandler+0x6e>
	case 6:
		case6();
 800112c:	f7ff fe9e 	bl	8000e6c <case6>
		break;
 8001130:	e001      	b.n	8001136 <USART1_IRQHandler+0x6e>
	default:
		caseDefault();
 8001132:	f7ff fea7 	bl	8000e84 <caseDefault>
	}

	HAL_UART_Receive_IT(&huart1, (uint8_t*) requestCode, 1);
 8001136:	2201      	movs	r2, #1
 8001138:	4904      	ldr	r1, [pc, #16]	; (800114c <USART1_IRQHandler+0x84>)
 800113a:	4803      	ldr	r0, [pc, #12]	; (8001148 <USART1_IRQHandler+0x80>)
 800113c:	f002 fd82 	bl	8003c44 <HAL_UART_Receive_IT>
	/* USER CODE END USART1_IRQn 1 */
}
 8001140:	bf00      	nop
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40011000 	.word	0x40011000
 8001148:	200005ac 	.word	0x200005ac
 800114c:	20000034 	.word	0x20000034

08001150 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001154:	4b15      	ldr	r3, [pc, #84]	; (80011ac <SystemInit+0x5c>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a14      	ldr	r2, [pc, #80]	; (80011ac <SystemInit+0x5c>)
 800115a:	f043 0301 	orr.w	r3, r3, #1
 800115e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001160:	4b12      	ldr	r3, [pc, #72]	; (80011ac <SystemInit+0x5c>)
 8001162:	685a      	ldr	r2, [r3, #4]
 8001164:	4911      	ldr	r1, [pc, #68]	; (80011ac <SystemInit+0x5c>)
 8001166:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <SystemInit+0x60>)
 8001168:	4013      	ands	r3, r2
 800116a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800116c:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <SystemInit+0x5c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a0e      	ldr	r2, [pc, #56]	; (80011ac <SystemInit+0x5c>)
 8001172:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800117a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800117c:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <SystemInit+0x5c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a0a      	ldr	r2, [pc, #40]	; (80011ac <SystemInit+0x5c>)
 8001182:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001186:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001188:	4b08      	ldr	r3, [pc, #32]	; (80011ac <SystemInit+0x5c>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	4a07      	ldr	r2, [pc, #28]	; (80011ac <SystemInit+0x5c>)
 800118e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001192:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001194:	4b05      	ldr	r3, [pc, #20]	; (80011ac <SystemInit+0x5c>)
 8001196:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800119a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800119c:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <SystemInit+0x64>)
 800119e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011a2:	609a      	str	r2, [r3, #8]
#endif 
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr
 80011ac:	40021000 	.word	0x40021000
 80011b0:	f8ff0000 	.word	0xf8ff0000
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <TCA_Set>:
#define TCA_ADDRESS 0xE0
#define TCA_CONTROL 0x3B
#define I2C_TIMEOUT 1000

HAL_StatusTypeDef TCA_Set(I2C_HandleTypeDef *i2c,
		TcaAddress address) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af02      	add	r7, sp, #8
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	460b      	mov	r3, r1
 80011c2:	70fb      	strb	r3, [r7, #3]

	uint8_t data[2] = {TCA_CONTROL, 1 << address};
 80011c4:	233b      	movs	r3, #59	; 0x3b
 80011c6:	733b      	strb	r3, [r7, #12]
 80011c8:	78fb      	ldrb	r3, [r7, #3]
 80011ca:	2201      	movs	r2, #1
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	737b      	strb	r3, [r7, #13]

	HAL_StatusTypeDef res = HAL_I2C_Master_Transmit(i2c, TCA_ADDRESS, data, 2, I2C_TIMEOUT);
 80011d4:	f107 020c 	add.w	r2, r7, #12
 80011d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	2302      	movs	r3, #2
 80011e0:	21e0      	movs	r1, #224	; 0xe0
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f000 fcec 	bl	8001bc0 <HAL_I2C_Master_Transmit>
 80011e8:	4603      	mov	r3, r0
 80011ea:	73fb      	strb	r3, [r7, #15]
	if (res != HAL_OK)
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <TCA_Set+0x3e>
		return res;
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
 80011f4:	e000      	b.n	80011f8 <TCA_Set+0x40>

	return res;
 80011f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3710      	adds	r7, #16
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001200:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001202:	e003      	b.n	800120c <LoopCopyDataInit>

08001204 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001204:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001206:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001208:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800120a:	3104      	adds	r1, #4

0800120c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800120c:	480a      	ldr	r0, [pc, #40]	; (8001238 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800120e:	4b0b      	ldr	r3, [pc, #44]	; (800123c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001210:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001212:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001214:	d3f6      	bcc.n	8001204 <CopyDataInit>
  ldr r2, =_sbss
 8001216:	4a0a      	ldr	r2, [pc, #40]	; (8001240 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001218:	e002      	b.n	8001220 <LoopFillZerobss>

0800121a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800121a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800121c:	f842 3b04 	str.w	r3, [r2], #4

08001220 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001220:	4b08      	ldr	r3, [pc, #32]	; (8001244 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001222:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001224:	d3f9      	bcc.n	800121a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001226:	f7ff ff93 	bl	8001150 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800122a:	f003 f8b9 	bl	80043a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800122e:	f7ff f9a1 	bl	8000574 <main>
  bx lr
 8001232:	4770      	bx	lr
  ldr r3, =_sidata
 8001234:	08004b14 	.word	0x08004b14
  ldr r0, =_sdata
 8001238:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800123c:	20000018 	.word	0x20000018
  ldr r2, =_sbss
 8001240:	20000018 	.word	0x20000018
  ldr r3, = _ebss
 8001244:	20000638 	.word	0x20000638

08001248 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001248:	e7fe      	b.n	8001248 <ADC1_2_IRQHandler>
	...

0800124c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001250:	4b08      	ldr	r3, [pc, #32]	; (8001274 <HAL_Init+0x28>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a07      	ldr	r2, [pc, #28]	; (8001274 <HAL_Init+0x28>)
 8001256:	f043 0310 	orr.w	r3, r3, #16
 800125a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800125c:	2003      	movs	r0, #3
 800125e:	f000 f945 	bl	80014ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001262:	2000      	movs	r0, #0
 8001264:	f000 f808 	bl	8001278 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001268:	f7ff fca4 	bl	8000bb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40022000 	.word	0x40022000

08001278 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001280:	4b12      	ldr	r3, [pc, #72]	; (80012cc <HAL_InitTick+0x54>)
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <HAL_InitTick+0x58>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	4619      	mov	r1, r3
 800128a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800128e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001292:	fbb2 f3f3 	udiv	r3, r2, r3
 8001296:	4618      	mov	r0, r3
 8001298:	f000 f95d 	bl	8001556 <HAL_SYSTICK_Config>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e00e      	b.n	80012c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2b0f      	cmp	r3, #15
 80012aa:	d80a      	bhi.n	80012c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012ac:	2200      	movs	r2, #0
 80012ae:	6879      	ldr	r1, [r7, #4]
 80012b0:	f04f 30ff 	mov.w	r0, #4294967295
 80012b4:	f000 f925 	bl	8001502 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012b8:	4a06      	ldr	r2, [pc, #24]	; (80012d4 <HAL_InitTick+0x5c>)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012be:	2300      	movs	r3, #0
 80012c0:	e000      	b.n	80012c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	2000000c 	.word	0x2000000c
 80012d0:	20000014 	.word	0x20000014
 80012d4:	20000010 	.word	0x20000010

080012d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012dc:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <HAL_IncTick+0x1c>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	461a      	mov	r2, r3
 80012e2:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <HAL_IncTick+0x20>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4413      	add	r3, r2
 80012e8:	4a03      	ldr	r2, [pc, #12]	; (80012f8 <HAL_IncTick+0x20>)
 80012ea:	6013      	str	r3, [r2, #0]
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr
 80012f4:	20000014 	.word	0x20000014
 80012f8:	20000634 	.word	0x20000634

080012fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001300:	4b02      	ldr	r3, [pc, #8]	; (800130c <HAL_GetTick+0x10>)
 8001302:	681b      	ldr	r3, [r3, #0]
}
 8001304:	4618      	mov	r0, r3
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr
 800130c:	20000634 	.word	0x20000634

08001310 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001318:	f7ff fff0 	bl	80012fc <HAL_GetTick>
 800131c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001328:	d005      	beq.n	8001336 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800132a:	4b09      	ldr	r3, [pc, #36]	; (8001350 <HAL_Delay+0x40>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	461a      	mov	r2, r3
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	4413      	add	r3, r2
 8001334:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001336:	bf00      	nop
 8001338:	f7ff ffe0 	bl	80012fc <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	68fa      	ldr	r2, [r7, #12]
 8001344:	429a      	cmp	r2, r3
 8001346:	d8f7      	bhi.n	8001338 <HAL_Delay+0x28>
  {
  }
}
 8001348:	bf00      	nop
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000014 	.word	0x20000014

08001354 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001364:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <__NVIC_SetPriorityGrouping+0x44>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800136a:	68ba      	ldr	r2, [r7, #8]
 800136c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001370:	4013      	ands	r3, r2
 8001372:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800137c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001380:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001384:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001386:	4a04      	ldr	r2, [pc, #16]	; (8001398 <__NVIC_SetPriorityGrouping+0x44>)
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	60d3      	str	r3, [r2, #12]
}
 800138c:	bf00      	nop
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	bc80      	pop	{r7}
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013a0:	4b04      	ldr	r3, [pc, #16]	; (80013b4 <__NVIC_GetPriorityGrouping+0x18>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	0a1b      	lsrs	r3, r3, #8
 80013a6:	f003 0307 	and.w	r3, r3, #7
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bc80      	pop	{r7}
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	db0b      	blt.n	80013e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	f003 021f 	and.w	r2, r3, #31
 80013d0:	4906      	ldr	r1, [pc, #24]	; (80013ec <__NVIC_EnableIRQ+0x34>)
 80013d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d6:	095b      	lsrs	r3, r3, #5
 80013d8:	2001      	movs	r0, #1
 80013da:	fa00 f202 	lsl.w	r2, r0, r2
 80013de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr
 80013ec:	e000e100 	.word	0xe000e100

080013f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	6039      	str	r1, [r7, #0]
 80013fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001400:	2b00      	cmp	r3, #0
 8001402:	db0a      	blt.n	800141a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	b2da      	uxtb	r2, r3
 8001408:	490c      	ldr	r1, [pc, #48]	; (800143c <__NVIC_SetPriority+0x4c>)
 800140a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140e:	0112      	lsls	r2, r2, #4
 8001410:	b2d2      	uxtb	r2, r2
 8001412:	440b      	add	r3, r1
 8001414:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001418:	e00a      	b.n	8001430 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	b2da      	uxtb	r2, r3
 800141e:	4908      	ldr	r1, [pc, #32]	; (8001440 <__NVIC_SetPriority+0x50>)
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	f003 030f 	and.w	r3, r3, #15
 8001426:	3b04      	subs	r3, #4
 8001428:	0112      	lsls	r2, r2, #4
 800142a:	b2d2      	uxtb	r2, r2
 800142c:	440b      	add	r3, r1
 800142e:	761a      	strb	r2, [r3, #24]
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	e000e100 	.word	0xe000e100
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001444:	b480      	push	{r7}
 8001446:	b089      	sub	sp, #36	; 0x24
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	f1c3 0307 	rsb	r3, r3, #7
 800145e:	2b04      	cmp	r3, #4
 8001460:	bf28      	it	cs
 8001462:	2304      	movcs	r3, #4
 8001464:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	3304      	adds	r3, #4
 800146a:	2b06      	cmp	r3, #6
 800146c:	d902      	bls.n	8001474 <NVIC_EncodePriority+0x30>
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	3b03      	subs	r3, #3
 8001472:	e000      	b.n	8001476 <NVIC_EncodePriority+0x32>
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001478:	f04f 32ff 	mov.w	r2, #4294967295
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43da      	mvns	r2, r3
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	401a      	ands	r2, r3
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800148c:	f04f 31ff 	mov.w	r1, #4294967295
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	fa01 f303 	lsl.w	r3, r1, r3
 8001496:	43d9      	mvns	r1, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800149c:	4313      	orrs	r3, r2
         );
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3724      	adds	r7, #36	; 0x24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr

080014a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014b8:	d301      	bcc.n	80014be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ba:	2301      	movs	r3, #1
 80014bc:	e00f      	b.n	80014de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014be:	4a0a      	ldr	r2, [pc, #40]	; (80014e8 <SysTick_Config+0x40>)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3b01      	subs	r3, #1
 80014c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014c6:	210f      	movs	r1, #15
 80014c8:	f04f 30ff 	mov.w	r0, #4294967295
 80014cc:	f7ff ff90 	bl	80013f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014d0:	4b05      	ldr	r3, [pc, #20]	; (80014e8 <SysTick_Config+0x40>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014d6:	4b04      	ldr	r3, [pc, #16]	; (80014e8 <SysTick_Config+0x40>)
 80014d8:	2207      	movs	r2, #7
 80014da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	e000e010 	.word	0xe000e010

080014ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f7ff ff2d 	bl	8001354 <__NVIC_SetPriorityGrouping>
}
 80014fa:	bf00      	nop
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001502:	b580      	push	{r7, lr}
 8001504:	b086      	sub	sp, #24
 8001506:	af00      	add	r7, sp, #0
 8001508:	4603      	mov	r3, r0
 800150a:	60b9      	str	r1, [r7, #8]
 800150c:	607a      	str	r2, [r7, #4]
 800150e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001510:	2300      	movs	r3, #0
 8001512:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001514:	f7ff ff42 	bl	800139c <__NVIC_GetPriorityGrouping>
 8001518:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	68b9      	ldr	r1, [r7, #8]
 800151e:	6978      	ldr	r0, [r7, #20]
 8001520:	f7ff ff90 	bl	8001444 <NVIC_EncodePriority>
 8001524:	4602      	mov	r2, r0
 8001526:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800152a:	4611      	mov	r1, r2
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff ff5f 	bl	80013f0 <__NVIC_SetPriority>
}
 8001532:	bf00      	nop
 8001534:	3718      	adds	r7, #24
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b082      	sub	sp, #8
 800153e:	af00      	add	r7, sp, #0
 8001540:	4603      	mov	r3, r0
 8001542:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff ff35 	bl	80013b8 <__NVIC_EnableIRQ>
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b082      	sub	sp, #8
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f7ff ffa2 	bl	80014a8 <SysTick_Config>
 8001564:	4603      	mov	r3, r0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
	...

08001570 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001578:	2300      	movs	r3, #0
 800157a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001582:	2b02      	cmp	r3, #2
 8001584:	d005      	beq.n	8001592 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2204      	movs	r2, #4
 800158a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	73fb      	strb	r3, [r7, #15]
 8001590:	e051      	b.n	8001636 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f022 020e 	bic.w	r2, r2, #14
 80015a0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f022 0201 	bic.w	r2, r2, #1
 80015b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a22      	ldr	r2, [pc, #136]	; (8001640 <HAL_DMA_Abort_IT+0xd0>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d029      	beq.n	8001610 <HAL_DMA_Abort_IT+0xa0>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a20      	ldr	r2, [pc, #128]	; (8001644 <HAL_DMA_Abort_IT+0xd4>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d022      	beq.n	800160c <HAL_DMA_Abort_IT+0x9c>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a1f      	ldr	r2, [pc, #124]	; (8001648 <HAL_DMA_Abort_IT+0xd8>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d01a      	beq.n	8001606 <HAL_DMA_Abort_IT+0x96>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a1d      	ldr	r2, [pc, #116]	; (800164c <HAL_DMA_Abort_IT+0xdc>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d012      	beq.n	8001600 <HAL_DMA_Abort_IT+0x90>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a1c      	ldr	r2, [pc, #112]	; (8001650 <HAL_DMA_Abort_IT+0xe0>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d00a      	beq.n	80015fa <HAL_DMA_Abort_IT+0x8a>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a1a      	ldr	r2, [pc, #104]	; (8001654 <HAL_DMA_Abort_IT+0xe4>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d102      	bne.n	80015f4 <HAL_DMA_Abort_IT+0x84>
 80015ee:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80015f2:	e00e      	b.n	8001612 <HAL_DMA_Abort_IT+0xa2>
 80015f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015f8:	e00b      	b.n	8001612 <HAL_DMA_Abort_IT+0xa2>
 80015fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015fe:	e008      	b.n	8001612 <HAL_DMA_Abort_IT+0xa2>
 8001600:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001604:	e005      	b.n	8001612 <HAL_DMA_Abort_IT+0xa2>
 8001606:	f44f 7380 	mov.w	r3, #256	; 0x100
 800160a:	e002      	b.n	8001612 <HAL_DMA_Abort_IT+0xa2>
 800160c:	2310      	movs	r3, #16
 800160e:	e000      	b.n	8001612 <HAL_DMA_Abort_IT+0xa2>
 8001610:	2301      	movs	r3, #1
 8001612:	4a11      	ldr	r2, [pc, #68]	; (8001658 <HAL_DMA_Abort_IT+0xe8>)
 8001614:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2201      	movs	r2, #1
 800161a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	4798      	blx	r3
    } 
  }
  return status;
 8001636:	7bfb      	ldrb	r3, [r7, #15]
}
 8001638:	4618      	mov	r0, r3
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40020008 	.word	0x40020008
 8001644:	4002001c 	.word	0x4002001c
 8001648:	40020030 	.word	0x40020030
 800164c:	40020044 	.word	0x40020044
 8001650:	40020058 	.word	0x40020058
 8001654:	4002006c 	.word	0x4002006c
 8001658:	40020000 	.word	0x40020000

0800165c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800165c:	b480      	push	{r7}
 800165e:	b08b      	sub	sp, #44	; 0x2c
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001666:	2300      	movs	r3, #0
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800166a:	2300      	movs	r3, #0
 800166c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800166e:	e127      	b.n	80018c0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001670:	2201      	movs	r2, #1
 8001672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	69fa      	ldr	r2, [r7, #28]
 8001680:	4013      	ands	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	429a      	cmp	r2, r3
 800168a:	f040 8116 	bne.w	80018ba <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	2b12      	cmp	r3, #18
 8001694:	d034      	beq.n	8001700 <HAL_GPIO_Init+0xa4>
 8001696:	2b12      	cmp	r3, #18
 8001698:	d80d      	bhi.n	80016b6 <HAL_GPIO_Init+0x5a>
 800169a:	2b02      	cmp	r3, #2
 800169c:	d02b      	beq.n	80016f6 <HAL_GPIO_Init+0x9a>
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d804      	bhi.n	80016ac <HAL_GPIO_Init+0x50>
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d031      	beq.n	800170a <HAL_GPIO_Init+0xae>
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d01c      	beq.n	80016e4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016aa:	e048      	b.n	800173e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80016ac:	2b03      	cmp	r3, #3
 80016ae:	d043      	beq.n	8001738 <HAL_GPIO_Init+0xdc>
 80016b0:	2b11      	cmp	r3, #17
 80016b2:	d01b      	beq.n	80016ec <HAL_GPIO_Init+0x90>
          break;
 80016b4:	e043      	b.n	800173e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80016b6:	4a89      	ldr	r2, [pc, #548]	; (80018dc <HAL_GPIO_Init+0x280>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d026      	beq.n	800170a <HAL_GPIO_Init+0xae>
 80016bc:	4a87      	ldr	r2, [pc, #540]	; (80018dc <HAL_GPIO_Init+0x280>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d806      	bhi.n	80016d0 <HAL_GPIO_Init+0x74>
 80016c2:	4a87      	ldr	r2, [pc, #540]	; (80018e0 <HAL_GPIO_Init+0x284>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d020      	beq.n	800170a <HAL_GPIO_Init+0xae>
 80016c8:	4a86      	ldr	r2, [pc, #536]	; (80018e4 <HAL_GPIO_Init+0x288>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d01d      	beq.n	800170a <HAL_GPIO_Init+0xae>
          break;
 80016ce:	e036      	b.n	800173e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80016d0:	4a85      	ldr	r2, [pc, #532]	; (80018e8 <HAL_GPIO_Init+0x28c>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d019      	beq.n	800170a <HAL_GPIO_Init+0xae>
 80016d6:	4a85      	ldr	r2, [pc, #532]	; (80018ec <HAL_GPIO_Init+0x290>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d016      	beq.n	800170a <HAL_GPIO_Init+0xae>
 80016dc:	4a84      	ldr	r2, [pc, #528]	; (80018f0 <HAL_GPIO_Init+0x294>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d013      	beq.n	800170a <HAL_GPIO_Init+0xae>
          break;
 80016e2:	e02c      	b.n	800173e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	623b      	str	r3, [r7, #32]
          break;
 80016ea:	e028      	b.n	800173e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	3304      	adds	r3, #4
 80016f2:	623b      	str	r3, [r7, #32]
          break;
 80016f4:	e023      	b.n	800173e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	3308      	adds	r3, #8
 80016fc:	623b      	str	r3, [r7, #32]
          break;
 80016fe:	e01e      	b.n	800173e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	330c      	adds	r3, #12
 8001706:	623b      	str	r3, [r7, #32]
          break;
 8001708:	e019      	b.n	800173e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d102      	bne.n	8001718 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001712:	2304      	movs	r3, #4
 8001714:	623b      	str	r3, [r7, #32]
          break;
 8001716:	e012      	b.n	800173e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d105      	bne.n	800172c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001720:	2308      	movs	r3, #8
 8001722:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	69fa      	ldr	r2, [r7, #28]
 8001728:	611a      	str	r2, [r3, #16]
          break;
 800172a:	e008      	b.n	800173e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800172c:	2308      	movs	r3, #8
 800172e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	69fa      	ldr	r2, [r7, #28]
 8001734:	615a      	str	r2, [r3, #20]
          break;
 8001736:	e002      	b.n	800173e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001738:	2300      	movs	r3, #0
 800173a:	623b      	str	r3, [r7, #32]
          break;
 800173c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	2bff      	cmp	r3, #255	; 0xff
 8001742:	d801      	bhi.n	8001748 <HAL_GPIO_Init+0xec>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	e001      	b.n	800174c <HAL_GPIO_Init+0xf0>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3304      	adds	r3, #4
 800174c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	2bff      	cmp	r3, #255	; 0xff
 8001752:	d802      	bhi.n	800175a <HAL_GPIO_Init+0xfe>
 8001754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	e002      	b.n	8001760 <HAL_GPIO_Init+0x104>
 800175a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175c:	3b08      	subs	r3, #8
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	210f      	movs	r1, #15
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	fa01 f303 	lsl.w	r3, r1, r3
 800176e:	43db      	mvns	r3, r3
 8001770:	401a      	ands	r2, r3
 8001772:	6a39      	ldr	r1, [r7, #32]
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	fa01 f303 	lsl.w	r3, r1, r3
 800177a:	431a      	orrs	r2, r3
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001788:	2b00      	cmp	r3, #0
 800178a:	f000 8096 	beq.w	80018ba <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800178e:	4b59      	ldr	r3, [pc, #356]	; (80018f4 <HAL_GPIO_Init+0x298>)
 8001790:	699b      	ldr	r3, [r3, #24]
 8001792:	4a58      	ldr	r2, [pc, #352]	; (80018f4 <HAL_GPIO_Init+0x298>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	6193      	str	r3, [r2, #24]
 800179a:	4b56      	ldr	r3, [pc, #344]	; (80018f4 <HAL_GPIO_Init+0x298>)
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	60bb      	str	r3, [r7, #8]
 80017a4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017a6:	4a54      	ldr	r2, [pc, #336]	; (80018f8 <HAL_GPIO_Init+0x29c>)
 80017a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017aa:	089b      	lsrs	r3, r3, #2
 80017ac:	3302      	adds	r3, #2
 80017ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017b2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b6:	f003 0303 	and.w	r3, r3, #3
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	220f      	movs	r2, #15
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	43db      	mvns	r3, r3
 80017c4:	68fa      	ldr	r2, [r7, #12]
 80017c6:	4013      	ands	r3, r2
 80017c8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a4b      	ldr	r2, [pc, #300]	; (80018fc <HAL_GPIO_Init+0x2a0>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d013      	beq.n	80017fa <HAL_GPIO_Init+0x19e>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a4a      	ldr	r2, [pc, #296]	; (8001900 <HAL_GPIO_Init+0x2a4>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d00d      	beq.n	80017f6 <HAL_GPIO_Init+0x19a>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a49      	ldr	r2, [pc, #292]	; (8001904 <HAL_GPIO_Init+0x2a8>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d007      	beq.n	80017f2 <HAL_GPIO_Init+0x196>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a48      	ldr	r2, [pc, #288]	; (8001908 <HAL_GPIO_Init+0x2ac>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d101      	bne.n	80017ee <HAL_GPIO_Init+0x192>
 80017ea:	2303      	movs	r3, #3
 80017ec:	e006      	b.n	80017fc <HAL_GPIO_Init+0x1a0>
 80017ee:	2304      	movs	r3, #4
 80017f0:	e004      	b.n	80017fc <HAL_GPIO_Init+0x1a0>
 80017f2:	2302      	movs	r3, #2
 80017f4:	e002      	b.n	80017fc <HAL_GPIO_Init+0x1a0>
 80017f6:	2301      	movs	r3, #1
 80017f8:	e000      	b.n	80017fc <HAL_GPIO_Init+0x1a0>
 80017fa:	2300      	movs	r3, #0
 80017fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017fe:	f002 0203 	and.w	r2, r2, #3
 8001802:	0092      	lsls	r2, r2, #2
 8001804:	4093      	lsls	r3, r2
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	4313      	orrs	r3, r2
 800180a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800180c:	493a      	ldr	r1, [pc, #232]	; (80018f8 <HAL_GPIO_Init+0x29c>)
 800180e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001810:	089b      	lsrs	r3, r3, #2
 8001812:	3302      	adds	r3, #2
 8001814:	68fa      	ldr	r2, [r7, #12]
 8001816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d006      	beq.n	8001834 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001826:	4b39      	ldr	r3, [pc, #228]	; (800190c <HAL_GPIO_Init+0x2b0>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	4938      	ldr	r1, [pc, #224]	; (800190c <HAL_GPIO_Init+0x2b0>)
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	4313      	orrs	r3, r2
 8001830:	600b      	str	r3, [r1, #0]
 8001832:	e006      	b.n	8001842 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001834:	4b35      	ldr	r3, [pc, #212]	; (800190c <HAL_GPIO_Init+0x2b0>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	43db      	mvns	r3, r3
 800183c:	4933      	ldr	r1, [pc, #204]	; (800190c <HAL_GPIO_Init+0x2b0>)
 800183e:	4013      	ands	r3, r2
 8001840:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d006      	beq.n	800185c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800184e:	4b2f      	ldr	r3, [pc, #188]	; (800190c <HAL_GPIO_Init+0x2b0>)
 8001850:	685a      	ldr	r2, [r3, #4]
 8001852:	492e      	ldr	r1, [pc, #184]	; (800190c <HAL_GPIO_Init+0x2b0>)
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	4313      	orrs	r3, r2
 8001858:	604b      	str	r3, [r1, #4]
 800185a:	e006      	b.n	800186a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800185c:	4b2b      	ldr	r3, [pc, #172]	; (800190c <HAL_GPIO_Init+0x2b0>)
 800185e:	685a      	ldr	r2, [r3, #4]
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	43db      	mvns	r3, r3
 8001864:	4929      	ldr	r1, [pc, #164]	; (800190c <HAL_GPIO_Init+0x2b0>)
 8001866:	4013      	ands	r3, r2
 8001868:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d006      	beq.n	8001884 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001876:	4b25      	ldr	r3, [pc, #148]	; (800190c <HAL_GPIO_Init+0x2b0>)
 8001878:	689a      	ldr	r2, [r3, #8]
 800187a:	4924      	ldr	r1, [pc, #144]	; (800190c <HAL_GPIO_Init+0x2b0>)
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	4313      	orrs	r3, r2
 8001880:	608b      	str	r3, [r1, #8]
 8001882:	e006      	b.n	8001892 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001884:	4b21      	ldr	r3, [pc, #132]	; (800190c <HAL_GPIO_Init+0x2b0>)
 8001886:	689a      	ldr	r2, [r3, #8]
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	43db      	mvns	r3, r3
 800188c:	491f      	ldr	r1, [pc, #124]	; (800190c <HAL_GPIO_Init+0x2b0>)
 800188e:	4013      	ands	r3, r2
 8001890:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d006      	beq.n	80018ac <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800189e:	4b1b      	ldr	r3, [pc, #108]	; (800190c <HAL_GPIO_Init+0x2b0>)
 80018a0:	68da      	ldr	r2, [r3, #12]
 80018a2:	491a      	ldr	r1, [pc, #104]	; (800190c <HAL_GPIO_Init+0x2b0>)
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	60cb      	str	r3, [r1, #12]
 80018aa:	e006      	b.n	80018ba <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018ac:	4b17      	ldr	r3, [pc, #92]	; (800190c <HAL_GPIO_Init+0x2b0>)
 80018ae:	68da      	ldr	r2, [r3, #12]
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	43db      	mvns	r3, r3
 80018b4:	4915      	ldr	r1, [pc, #84]	; (800190c <HAL_GPIO_Init+0x2b0>)
 80018b6:	4013      	ands	r3, r2
 80018b8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80018ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018bc:	3301      	adds	r3, #1
 80018be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c6:	fa22 f303 	lsr.w	r3, r2, r3
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f47f aed0 	bne.w	8001670 <HAL_GPIO_Init+0x14>
  }
}
 80018d0:	bf00      	nop
 80018d2:	372c      	adds	r7, #44	; 0x2c
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	10210000 	.word	0x10210000
 80018e0:	10110000 	.word	0x10110000
 80018e4:	10120000 	.word	0x10120000
 80018e8:	10310000 	.word	0x10310000
 80018ec:	10320000 	.word	0x10320000
 80018f0:	10220000 	.word	0x10220000
 80018f4:	40021000 	.word	0x40021000
 80018f8:	40010000 	.word	0x40010000
 80018fc:	40010800 	.word	0x40010800
 8001900:	40010c00 	.word	0x40010c00
 8001904:	40011000 	.word	0x40011000
 8001908:	40011400 	.word	0x40011400
 800190c:	40010400 	.word	0x40010400

08001910 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	460b      	mov	r3, r1
 800191a:	807b      	strh	r3, [r7, #2]
 800191c:	4613      	mov	r3, r2
 800191e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001920:	787b      	ldrb	r3, [r7, #1]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d003      	beq.n	800192e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001926:	887a      	ldrh	r2, [r7, #2]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800192c:	e003      	b.n	8001936 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800192e:	887b      	ldrh	r3, [r7, #2]
 8001930:	041a      	lsls	r2, r3, #16
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	611a      	str	r2, [r3, #16]
}
 8001936:	bf00      	nop
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr

08001940 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	460b      	mov	r3, r1
 800194a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	68da      	ldr	r2, [r3, #12]
 8001950:	887b      	ldrh	r3, [r7, #2]
 8001952:	4013      	ands	r3, r2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d003      	beq.n	8001960 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001958:	887a      	ldrh	r2, [r7, #2]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800195e:	e002      	b.n	8001966 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001960:	887a      	ldrh	r2, [r7, #2]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	611a      	str	r2, [r3, #16]
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr

08001970 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d101      	bne.n	8001982 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e10f      	b.n	8001ba2 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001988:	b2db      	uxtb	r3, r3
 800198a:	2b00      	cmp	r3, #0
 800198c:	d106      	bne.n	800199c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7ff f93e 	bl	8000c18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2224      	movs	r2, #36	; 0x24
 80019a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f022 0201 	bic.w	r2, r2, #1
 80019b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80019b4:	f001 fc92 	bl	80032dc <HAL_RCC_GetPCLK1Freq>
 80019b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	4a7b      	ldr	r2, [pc, #492]	; (8001bac <HAL_I2C_Init+0x23c>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d807      	bhi.n	80019d4 <HAL_I2C_Init+0x64>
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	4a7a      	ldr	r2, [pc, #488]	; (8001bb0 <HAL_I2C_Init+0x240>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	bf94      	ite	ls
 80019cc:	2301      	movls	r3, #1
 80019ce:	2300      	movhi	r3, #0
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	e006      	b.n	80019e2 <HAL_I2C_Init+0x72>
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	4a77      	ldr	r2, [pc, #476]	; (8001bb4 <HAL_I2C_Init+0x244>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	bf94      	ite	ls
 80019dc:	2301      	movls	r3, #1
 80019de:	2300      	movhi	r3, #0
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e0db      	b.n	8001ba2 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	4a72      	ldr	r2, [pc, #456]	; (8001bb8 <HAL_I2C_Init+0x248>)
 80019ee:	fba2 2303 	umull	r2, r3, r2, r3
 80019f2:	0c9b      	lsrs	r3, r3, #18
 80019f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	68ba      	ldr	r2, [r7, #8]
 8001a06:	430a      	orrs	r2, r1
 8001a08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	6a1b      	ldr	r3, [r3, #32]
 8001a10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	4a64      	ldr	r2, [pc, #400]	; (8001bac <HAL_I2C_Init+0x23c>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d802      	bhi.n	8001a24 <HAL_I2C_Init+0xb4>
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	3301      	adds	r3, #1
 8001a22:	e009      	b.n	8001a38 <HAL_I2C_Init+0xc8>
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a2a:	fb02 f303 	mul.w	r3, r2, r3
 8001a2e:	4a63      	ldr	r2, [pc, #396]	; (8001bbc <HAL_I2C_Init+0x24c>)
 8001a30:	fba2 2303 	umull	r2, r3, r2, r3
 8001a34:	099b      	lsrs	r3, r3, #6
 8001a36:	3301      	adds	r3, #1
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	6812      	ldr	r2, [r2, #0]
 8001a3c:	430b      	orrs	r3, r1
 8001a3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001a4a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	4956      	ldr	r1, [pc, #344]	; (8001bac <HAL_I2C_Init+0x23c>)
 8001a54:	428b      	cmp	r3, r1
 8001a56:	d80d      	bhi.n	8001a74 <HAL_I2C_Init+0x104>
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	1e59      	subs	r1, r3, #1
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a66:	3301      	adds	r3, #1
 8001a68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a6c:	2b04      	cmp	r3, #4
 8001a6e:	bf38      	it	cc
 8001a70:	2304      	movcc	r3, #4
 8001a72:	e04f      	b.n	8001b14 <HAL_I2C_Init+0x1a4>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d111      	bne.n	8001aa0 <HAL_I2C_Init+0x130>
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	1e58      	subs	r0, r3, #1
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6859      	ldr	r1, [r3, #4]
 8001a84:	460b      	mov	r3, r1
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	440b      	add	r3, r1
 8001a8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a8e:	3301      	adds	r3, #1
 8001a90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	bf0c      	ite	eq
 8001a98:	2301      	moveq	r3, #1
 8001a9a:	2300      	movne	r3, #0
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	e012      	b.n	8001ac6 <HAL_I2C_Init+0x156>
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	1e58      	subs	r0, r3, #1
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6859      	ldr	r1, [r3, #4]
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	440b      	add	r3, r1
 8001aae:	0099      	lsls	r1, r3, #2
 8001ab0:	440b      	add	r3, r1
 8001ab2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	bf0c      	ite	eq
 8001ac0:	2301      	moveq	r3, #1
 8001ac2:	2300      	movne	r3, #0
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <HAL_I2C_Init+0x15e>
 8001aca:	2301      	movs	r3, #1
 8001acc:	e022      	b.n	8001b14 <HAL_I2C_Init+0x1a4>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d10e      	bne.n	8001af4 <HAL_I2C_Init+0x184>
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	1e58      	subs	r0, r3, #1
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6859      	ldr	r1, [r3, #4]
 8001ade:	460b      	mov	r3, r1
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	440b      	add	r3, r1
 8001ae4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ae8:	3301      	adds	r3, #1
 8001aea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001af2:	e00f      	b.n	8001b14 <HAL_I2C_Init+0x1a4>
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	1e58      	subs	r0, r3, #1
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6859      	ldr	r1, [r3, #4]
 8001afc:	460b      	mov	r3, r1
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	440b      	add	r3, r1
 8001b02:	0099      	lsls	r1, r3, #2
 8001b04:	440b      	add	r3, r1
 8001b06:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b14:	6879      	ldr	r1, [r7, #4]
 8001b16:	6809      	ldr	r1, [r1, #0]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69da      	ldr	r2, [r3, #28]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a1b      	ldr	r3, [r3, #32]
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	430a      	orrs	r2, r1
 8001b36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001b42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	6911      	ldr	r1, [r2, #16]
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	68d2      	ldr	r2, [r2, #12]
 8001b4e:	4311      	orrs	r1, r2
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	6812      	ldr	r2, [r2, #0]
 8001b54:	430b      	orrs	r3, r1
 8001b56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	695a      	ldr	r2, [r3, #20]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	431a      	orrs	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	430a      	orrs	r2, r1
 8001b72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f042 0201 	orr.w	r2, r2, #1
 8001b82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2220      	movs	r2, #32
 8001b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	000186a0 	.word	0x000186a0
 8001bb0:	001e847f 	.word	0x001e847f
 8001bb4:	003d08ff 	.word	0x003d08ff
 8001bb8:	431bde83 	.word	0x431bde83
 8001bbc:	10624dd3 	.word	0x10624dd3

08001bc0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b088      	sub	sp, #32
 8001bc4:	af02      	add	r7, sp, #8
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	607a      	str	r2, [r7, #4]
 8001bca:	461a      	mov	r2, r3
 8001bcc:	460b      	mov	r3, r1
 8001bce:	817b      	strh	r3, [r7, #10]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001bd4:	f7ff fb92 	bl	80012fc <HAL_GetTick>
 8001bd8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b20      	cmp	r3, #32
 8001be4:	f040 80e0 	bne.w	8001da8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	9300      	str	r3, [sp, #0]
 8001bec:	2319      	movs	r3, #25
 8001bee:	2201      	movs	r2, #1
 8001bf0:	4970      	ldr	r1, [pc, #448]	; (8001db4 <HAL_I2C_Master_Transmit+0x1f4>)
 8001bf2:	68f8      	ldr	r0, [r7, #12]
 8001bf4:	f000 fdc0 	bl	8002778 <I2C_WaitOnFlagUntilTimeout>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	e0d3      	b.n	8001daa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d101      	bne.n	8001c10 <HAL_I2C_Master_Transmit+0x50>
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	e0cc      	b.n	8001daa <HAL_I2C_Master_Transmit+0x1ea>
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d007      	beq.n	8001c36 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f042 0201 	orr.w	r2, r2, #1
 8001c34:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c44:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2221      	movs	r2, #33	; 0x21
 8001c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2210      	movs	r2, #16
 8001c52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	893a      	ldrh	r2, [r7, #8]
 8001c66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	4a50      	ldr	r2, [pc, #320]	; (8001db8 <HAL_I2C_Master_Transmit+0x1f8>)
 8001c76:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c78:	8979      	ldrh	r1, [r7, #10]
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	6a3a      	ldr	r2, [r7, #32]
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	f000 fbc4 	bl	800240c <I2C_MasterRequestWrite>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e08d      	b.n	8001daa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c8e:	2300      	movs	r3, #0
 8001c90:	613b      	str	r3, [r7, #16]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	695b      	ldr	r3, [r3, #20]
 8001c98:	613b      	str	r3, [r7, #16]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	613b      	str	r3, [r7, #16]
 8001ca2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001ca4:	e066      	b.n	8001d74 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ca6:	697a      	ldr	r2, [r7, #20]
 8001ca8:	6a39      	ldr	r1, [r7, #32]
 8001caa:	68f8      	ldr	r0, [r7, #12]
 8001cac:	f000 fe3a 	bl	8002924 <I2C_WaitOnTXEFlagUntilTimeout>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d00d      	beq.n	8001cd2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	2b04      	cmp	r3, #4
 8001cbc:	d107      	bne.n	8001cce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ccc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e06b      	b.n	8001daa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd6:	781a      	ldrb	r2, [r3, #0]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce2:	1c5a      	adds	r2, r3, #1
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	695b      	ldr	r3, [r3, #20]
 8001d08:	f003 0304 	and.w	r3, r3, #4
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d11b      	bne.n	8001d48 <HAL_I2C_Master_Transmit+0x188>
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d017      	beq.n	8001d48 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1c:	781a      	ldrb	r2, [r3, #0]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d28:	1c5a      	adds	r2, r3, #1
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	3b01      	subs	r3, #1
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d40:	3b01      	subs	r3, #1
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d48:	697a      	ldr	r2, [r7, #20]
 8001d4a:	6a39      	ldr	r1, [r7, #32]
 8001d4c:	68f8      	ldr	r0, [r7, #12]
 8001d4e:	f000 fe2a 	bl	80029a6 <I2C_WaitOnBTFFlagUntilTimeout>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d00d      	beq.n	8001d74 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5c:	2b04      	cmp	r3, #4
 8001d5e:	d107      	bne.n	8001d70 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d6e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e01a      	b.n	8001daa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d194      	bne.n	8001ca6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2220      	movs	r2, #32
 8001d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001da4:	2300      	movs	r3, #0
 8001da6:	e000      	b.n	8001daa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001da8:	2302      	movs	r3, #2
  }
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3718      	adds	r7, #24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	00100002 	.word	0x00100002
 8001db8:	ffff0000 	.word	0xffff0000

08001dbc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b08c      	sub	sp, #48	; 0x30
 8001dc0:	af02      	add	r7, sp, #8
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	607a      	str	r2, [r7, #4]
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	460b      	mov	r3, r1
 8001dca:	817b      	strh	r3, [r7, #10]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001dd0:	f7ff fa94 	bl	80012fc <HAL_GetTick>
 8001dd4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b20      	cmp	r3, #32
 8001de0:	f040 8213 	bne.w	800220a <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	2319      	movs	r3, #25
 8001dea:	2201      	movs	r2, #1
 8001dec:	497e      	ldr	r1, [pc, #504]	; (8001fe8 <HAL_I2C_Master_Receive+0x22c>)
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f000 fcc2 	bl	8002778 <I2C_WaitOnFlagUntilTimeout>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	e206      	b.n	800220c <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d101      	bne.n	8001e0c <HAL_I2C_Master_Receive+0x50>
 8001e08:	2302      	movs	r3, #2
 8001e0a:	e1ff      	b.n	800220c <HAL_I2C_Master_Receive+0x450>
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d007      	beq.n	8001e32 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f042 0201 	orr.w	r2, r2, #1
 8001e30:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e40:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2222      	movs	r2, #34	; 0x22
 8001e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2210      	movs	r2, #16
 8001e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2200      	movs	r2, #0
 8001e56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	893a      	ldrh	r2, [r7, #8]
 8001e62:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e68:	b29a      	uxth	r2, r3
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	4a5e      	ldr	r2, [pc, #376]	; (8001fec <HAL_I2C_Master_Receive+0x230>)
 8001e72:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e74:	8979      	ldrh	r1, [r7, #10]
 8001e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e7a:	68f8      	ldr	r0, [r7, #12]
 8001e7c:	f000 fb3c 	bl	80024f8 <I2C_MasterRequestRead>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e1c0      	b.n	800220c <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d113      	bne.n	8001eba <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e92:	2300      	movs	r3, #0
 8001e94:	623b      	str	r3, [r7, #32]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	695b      	ldr	r3, [r3, #20]
 8001e9c:	623b      	str	r3, [r7, #32]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	623b      	str	r3, [r7, #32]
 8001ea6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	e194      	b.n	80021e4 <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d11d      	bne.n	8001efe <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ed0:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ed2:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	61fb      	str	r3, [r7, #28]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	61fb      	str	r3, [r7, #28]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	61fb      	str	r3, [r7, #28]
 8001ee8:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ef8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001efa:	b662      	cpsie	i
 8001efc:	e172      	b.n	80021e4 <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d11d      	bne.n	8001f42 <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f14:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f16:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f18:	2300      	movs	r3, #0
 8001f1a:	61bb      	str	r3, [r7, #24]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	61bb      	str	r3, [r7, #24]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	61bb      	str	r3, [r7, #24]
 8001f2c:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f3c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001f3e:	b662      	cpsie	i
 8001f40:	e150      	b.n	80021e4 <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f52:	2300      	movs	r3, #0
 8001f54:	617b      	str	r3, [r7, #20]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	695b      	ldr	r3, [r3, #20]
 8001f5c:	617b      	str	r3, [r7, #20]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	617b      	str	r3, [r7, #20]
 8001f66:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001f68:	e13c      	b.n	80021e4 <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f6e:	2b03      	cmp	r3, #3
 8001f70:	f200 80f5 	bhi.w	800215e <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d123      	bne.n	8001fc4 <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f80:	68f8      	ldr	r0, [r7, #12]
 8001f82:	f000 fd51 	bl	8002a28 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e13d      	b.n	800220c <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	691a      	ldr	r2, [r3, #16]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9a:	b2d2      	uxtb	r2, r2
 8001f9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa2:	1c5a      	adds	r2, r3, #1
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fac:	3b01      	subs	r3, #1
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001fc2:	e10f      	b.n	80021e4 <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d150      	bne.n	800206e <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	9300      	str	r3, [sp, #0]
 8001fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	4906      	ldr	r1, [pc, #24]	; (8001ff0 <HAL_I2C_Master_Receive+0x234>)
 8001fd6:	68f8      	ldr	r0, [r7, #12]
 8001fd8:	f000 fbce 	bl	8002778 <I2C_WaitOnFlagUntilTimeout>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d008      	beq.n	8001ff4 <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e112      	b.n	800220c <HAL_I2C_Master_Receive+0x450>
 8001fe6:	bf00      	nop
 8001fe8:	00100002 	.word	0x00100002
 8001fec:	ffff0000 	.word	0xffff0000
 8001ff0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001ff4:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002004:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	691a      	ldr	r2, [r3, #16]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002010:	b2d2      	uxtb	r2, r2
 8002012:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002018:	1c5a      	adds	r2, r3, #1
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002022:	3b01      	subs	r3, #1
 8002024:	b29a      	uxth	r2, r3
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800202e:	b29b      	uxth	r3, r3
 8002030:	3b01      	subs	r3, #1
 8002032:	b29a      	uxth	r2, r3
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002038:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	691a      	ldr	r2, [r3, #16]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002044:	b2d2      	uxtb	r2, r2
 8002046:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204c:	1c5a      	adds	r2, r3, #1
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002056:	3b01      	subs	r3, #1
 8002058:	b29a      	uxth	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002062:	b29b      	uxth	r3, r3
 8002064:	3b01      	subs	r3, #1
 8002066:	b29a      	uxth	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800206c:	e0ba      	b.n	80021e4 <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	9300      	str	r3, [sp, #0]
 8002072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002074:	2200      	movs	r2, #0
 8002076:	4967      	ldr	r1, [pc, #412]	; (8002214 <HAL_I2C_Master_Receive+0x458>)
 8002078:	68f8      	ldr	r0, [r7, #12]
 800207a:	f000 fb7d 	bl	8002778 <I2C_WaitOnFlagUntilTimeout>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e0c1      	b.n	800220c <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002096:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002098:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	691a      	ldr	r2, [r3, #16]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a4:	b2d2      	uxtb	r2, r2
 80020a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ac:	1c5a      	adds	r2, r3, #1
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b6:	3b01      	subs	r3, #1
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	3b01      	subs	r3, #1
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020d2:	2200      	movs	r2, #0
 80020d4:	494f      	ldr	r1, [pc, #316]	; (8002214 <HAL_I2C_Master_Receive+0x458>)
 80020d6:	68f8      	ldr	r0, [r7, #12]
 80020d8:	f000 fb4e 	bl	8002778 <I2C_WaitOnFlagUntilTimeout>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e092      	b.n	800220c <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020f4:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	691a      	ldr	r2, [r3, #16]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002100:	b2d2      	uxtb	r2, r2
 8002102:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002108:	1c5a      	adds	r2, r3, #1
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002112:	3b01      	subs	r3, #1
 8002114:	b29a      	uxth	r2, r3
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800211e:	b29b      	uxth	r3, r3
 8002120:	3b01      	subs	r3, #1
 8002122:	b29a      	uxth	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002128:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	691a      	ldr	r2, [r3, #16]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	b2d2      	uxtb	r2, r2
 8002136:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213c:	1c5a      	adds	r2, r3, #1
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002146:	3b01      	subs	r3, #1
 8002148:	b29a      	uxth	r2, r3
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002152:	b29b      	uxth	r3, r3
 8002154:	3b01      	subs	r3, #1
 8002156:	b29a      	uxth	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800215c:	e042      	b.n	80021e4 <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800215e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002160:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002162:	68f8      	ldr	r0, [r7, #12]
 8002164:	f000 fc60 	bl	8002a28 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e04c      	b.n	800220c <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	691a      	ldr	r2, [r3, #16]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217c:	b2d2      	uxtb	r2, r2
 800217e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002184:	1c5a      	adds	r2, r3, #1
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800218e:	3b01      	subs	r3, #1
 8002190:	b29a      	uxth	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800219a:	b29b      	uxth	r3, r3
 800219c:	3b01      	subs	r3, #1
 800219e:	b29a      	uxth	r2, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	f003 0304 	and.w	r3, r3, #4
 80021ae:	2b04      	cmp	r3, #4
 80021b0:	d118      	bne.n	80021e4 <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	691a      	ldr	r2, [r3, #16]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021bc:	b2d2      	uxtb	r2, r2
 80021be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c4:	1c5a      	adds	r2, r3, #1
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ce:	3b01      	subs	r3, #1
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021da:	b29b      	uxth	r3, r3
 80021dc:	3b01      	subs	r3, #1
 80021de:	b29a      	uxth	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f47f aebe 	bne.w	8001f6a <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2220      	movs	r2, #32
 80021f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002206:	2300      	movs	r3, #0
 8002208:	e000      	b.n	800220c <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 800220a:	2302      	movs	r3, #2
  }
}
 800220c:	4618      	mov	r0, r3
 800220e:	3728      	adds	r7, #40	; 0x28
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	00010004 	.word	0x00010004

08002218 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b088      	sub	sp, #32
 800221c:	af02      	add	r7, sp, #8
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	4608      	mov	r0, r1
 8002222:	4611      	mov	r1, r2
 8002224:	461a      	mov	r2, r3
 8002226:	4603      	mov	r3, r0
 8002228:	817b      	strh	r3, [r7, #10]
 800222a:	460b      	mov	r3, r1
 800222c:	813b      	strh	r3, [r7, #8]
 800222e:	4613      	mov	r3, r2
 8002230:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002232:	f7ff f863 	bl	80012fc <HAL_GetTick>
 8002236:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2b20      	cmp	r3, #32
 8002242:	f040 80d9 	bne.w	80023f8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	2319      	movs	r3, #25
 800224c:	2201      	movs	r2, #1
 800224e:	496d      	ldr	r1, [pc, #436]	; (8002404 <HAL_I2C_Mem_Write+0x1ec>)
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	f000 fa91 	bl	8002778 <I2C_WaitOnFlagUntilTimeout>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800225c:	2302      	movs	r3, #2
 800225e:	e0cc      	b.n	80023fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002266:	2b01      	cmp	r3, #1
 8002268:	d101      	bne.n	800226e <HAL_I2C_Mem_Write+0x56>
 800226a:	2302      	movs	r3, #2
 800226c:	e0c5      	b.n	80023fa <HAL_I2C_Mem_Write+0x1e2>
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2201      	movs	r2, #1
 8002272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	2b01      	cmp	r3, #1
 8002282:	d007      	beq.n	8002294 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f042 0201 	orr.w	r2, r2, #1
 8002292:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2221      	movs	r2, #33	; 0x21
 80022a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2240      	movs	r2, #64	; 0x40
 80022b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2200      	movs	r2, #0
 80022b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6a3a      	ldr	r2, [r7, #32]
 80022be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80022c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ca:	b29a      	uxth	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	4a4d      	ldr	r2, [pc, #308]	; (8002408 <HAL_I2C_Mem_Write+0x1f0>)
 80022d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022d6:	88f8      	ldrh	r0, [r7, #6]
 80022d8:	893a      	ldrh	r2, [r7, #8]
 80022da:	8979      	ldrh	r1, [r7, #10]
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	9301      	str	r3, [sp, #4]
 80022e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	4603      	mov	r3, r0
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	f000 f9bc 	bl	8002664 <I2C_RequestMemoryWrite>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d052      	beq.n	8002398 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e081      	b.n	80023fa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022f6:	697a      	ldr	r2, [r7, #20]
 80022f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f000 fb12 	bl	8002924 <I2C_WaitOnTXEFlagUntilTimeout>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d00d      	beq.n	8002322 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	2b04      	cmp	r3, #4
 800230c:	d107      	bne.n	800231e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800231c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e06b      	b.n	80023fa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002326:	781a      	ldrb	r2, [r3, #0]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002332:	1c5a      	adds	r2, r3, #1
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800233c:	3b01      	subs	r3, #1
 800233e:	b29a      	uxth	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002348:	b29b      	uxth	r3, r3
 800234a:	3b01      	subs	r3, #1
 800234c:	b29a      	uxth	r2, r3
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	695b      	ldr	r3, [r3, #20]
 8002358:	f003 0304 	and.w	r3, r3, #4
 800235c:	2b04      	cmp	r3, #4
 800235e:	d11b      	bne.n	8002398 <HAL_I2C_Mem_Write+0x180>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002364:	2b00      	cmp	r3, #0
 8002366:	d017      	beq.n	8002398 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236c:	781a      	ldrb	r2, [r3, #0]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002378:	1c5a      	adds	r2, r3, #1
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002382:	3b01      	subs	r3, #1
 8002384:	b29a      	uxth	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800238e:	b29b      	uxth	r3, r3
 8002390:	3b01      	subs	r3, #1
 8002392:	b29a      	uxth	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800239c:	2b00      	cmp	r3, #0
 800239e:	d1aa      	bne.n	80022f6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023a0:	697a      	ldr	r2, [r7, #20]
 80023a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f000 fafe 	bl	80029a6 <I2C_WaitOnBTFFlagUntilTimeout>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d00d      	beq.n	80023cc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b4:	2b04      	cmp	r3, #4
 80023b6:	d107      	bne.n	80023c8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023c6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e016      	b.n	80023fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2220      	movs	r2, #32
 80023e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80023f4:	2300      	movs	r3, #0
 80023f6:	e000      	b.n	80023fa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80023f8:	2302      	movs	r3, #2
  }
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3718      	adds	r7, #24
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	00100002 	.word	0x00100002
 8002408:	ffff0000 	.word	0xffff0000

0800240c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b088      	sub	sp, #32
 8002410:	af02      	add	r7, sp, #8
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	607a      	str	r2, [r7, #4]
 8002416:	603b      	str	r3, [r7, #0]
 8002418:	460b      	mov	r3, r1
 800241a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002420:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	2b08      	cmp	r3, #8
 8002426:	d006      	beq.n	8002436 <I2C_MasterRequestWrite+0x2a>
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d003      	beq.n	8002436 <I2C_MasterRequestWrite+0x2a>
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002434:	d108      	bne.n	8002448 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	e00b      	b.n	8002460 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244c:	2b12      	cmp	r3, #18
 800244e:	d107      	bne.n	8002460 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800245e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800246c:	68f8      	ldr	r0, [r7, #12]
 800246e:	f000 f983 	bl	8002778 <I2C_WaitOnFlagUntilTimeout>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e035      	b.n	80024e8 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002484:	d108      	bne.n	8002498 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002486:	897b      	ldrh	r3, [r7, #10]
 8002488:	b2db      	uxtb	r3, r3
 800248a:	461a      	mov	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002494:	611a      	str	r2, [r3, #16]
 8002496:	e01b      	b.n	80024d0 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002498:	897b      	ldrh	r3, [r7, #10]
 800249a:	11db      	asrs	r3, r3, #7
 800249c:	b2db      	uxtb	r3, r3
 800249e:	f003 0306 	and.w	r3, r3, #6
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	f063 030f 	orn	r3, r3, #15
 80024a8:	b2da      	uxtb	r2, r3
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	490e      	ldr	r1, [pc, #56]	; (80024f0 <I2C_MasterRequestWrite+0xe4>)
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f000 f9b5 	bl	8002826 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e010      	b.n	80024e8 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80024c6:	897b      	ldrh	r3, [r7, #10]
 80024c8:	b2da      	uxtb	r2, r3
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	4907      	ldr	r1, [pc, #28]	; (80024f4 <I2C_MasterRequestWrite+0xe8>)
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f000 f9a5 	bl	8002826 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e000      	b.n	80024e8 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3718      	adds	r7, #24
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	00010008 	.word	0x00010008
 80024f4:	00010002 	.word	0x00010002

080024f8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b088      	sub	sp, #32
 80024fc:	af02      	add	r7, sp, #8
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	607a      	str	r2, [r7, #4]
 8002502:	603b      	str	r3, [r7, #0]
 8002504:	460b      	mov	r3, r1
 8002506:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800251c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	2b08      	cmp	r3, #8
 8002522:	d006      	beq.n	8002532 <I2C_MasterRequestRead+0x3a>
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d003      	beq.n	8002532 <I2C_MasterRequestRead+0x3a>
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002530:	d108      	bne.n	8002544 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	e00b      	b.n	800255c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002548:	2b11      	cmp	r3, #17
 800254a:	d107      	bne.n	800255c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800255a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f000 f905 	bl	8002778 <I2C_WaitOnFlagUntilTimeout>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e06d      	b.n	8002654 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002580:	d108      	bne.n	8002594 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002582:	897b      	ldrh	r3, [r7, #10]
 8002584:	b2db      	uxtb	r3, r3
 8002586:	f043 0301 	orr.w	r3, r3, #1
 800258a:	b2da      	uxtb	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	611a      	str	r2, [r3, #16]
 8002592:	e053      	b.n	800263c <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002594:	897b      	ldrh	r3, [r7, #10]
 8002596:	11db      	asrs	r3, r3, #7
 8002598:	b2db      	uxtb	r3, r3
 800259a:	f003 0306 	and.w	r3, r3, #6
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	f063 030f 	orn	r3, r3, #15
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	492a      	ldr	r1, [pc, #168]	; (800265c <I2C_MasterRequestRead+0x164>)
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	f000 f937 	bl	8002826 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e048      	b.n	8002654 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80025c2:	897b      	ldrh	r3, [r7, #10]
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	4923      	ldr	r1, [pc, #140]	; (8002660 <I2C_MasterRequestRead+0x168>)
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f000 f927 	bl	8002826 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e038      	b.n	8002654 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025e2:	2300      	movs	r3, #0
 80025e4:	613b      	str	r3, [r7, #16]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	695b      	ldr	r3, [r3, #20]
 80025ec:	613b      	str	r3, [r7, #16]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	613b      	str	r3, [r7, #16]
 80025f6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002606:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f000 f8af 	bl	8002778 <I2C_WaitOnFlagUntilTimeout>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e017      	b.n	8002654 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002624:	897b      	ldrh	r3, [r7, #10]
 8002626:	11db      	asrs	r3, r3, #7
 8002628:	b2db      	uxtb	r3, r3
 800262a:	f003 0306 	and.w	r3, r3, #6
 800262e:	b2db      	uxtb	r3, r3
 8002630:	f063 030e 	orn	r3, r3, #14
 8002634:	b2da      	uxtb	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	4907      	ldr	r1, [pc, #28]	; (8002660 <I2C_MasterRequestRead+0x168>)
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f000 f8ef 	bl	8002826 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e000      	b.n	8002654 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3718      	adds	r7, #24
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	00010008 	.word	0x00010008
 8002660:	00010002 	.word	0x00010002

08002664 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b088      	sub	sp, #32
 8002668:	af02      	add	r7, sp, #8
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	4608      	mov	r0, r1
 800266e:	4611      	mov	r1, r2
 8002670:	461a      	mov	r2, r3
 8002672:	4603      	mov	r3, r0
 8002674:	817b      	strh	r3, [r7, #10]
 8002676:	460b      	mov	r3, r1
 8002678:	813b      	strh	r3, [r7, #8]
 800267a:	4613      	mov	r3, r2
 800267c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800268c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	6a3b      	ldr	r3, [r7, #32]
 8002694:	2200      	movs	r2, #0
 8002696:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 f86c 	bl	8002778 <I2C_WaitOnFlagUntilTimeout>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e05f      	b.n	800276a <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026aa:	897b      	ldrh	r3, [r7, #10]
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	461a      	mov	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80026b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026bc:	6a3a      	ldr	r2, [r7, #32]
 80026be:	492d      	ldr	r1, [pc, #180]	; (8002774 <I2C_RequestMemoryWrite+0x110>)
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f000 f8b0 	bl	8002826 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e04c      	b.n	800276a <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026d0:	2300      	movs	r3, #0
 80026d2:	617b      	str	r3, [r7, #20]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	617b      	str	r3, [r7, #20]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	617b      	str	r3, [r7, #20]
 80026e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026e8:	6a39      	ldr	r1, [r7, #32]
 80026ea:	68f8      	ldr	r0, [r7, #12]
 80026ec:	f000 f91a 	bl	8002924 <I2C_WaitOnTXEFlagUntilTimeout>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00d      	beq.n	8002712 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	d107      	bne.n	800270e <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800270c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e02b      	b.n	800276a <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002712:	88fb      	ldrh	r3, [r7, #6]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d105      	bne.n	8002724 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002718:	893b      	ldrh	r3, [r7, #8]
 800271a:	b2da      	uxtb	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	611a      	str	r2, [r3, #16]
 8002722:	e021      	b.n	8002768 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002724:	893b      	ldrh	r3, [r7, #8]
 8002726:	0a1b      	lsrs	r3, r3, #8
 8002728:	b29b      	uxth	r3, r3
 800272a:	b2da      	uxtb	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002734:	6a39      	ldr	r1, [r7, #32]
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f000 f8f4 	bl	8002924 <I2C_WaitOnTXEFlagUntilTimeout>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00d      	beq.n	800275e <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	2b04      	cmp	r3, #4
 8002748:	d107      	bne.n	800275a <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002758:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e005      	b.n	800276a <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800275e:	893b      	ldrh	r3, [r7, #8]
 8002760:	b2da      	uxtb	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3718      	adds	r7, #24
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	00010002 	.word	0x00010002

08002778 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	603b      	str	r3, [r7, #0]
 8002784:	4613      	mov	r3, r2
 8002786:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002788:	e025      	b.n	80027d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002790:	d021      	beq.n	80027d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002792:	f7fe fdb3 	bl	80012fc <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d302      	bcc.n	80027a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d116      	bne.n	80027d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2200      	movs	r2, #0
 80027ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2220      	movs	r2, #32
 80027b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c2:	f043 0220 	orr.w	r2, r3, #32
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e023      	b.n	800281e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	0c1b      	lsrs	r3, r3, #16
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d10d      	bne.n	80027fc <I2C_WaitOnFlagUntilTimeout+0x84>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	43da      	mvns	r2, r3
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	4013      	ands	r3, r2
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	bf0c      	ite	eq
 80027f2:	2301      	moveq	r3, #1
 80027f4:	2300      	movne	r3, #0
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	461a      	mov	r2, r3
 80027fa:	e00c      	b.n	8002816 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	43da      	mvns	r2, r3
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	4013      	ands	r3, r2
 8002808:	b29b      	uxth	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	bf0c      	ite	eq
 800280e:	2301      	moveq	r3, #1
 8002810:	2300      	movne	r3, #0
 8002812:	b2db      	uxtb	r3, r3
 8002814:	461a      	mov	r2, r3
 8002816:	79fb      	ldrb	r3, [r7, #7]
 8002818:	429a      	cmp	r2, r3
 800281a:	d0b6      	beq.n	800278a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b084      	sub	sp, #16
 800282a:	af00      	add	r7, sp, #0
 800282c:	60f8      	str	r0, [r7, #12]
 800282e:	60b9      	str	r1, [r7, #8]
 8002830:	607a      	str	r2, [r7, #4]
 8002832:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002834:	e051      	b.n	80028da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002840:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002844:	d123      	bne.n	800288e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002854:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800285e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2220      	movs	r2, #32
 800286a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	f043 0204 	orr.w	r2, r3, #4
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e046      	b.n	800291c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002894:	d021      	beq.n	80028da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002896:	f7fe fd31 	bl	80012fc <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d302      	bcc.n	80028ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d116      	bne.n	80028da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2220      	movs	r2, #32
 80028b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	f043 0220 	orr.w	r2, r3, #32
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e020      	b.n	800291c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	0c1b      	lsrs	r3, r3, #16
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d10c      	bne.n	80028fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	43da      	mvns	r2, r3
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	4013      	ands	r3, r2
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	bf14      	ite	ne
 80028f6:	2301      	movne	r3, #1
 80028f8:	2300      	moveq	r3, #0
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	e00b      	b.n	8002916 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	43da      	mvns	r2, r3
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	4013      	ands	r3, r2
 800290a:	b29b      	uxth	r3, r3
 800290c:	2b00      	cmp	r3, #0
 800290e:	bf14      	ite	ne
 8002910:	2301      	movne	r3, #1
 8002912:	2300      	moveq	r3, #0
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d18d      	bne.n	8002836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002930:	e02d      	b.n	800298e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	f000 f8ce 	bl	8002ad4 <I2C_IsAcknowledgeFailed>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e02d      	b.n	800299e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002948:	d021      	beq.n	800298e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800294a:	f7fe fcd7 	bl	80012fc <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	68ba      	ldr	r2, [r7, #8]
 8002956:	429a      	cmp	r2, r3
 8002958:	d302      	bcc.n	8002960 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d116      	bne.n	800298e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2200      	movs	r2, #0
 8002964:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2220      	movs	r2, #32
 800296a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	f043 0220 	orr.w	r2, r3, #32
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e007      	b.n	800299e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002998:	2b80      	cmp	r3, #128	; 0x80
 800299a:	d1ca      	bne.n	8002932 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b084      	sub	sp, #16
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	60f8      	str	r0, [r7, #12]
 80029ae:	60b9      	str	r1, [r7, #8]
 80029b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029b2:	e02d      	b.n	8002a10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f000 f88d 	bl	8002ad4 <I2C_IsAcknowledgeFailed>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e02d      	b.n	8002a20 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ca:	d021      	beq.n	8002a10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029cc:	f7fe fc96 	bl	80012fc <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	68ba      	ldr	r2, [r7, #8]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d302      	bcc.n	80029e2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d116      	bne.n	8002a10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2220      	movs	r2, #32
 80029ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fc:	f043 0220 	orr.w	r2, r3, #32
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e007      	b.n	8002a20 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	f003 0304 	and.w	r3, r3, #4
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	d1ca      	bne.n	80029b4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3710      	adds	r7, #16
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a34:	e042      	b.n	8002abc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	695b      	ldr	r3, [r3, #20]
 8002a3c:	f003 0310 	and.w	r3, r3, #16
 8002a40:	2b10      	cmp	r3, #16
 8002a42:	d119      	bne.n	8002a78 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f06f 0210 	mvn.w	r2, #16
 8002a4c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2200      	movs	r2, #0
 8002a52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2220      	movs	r2, #32
 8002a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e029      	b.n	8002acc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a78:	f7fe fc40 	bl	80012fc <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	68ba      	ldr	r2, [r7, #8]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d302      	bcc.n	8002a8e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d116      	bne.n	8002abc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2220      	movs	r2, #32
 8002a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa8:	f043 0220 	orr.w	r2, r3, #32
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e007      	b.n	8002acc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac6:	2b40      	cmp	r3, #64	; 0x40
 8002ac8:	d1b5      	bne.n	8002a36 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3710      	adds	r7, #16
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aea:	d11b      	bne.n	8002b24 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002af4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2220      	movs	r2, #32
 8002b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b10:	f043 0204 	orr.w	r2, r3, #4
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e000      	b.n	8002b26 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bc80      	pop	{r7}
 8002b2e:	4770      	bx	lr

08002b30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e26c      	b.n	800301c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f000 8087 	beq.w	8002c5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b50:	4b92      	ldr	r3, [pc, #584]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f003 030c 	and.w	r3, r3, #12
 8002b58:	2b04      	cmp	r3, #4
 8002b5a:	d00c      	beq.n	8002b76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b5c:	4b8f      	ldr	r3, [pc, #572]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f003 030c 	and.w	r3, r3, #12
 8002b64:	2b08      	cmp	r3, #8
 8002b66:	d112      	bne.n	8002b8e <HAL_RCC_OscConfig+0x5e>
 8002b68:	4b8c      	ldr	r3, [pc, #560]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b74:	d10b      	bne.n	8002b8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b76:	4b89      	ldr	r3, [pc, #548]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d06c      	beq.n	8002c5c <HAL_RCC_OscConfig+0x12c>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d168      	bne.n	8002c5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e246      	b.n	800301c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b96:	d106      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x76>
 8002b98:	4b80      	ldr	r3, [pc, #512]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a7f      	ldr	r2, [pc, #508]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002b9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba2:	6013      	str	r3, [r2, #0]
 8002ba4:	e02e      	b.n	8002c04 <HAL_RCC_OscConfig+0xd4>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10c      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x98>
 8002bae:	4b7b      	ldr	r3, [pc, #492]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a7a      	ldr	r2, [pc, #488]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002bb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bb8:	6013      	str	r3, [r2, #0]
 8002bba:	4b78      	ldr	r3, [pc, #480]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a77      	ldr	r2, [pc, #476]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002bc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bc4:	6013      	str	r3, [r2, #0]
 8002bc6:	e01d      	b.n	8002c04 <HAL_RCC_OscConfig+0xd4>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bd0:	d10c      	bne.n	8002bec <HAL_RCC_OscConfig+0xbc>
 8002bd2:	4b72      	ldr	r3, [pc, #456]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a71      	ldr	r2, [pc, #452]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002bd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bdc:	6013      	str	r3, [r2, #0]
 8002bde:	4b6f      	ldr	r3, [pc, #444]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a6e      	ldr	r2, [pc, #440]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be8:	6013      	str	r3, [r2, #0]
 8002bea:	e00b      	b.n	8002c04 <HAL_RCC_OscConfig+0xd4>
 8002bec:	4b6b      	ldr	r3, [pc, #428]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a6a      	ldr	r2, [pc, #424]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002bf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bf6:	6013      	str	r3, [r2, #0]
 8002bf8:	4b68      	ldr	r3, [pc, #416]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a67      	ldr	r2, [pc, #412]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002bfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d013      	beq.n	8002c34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0c:	f7fe fb76 	bl	80012fc <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c14:	f7fe fb72 	bl	80012fc <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b64      	cmp	r3, #100	; 0x64
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e1fa      	b.n	800301c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c26:	4b5d      	ldr	r3, [pc, #372]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0f0      	beq.n	8002c14 <HAL_RCC_OscConfig+0xe4>
 8002c32:	e014      	b.n	8002c5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c34:	f7fe fb62 	bl	80012fc <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c3c:	f7fe fb5e 	bl	80012fc <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b64      	cmp	r3, #100	; 0x64
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e1e6      	b.n	800301c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c4e:	4b53      	ldr	r3, [pc, #332]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1f0      	bne.n	8002c3c <HAL_RCC_OscConfig+0x10c>
 8002c5a:	e000      	b.n	8002c5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d063      	beq.n	8002d32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c6a:	4b4c      	ldr	r3, [pc, #304]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f003 030c 	and.w	r3, r3, #12
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00b      	beq.n	8002c8e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c76:	4b49      	ldr	r3, [pc, #292]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f003 030c 	and.w	r3, r3, #12
 8002c7e:	2b08      	cmp	r3, #8
 8002c80:	d11c      	bne.n	8002cbc <HAL_RCC_OscConfig+0x18c>
 8002c82:	4b46      	ldr	r3, [pc, #280]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d116      	bne.n	8002cbc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c8e:	4b43      	ldr	r3, [pc, #268]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d005      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x176>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d001      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e1ba      	b.n	800301c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ca6:	4b3d      	ldr	r3, [pc, #244]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	4939      	ldr	r1, [pc, #228]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cba:	e03a      	b.n	8002d32 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d020      	beq.n	8002d06 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cc4:	4b36      	ldr	r3, [pc, #216]	; (8002da0 <HAL_RCC_OscConfig+0x270>)
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cca:	f7fe fb17 	bl	80012fc <HAL_GetTick>
 8002cce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd0:	e008      	b.n	8002ce4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cd2:	f7fe fb13 	bl	80012fc <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e19b      	b.n	800301c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce4:	4b2d      	ldr	r3, [pc, #180]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d0f0      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf0:	4b2a      	ldr	r3, [pc, #168]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	695b      	ldr	r3, [r3, #20]
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	4927      	ldr	r1, [pc, #156]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	600b      	str	r3, [r1, #0]
 8002d04:	e015      	b.n	8002d32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d06:	4b26      	ldr	r3, [pc, #152]	; (8002da0 <HAL_RCC_OscConfig+0x270>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d0c:	f7fe faf6 	bl	80012fc <HAL_GetTick>
 8002d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d12:	e008      	b.n	8002d26 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d14:	f7fe faf2 	bl	80012fc <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e17a      	b.n	800301c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d26:	4b1d      	ldr	r3, [pc, #116]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1f0      	bne.n	8002d14 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0308 	and.w	r3, r3, #8
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d03a      	beq.n	8002db4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d019      	beq.n	8002d7a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d46:	4b17      	ldr	r3, [pc, #92]	; (8002da4 <HAL_RCC_OscConfig+0x274>)
 8002d48:	2201      	movs	r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d4c:	f7fe fad6 	bl	80012fc <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d52:	e008      	b.n	8002d66 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d54:	f7fe fad2 	bl	80012fc <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e15a      	b.n	800301c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d66:	4b0d      	ldr	r3, [pc, #52]	; (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d0f0      	beq.n	8002d54 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d72:	2001      	movs	r0, #1
 8002d74:	f000 fada 	bl	800332c <RCC_Delay>
 8002d78:	e01c      	b.n	8002db4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d7a:	4b0a      	ldr	r3, [pc, #40]	; (8002da4 <HAL_RCC_OscConfig+0x274>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d80:	f7fe fabc 	bl	80012fc <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d86:	e00f      	b.n	8002da8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d88:	f7fe fab8 	bl	80012fc <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d908      	bls.n	8002da8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e140      	b.n	800301c <HAL_RCC_OscConfig+0x4ec>
 8002d9a:	bf00      	nop
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	42420000 	.word	0x42420000
 8002da4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002da8:	4b9e      	ldr	r3, [pc, #632]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1e9      	bne.n	8002d88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0304 	and.w	r3, r3, #4
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 80a6 	beq.w	8002f0e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dc6:	4b97      	ldr	r3, [pc, #604]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10d      	bne.n	8002dee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dd2:	4b94      	ldr	r3, [pc, #592]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	4a93      	ldr	r2, [pc, #588]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ddc:	61d3      	str	r3, [r2, #28]
 8002dde:	4b91      	ldr	r3, [pc, #580]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de6:	60bb      	str	r3, [r7, #8]
 8002de8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dea:	2301      	movs	r3, #1
 8002dec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dee:	4b8e      	ldr	r3, [pc, #568]	; (8003028 <HAL_RCC_OscConfig+0x4f8>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d118      	bne.n	8002e2c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dfa:	4b8b      	ldr	r3, [pc, #556]	; (8003028 <HAL_RCC_OscConfig+0x4f8>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a8a      	ldr	r2, [pc, #552]	; (8003028 <HAL_RCC_OscConfig+0x4f8>)
 8002e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e06:	f7fe fa79 	bl	80012fc <HAL_GetTick>
 8002e0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e0c:	e008      	b.n	8002e20 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e0e:	f7fe fa75 	bl	80012fc <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b64      	cmp	r3, #100	; 0x64
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e0fd      	b.n	800301c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e20:	4b81      	ldr	r3, [pc, #516]	; (8003028 <HAL_RCC_OscConfig+0x4f8>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d0f0      	beq.n	8002e0e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d106      	bne.n	8002e42 <HAL_RCC_OscConfig+0x312>
 8002e34:	4b7b      	ldr	r3, [pc, #492]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	4a7a      	ldr	r2, [pc, #488]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002e3a:	f043 0301 	orr.w	r3, r3, #1
 8002e3e:	6213      	str	r3, [r2, #32]
 8002e40:	e02d      	b.n	8002e9e <HAL_RCC_OscConfig+0x36e>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d10c      	bne.n	8002e64 <HAL_RCC_OscConfig+0x334>
 8002e4a:	4b76      	ldr	r3, [pc, #472]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	4a75      	ldr	r2, [pc, #468]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002e50:	f023 0301 	bic.w	r3, r3, #1
 8002e54:	6213      	str	r3, [r2, #32]
 8002e56:	4b73      	ldr	r3, [pc, #460]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	4a72      	ldr	r2, [pc, #456]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002e5c:	f023 0304 	bic.w	r3, r3, #4
 8002e60:	6213      	str	r3, [r2, #32]
 8002e62:	e01c      	b.n	8002e9e <HAL_RCC_OscConfig+0x36e>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	2b05      	cmp	r3, #5
 8002e6a:	d10c      	bne.n	8002e86 <HAL_RCC_OscConfig+0x356>
 8002e6c:	4b6d      	ldr	r3, [pc, #436]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	4a6c      	ldr	r2, [pc, #432]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002e72:	f043 0304 	orr.w	r3, r3, #4
 8002e76:	6213      	str	r3, [r2, #32]
 8002e78:	4b6a      	ldr	r3, [pc, #424]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	4a69      	ldr	r2, [pc, #420]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002e7e:	f043 0301 	orr.w	r3, r3, #1
 8002e82:	6213      	str	r3, [r2, #32]
 8002e84:	e00b      	b.n	8002e9e <HAL_RCC_OscConfig+0x36e>
 8002e86:	4b67      	ldr	r3, [pc, #412]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	4a66      	ldr	r2, [pc, #408]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002e8c:	f023 0301 	bic.w	r3, r3, #1
 8002e90:	6213      	str	r3, [r2, #32]
 8002e92:	4b64      	ldr	r3, [pc, #400]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	4a63      	ldr	r2, [pc, #396]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002e98:	f023 0304 	bic.w	r3, r3, #4
 8002e9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d015      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ea6:	f7fe fa29 	bl	80012fc <HAL_GetTick>
 8002eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eac:	e00a      	b.n	8002ec4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eae:	f7fe fa25 	bl	80012fc <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e0ab      	b.n	800301c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ec4:	4b57      	ldr	r3, [pc, #348]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d0ee      	beq.n	8002eae <HAL_RCC_OscConfig+0x37e>
 8002ed0:	e014      	b.n	8002efc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ed2:	f7fe fa13 	bl	80012fc <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ed8:	e00a      	b.n	8002ef0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eda:	f7fe fa0f 	bl	80012fc <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d901      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e095      	b.n	800301c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ef0:	4b4c      	ldr	r3, [pc, #304]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1ee      	bne.n	8002eda <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002efc:	7dfb      	ldrb	r3, [r7, #23]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d105      	bne.n	8002f0e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f02:	4b48      	ldr	r3, [pc, #288]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	4a47      	ldr	r2, [pc, #284]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002f08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f0c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	69db      	ldr	r3, [r3, #28]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 8081 	beq.w	800301a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f18:	4b42      	ldr	r3, [pc, #264]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f003 030c 	and.w	r3, r3, #12
 8002f20:	2b08      	cmp	r3, #8
 8002f22:	d061      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	69db      	ldr	r3, [r3, #28]
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d146      	bne.n	8002fba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f2c:	4b3f      	ldr	r3, [pc, #252]	; (800302c <HAL_RCC_OscConfig+0x4fc>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f32:	f7fe f9e3 	bl	80012fc <HAL_GetTick>
 8002f36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f38:	e008      	b.n	8002f4c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f3a:	f7fe f9df 	bl	80012fc <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e067      	b.n	800301c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f4c:	4b35      	ldr	r3, [pc, #212]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1f0      	bne.n	8002f3a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f60:	d108      	bne.n	8002f74 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f62:	4b30      	ldr	r3, [pc, #192]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	492d      	ldr	r1, [pc, #180]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f74:	4b2b      	ldr	r3, [pc, #172]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a19      	ldr	r1, [r3, #32]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f84:	430b      	orrs	r3, r1
 8002f86:	4927      	ldr	r1, [pc, #156]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f8c:	4b27      	ldr	r3, [pc, #156]	; (800302c <HAL_RCC_OscConfig+0x4fc>)
 8002f8e:	2201      	movs	r2, #1
 8002f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f92:	f7fe f9b3 	bl	80012fc <HAL_GetTick>
 8002f96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f98:	e008      	b.n	8002fac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f9a:	f7fe f9af 	bl	80012fc <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e037      	b.n	800301c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fac:	4b1d      	ldr	r3, [pc, #116]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0f0      	beq.n	8002f9a <HAL_RCC_OscConfig+0x46a>
 8002fb8:	e02f      	b.n	800301a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fba:	4b1c      	ldr	r3, [pc, #112]	; (800302c <HAL_RCC_OscConfig+0x4fc>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc0:	f7fe f99c 	bl	80012fc <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fc6:	e008      	b.n	8002fda <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fc8:	f7fe f998 	bl	80012fc <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e020      	b.n	800301c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fda:	4b12      	ldr	r3, [pc, #72]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1f0      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x498>
 8002fe6:	e018      	b.n	800301a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	69db      	ldr	r3, [r3, #28]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d101      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e013      	b.n	800301c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ff4:	4b0b      	ldr	r3, [pc, #44]	; (8003024 <HAL_RCC_OscConfig+0x4f4>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a1b      	ldr	r3, [r3, #32]
 8003004:	429a      	cmp	r2, r3
 8003006:	d106      	bne.n	8003016 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003012:	429a      	cmp	r2, r3
 8003014:	d001      	beq.n	800301a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e000      	b.n	800301c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	3718      	adds	r7, #24
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	40021000 	.word	0x40021000
 8003028:	40007000 	.word	0x40007000
 800302c:	42420060 	.word	0x42420060

08003030 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d101      	bne.n	8003044 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e0d0      	b.n	80031e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003044:	4b6a      	ldr	r3, [pc, #424]	; (80031f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0307 	and.w	r3, r3, #7
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	429a      	cmp	r2, r3
 8003050:	d910      	bls.n	8003074 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003052:	4b67      	ldr	r3, [pc, #412]	; (80031f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f023 0207 	bic.w	r2, r3, #7
 800305a:	4965      	ldr	r1, [pc, #404]	; (80031f0 <HAL_RCC_ClockConfig+0x1c0>)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	4313      	orrs	r3, r2
 8003060:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003062:	4b63      	ldr	r3, [pc, #396]	; (80031f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0307 	and.w	r3, r3, #7
 800306a:	683a      	ldr	r2, [r7, #0]
 800306c:	429a      	cmp	r2, r3
 800306e:	d001      	beq.n	8003074 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e0b8      	b.n	80031e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d020      	beq.n	80030c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0304 	and.w	r3, r3, #4
 8003088:	2b00      	cmp	r3, #0
 800308a:	d005      	beq.n	8003098 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800308c:	4b59      	ldr	r3, [pc, #356]	; (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	4a58      	ldr	r2, [pc, #352]	; (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003092:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003096:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0308 	and.w	r3, r3, #8
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d005      	beq.n	80030b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030a4:	4b53      	ldr	r3, [pc, #332]	; (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	4a52      	ldr	r2, [pc, #328]	; (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 80030aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80030ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030b0:	4b50      	ldr	r3, [pc, #320]	; (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	494d      	ldr	r1, [pc, #308]	; (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d040      	beq.n	8003150 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d107      	bne.n	80030e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030d6:	4b47      	ldr	r3, [pc, #284]	; (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d115      	bne.n	800310e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e07f      	b.n	80031e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d107      	bne.n	80030fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ee:	4b41      	ldr	r3, [pc, #260]	; (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d109      	bne.n	800310e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e073      	b.n	80031e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030fe:	4b3d      	ldr	r3, [pc, #244]	; (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e06b      	b.n	80031e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800310e:	4b39      	ldr	r3, [pc, #228]	; (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f023 0203 	bic.w	r2, r3, #3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	4936      	ldr	r1, [pc, #216]	; (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 800311c:	4313      	orrs	r3, r2
 800311e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003120:	f7fe f8ec 	bl	80012fc <HAL_GetTick>
 8003124:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003126:	e00a      	b.n	800313e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003128:	f7fe f8e8 	bl	80012fc <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	f241 3288 	movw	r2, #5000	; 0x1388
 8003136:	4293      	cmp	r3, r2
 8003138:	d901      	bls.n	800313e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e053      	b.n	80031e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800313e:	4b2d      	ldr	r3, [pc, #180]	; (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f003 020c 	and.w	r2, r3, #12
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	429a      	cmp	r2, r3
 800314e:	d1eb      	bne.n	8003128 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003150:	4b27      	ldr	r3, [pc, #156]	; (80031f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0307 	and.w	r3, r3, #7
 8003158:	683a      	ldr	r2, [r7, #0]
 800315a:	429a      	cmp	r2, r3
 800315c:	d210      	bcs.n	8003180 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800315e:	4b24      	ldr	r3, [pc, #144]	; (80031f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f023 0207 	bic.w	r2, r3, #7
 8003166:	4922      	ldr	r1, [pc, #136]	; (80031f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	4313      	orrs	r3, r2
 800316c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800316e:	4b20      	ldr	r3, [pc, #128]	; (80031f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0307 	and.w	r3, r3, #7
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	429a      	cmp	r2, r3
 800317a:	d001      	beq.n	8003180 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e032      	b.n	80031e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	2b00      	cmp	r3, #0
 800318a:	d008      	beq.n	800319e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800318c:	4b19      	ldr	r3, [pc, #100]	; (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	4916      	ldr	r1, [pc, #88]	; (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 800319a:	4313      	orrs	r3, r2
 800319c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0308 	and.w	r3, r3, #8
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d009      	beq.n	80031be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031aa:	4b12      	ldr	r3, [pc, #72]	; (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	490e      	ldr	r1, [pc, #56]	; (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031be:	f000 f821 	bl	8003204 <HAL_RCC_GetSysClockFreq>
 80031c2:	4601      	mov	r1, r0
 80031c4:	4b0b      	ldr	r3, [pc, #44]	; (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	091b      	lsrs	r3, r3, #4
 80031ca:	f003 030f 	and.w	r3, r3, #15
 80031ce:	4a0a      	ldr	r2, [pc, #40]	; (80031f8 <HAL_RCC_ClockConfig+0x1c8>)
 80031d0:	5cd3      	ldrb	r3, [r2, r3]
 80031d2:	fa21 f303 	lsr.w	r3, r1, r3
 80031d6:	4a09      	ldr	r2, [pc, #36]	; (80031fc <HAL_RCC_ClockConfig+0x1cc>)
 80031d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031da:	4b09      	ldr	r3, [pc, #36]	; (8003200 <HAL_RCC_ClockConfig+0x1d0>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4618      	mov	r0, r3
 80031e0:	f7fe f84a 	bl	8001278 <HAL_InitTick>

  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	40022000 	.word	0x40022000
 80031f4:	40021000 	.word	0x40021000
 80031f8:	08004acc 	.word	0x08004acc
 80031fc:	2000000c 	.word	0x2000000c
 8003200:	20000010 	.word	0x20000010

08003204 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003204:	b490      	push	{r4, r7}
 8003206:	b08a      	sub	sp, #40	; 0x28
 8003208:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800320a:	4b2a      	ldr	r3, [pc, #168]	; (80032b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800320c:	1d3c      	adds	r4, r7, #4
 800320e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003210:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003214:	4b28      	ldr	r3, [pc, #160]	; (80032b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003216:	881b      	ldrh	r3, [r3, #0]
 8003218:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800321a:	2300      	movs	r3, #0
 800321c:	61fb      	str	r3, [r7, #28]
 800321e:	2300      	movs	r3, #0
 8003220:	61bb      	str	r3, [r7, #24]
 8003222:	2300      	movs	r3, #0
 8003224:	627b      	str	r3, [r7, #36]	; 0x24
 8003226:	2300      	movs	r3, #0
 8003228:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800322a:	2300      	movs	r3, #0
 800322c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800322e:	4b23      	ldr	r3, [pc, #140]	; (80032bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	f003 030c 	and.w	r3, r3, #12
 800323a:	2b04      	cmp	r3, #4
 800323c:	d002      	beq.n	8003244 <HAL_RCC_GetSysClockFreq+0x40>
 800323e:	2b08      	cmp	r3, #8
 8003240:	d003      	beq.n	800324a <HAL_RCC_GetSysClockFreq+0x46>
 8003242:	e02d      	b.n	80032a0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003244:	4b1e      	ldr	r3, [pc, #120]	; (80032c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003246:	623b      	str	r3, [r7, #32]
      break;
 8003248:	e02d      	b.n	80032a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	0c9b      	lsrs	r3, r3, #18
 800324e:	f003 030f 	and.w	r3, r3, #15
 8003252:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003256:	4413      	add	r3, r2
 8003258:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800325c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d013      	beq.n	8003290 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003268:	4b14      	ldr	r3, [pc, #80]	; (80032bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	0c5b      	lsrs	r3, r3, #17
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003276:	4413      	add	r3, r2
 8003278:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800327c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	4a0f      	ldr	r2, [pc, #60]	; (80032c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003282:	fb02 f203 	mul.w	r2, r2, r3
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	fbb2 f3f3 	udiv	r3, r2, r3
 800328c:	627b      	str	r3, [r7, #36]	; 0x24
 800328e:	e004      	b.n	800329a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	4a0c      	ldr	r2, [pc, #48]	; (80032c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003294:	fb02 f303 	mul.w	r3, r2, r3
 8003298:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329c:	623b      	str	r3, [r7, #32]
      break;
 800329e:	e002      	b.n	80032a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032a0:	4b07      	ldr	r3, [pc, #28]	; (80032c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80032a2:	623b      	str	r3, [r7, #32]
      break;
 80032a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032a6:	6a3b      	ldr	r3, [r7, #32]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3728      	adds	r7, #40	; 0x28
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bc90      	pop	{r4, r7}
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	08004520 	.word	0x08004520
 80032b8:	08004530 	.word	0x08004530
 80032bc:	40021000 	.word	0x40021000
 80032c0:	007a1200 	.word	0x007a1200
 80032c4:	003d0900 	.word	0x003d0900

080032c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032c8:	b480      	push	{r7}
 80032ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032cc:	4b02      	ldr	r3, [pc, #8]	; (80032d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80032ce:	681b      	ldr	r3, [r3, #0]
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bc80      	pop	{r7}
 80032d6:	4770      	bx	lr
 80032d8:	2000000c 	.word	0x2000000c

080032dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032e0:	f7ff fff2 	bl	80032c8 <HAL_RCC_GetHCLKFreq>
 80032e4:	4601      	mov	r1, r0
 80032e6:	4b05      	ldr	r3, [pc, #20]	; (80032fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	0a1b      	lsrs	r3, r3, #8
 80032ec:	f003 0307 	and.w	r3, r3, #7
 80032f0:	4a03      	ldr	r2, [pc, #12]	; (8003300 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032f2:	5cd3      	ldrb	r3, [r2, r3]
 80032f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	40021000 	.word	0x40021000
 8003300:	08004adc 	.word	0x08004adc

08003304 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003308:	f7ff ffde 	bl	80032c8 <HAL_RCC_GetHCLKFreq>
 800330c:	4601      	mov	r1, r0
 800330e:	4b05      	ldr	r3, [pc, #20]	; (8003324 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	0adb      	lsrs	r3, r3, #11
 8003314:	f003 0307 	and.w	r3, r3, #7
 8003318:	4a03      	ldr	r2, [pc, #12]	; (8003328 <HAL_RCC_GetPCLK2Freq+0x24>)
 800331a:	5cd3      	ldrb	r3, [r2, r3]
 800331c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003320:	4618      	mov	r0, r3
 8003322:	bd80      	pop	{r7, pc}
 8003324:	40021000 	.word	0x40021000
 8003328:	08004adc 	.word	0x08004adc

0800332c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003334:	4b0a      	ldr	r3, [pc, #40]	; (8003360 <RCC_Delay+0x34>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a0a      	ldr	r2, [pc, #40]	; (8003364 <RCC_Delay+0x38>)
 800333a:	fba2 2303 	umull	r2, r3, r2, r3
 800333e:	0a5b      	lsrs	r3, r3, #9
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	fb02 f303 	mul.w	r3, r2, r3
 8003346:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003348:	bf00      	nop
  }
  while (Delay --);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	1e5a      	subs	r2, r3, #1
 800334e:	60fa      	str	r2, [r7, #12]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d1f9      	bne.n	8003348 <RCC_Delay+0x1c>
}
 8003354:	bf00      	nop
 8003356:	3714      	adds	r7, #20
 8003358:	46bd      	mov	sp, r7
 800335a:	bc80      	pop	{r7}
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	2000000c 	.word	0x2000000c
 8003364:	10624dd3 	.word	0x10624dd3

08003368 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e01d      	b.n	80033b6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d106      	bne.n	8003394 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7fd fc80 	bl	8000c94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2202      	movs	r2, #2
 8003398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	3304      	adds	r3, #4
 80033a4:	4619      	mov	r1, r3
 80033a6:	4610      	mov	r0, r2
 80033a8:	f000 fa18 	bl	80037dc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033be:	b480      	push	{r7}
 80033c0:	b085      	sub	sp, #20
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68da      	ldr	r2, [r3, #12]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f042 0201 	orr.w	r2, r2, #1
 80033d4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f003 0307 	and.w	r3, r3, #7
 80033e0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2b06      	cmp	r3, #6
 80033e6:	d007      	beq.n	80033f8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f042 0201 	orr.w	r2, r2, #1
 80033f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3714      	adds	r7, #20
 80033fe:	46bd      	mov	sp, r7
 8003400:	bc80      	pop	{r7}
 8003402:	4770      	bx	lr

08003404 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b02      	cmp	r3, #2
 8003418:	d122      	bne.n	8003460 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b02      	cmp	r3, #2
 8003426:	d11b      	bne.n	8003460 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f06f 0202 	mvn.w	r2, #2
 8003430:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	f003 0303 	and.w	r3, r3, #3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f9ad 	bl	80037a6 <HAL_TIM_IC_CaptureCallback>
 800344c:	e005      	b.n	800345a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f9a0 	bl	8003794 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 f9af 	bl	80037b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	f003 0304 	and.w	r3, r3, #4
 800346a:	2b04      	cmp	r3, #4
 800346c:	d122      	bne.n	80034b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	f003 0304 	and.w	r3, r3, #4
 8003478:	2b04      	cmp	r3, #4
 800347a:	d11b      	bne.n	80034b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f06f 0204 	mvn.w	r2, #4
 8003484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2202      	movs	r2, #2
 800348a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003496:	2b00      	cmp	r3, #0
 8003498:	d003      	beq.n	80034a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f983 	bl	80037a6 <HAL_TIM_IC_CaptureCallback>
 80034a0:	e005      	b.n	80034ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 f976 	bl	8003794 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 f985 	bl	80037b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	f003 0308 	and.w	r3, r3, #8
 80034be:	2b08      	cmp	r3, #8
 80034c0:	d122      	bne.n	8003508 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	f003 0308 	and.w	r3, r3, #8
 80034cc:	2b08      	cmp	r3, #8
 80034ce:	d11b      	bne.n	8003508 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f06f 0208 	mvn.w	r2, #8
 80034d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2204      	movs	r2, #4
 80034de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	f003 0303 	and.w	r3, r3, #3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d003      	beq.n	80034f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f959 	bl	80037a6 <HAL_TIM_IC_CaptureCallback>
 80034f4:	e005      	b.n	8003502 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f94c 	bl	8003794 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 f95b 	bl	80037b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	f003 0310 	and.w	r3, r3, #16
 8003512:	2b10      	cmp	r3, #16
 8003514:	d122      	bne.n	800355c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	f003 0310 	and.w	r3, r3, #16
 8003520:	2b10      	cmp	r3, #16
 8003522:	d11b      	bne.n	800355c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f06f 0210 	mvn.w	r2, #16
 800352c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2208      	movs	r2, #8
 8003532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	69db      	ldr	r3, [r3, #28]
 800353a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f92f 	bl	80037a6 <HAL_TIM_IC_CaptureCallback>
 8003548:	e005      	b.n	8003556 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f922 	bl	8003794 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 f931 	bl	80037b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b01      	cmp	r3, #1
 8003568:	d10e      	bne.n	8003588 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b01      	cmp	r3, #1
 8003576:	d107      	bne.n	8003588 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f06f 0201 	mvn.w	r2, #1
 8003580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f8fd 	bl	8003782 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003592:	2b80      	cmp	r3, #128	; 0x80
 8003594:	d10e      	bne.n	80035b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a0:	2b80      	cmp	r3, #128	; 0x80
 80035a2:	d107      	bne.n	80035b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 fa59 	bl	8003a66 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035be:	2b40      	cmp	r3, #64	; 0x40
 80035c0:	d10e      	bne.n	80035e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035cc:	2b40      	cmp	r3, #64	; 0x40
 80035ce:	d107      	bne.n	80035e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f8f5 	bl	80037ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	f003 0320 	and.w	r3, r3, #32
 80035ea:	2b20      	cmp	r3, #32
 80035ec:	d10e      	bne.n	800360c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	f003 0320 	and.w	r3, r3, #32
 80035f8:	2b20      	cmp	r3, #32
 80035fa:	d107      	bne.n	800360c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f06f 0220 	mvn.w	r2, #32
 8003604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 fa24 	bl	8003a54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800360c:	bf00      	nop
 800360e:	3708      	adds	r7, #8
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003624:	2b01      	cmp	r3, #1
 8003626:	d101      	bne.n	800362c <HAL_TIM_ConfigClockSource+0x18>
 8003628:	2302      	movs	r3, #2
 800362a:	e0a6      	b.n	800377a <HAL_TIM_ConfigClockSource+0x166>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2202      	movs	r2, #2
 8003638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800364a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003652:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2b40      	cmp	r3, #64	; 0x40
 8003662:	d067      	beq.n	8003734 <HAL_TIM_ConfigClockSource+0x120>
 8003664:	2b40      	cmp	r3, #64	; 0x40
 8003666:	d80b      	bhi.n	8003680 <HAL_TIM_ConfigClockSource+0x6c>
 8003668:	2b10      	cmp	r3, #16
 800366a:	d073      	beq.n	8003754 <HAL_TIM_ConfigClockSource+0x140>
 800366c:	2b10      	cmp	r3, #16
 800366e:	d802      	bhi.n	8003676 <HAL_TIM_ConfigClockSource+0x62>
 8003670:	2b00      	cmp	r3, #0
 8003672:	d06f      	beq.n	8003754 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003674:	e078      	b.n	8003768 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003676:	2b20      	cmp	r3, #32
 8003678:	d06c      	beq.n	8003754 <HAL_TIM_ConfigClockSource+0x140>
 800367a:	2b30      	cmp	r3, #48	; 0x30
 800367c:	d06a      	beq.n	8003754 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800367e:	e073      	b.n	8003768 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003680:	2b70      	cmp	r3, #112	; 0x70
 8003682:	d00d      	beq.n	80036a0 <HAL_TIM_ConfigClockSource+0x8c>
 8003684:	2b70      	cmp	r3, #112	; 0x70
 8003686:	d804      	bhi.n	8003692 <HAL_TIM_ConfigClockSource+0x7e>
 8003688:	2b50      	cmp	r3, #80	; 0x50
 800368a:	d033      	beq.n	80036f4 <HAL_TIM_ConfigClockSource+0xe0>
 800368c:	2b60      	cmp	r3, #96	; 0x60
 800368e:	d041      	beq.n	8003714 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003690:	e06a      	b.n	8003768 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003692:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003696:	d066      	beq.n	8003766 <HAL_TIM_ConfigClockSource+0x152>
 8003698:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800369c:	d017      	beq.n	80036ce <HAL_TIM_ConfigClockSource+0xba>
      break;
 800369e:	e063      	b.n	8003768 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6818      	ldr	r0, [r3, #0]
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	6899      	ldr	r1, [r3, #8]
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685a      	ldr	r2, [r3, #4]
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	f000 f96d 	bl	800398e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80036c2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	609a      	str	r2, [r3, #8]
      break;
 80036cc:	e04c      	b.n	8003768 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6818      	ldr	r0, [r3, #0]
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	6899      	ldr	r1, [r3, #8]
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	685a      	ldr	r2, [r3, #4]
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	f000 f956 	bl	800398e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036f0:	609a      	str	r2, [r3, #8]
      break;
 80036f2:	e039      	b.n	8003768 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6818      	ldr	r0, [r3, #0]
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	6859      	ldr	r1, [r3, #4]
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	461a      	mov	r2, r3
 8003702:	f000 f8cd 	bl	80038a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2150      	movs	r1, #80	; 0x50
 800370c:	4618      	mov	r0, r3
 800370e:	f000 f924 	bl	800395a <TIM_ITRx_SetConfig>
      break;
 8003712:	e029      	b.n	8003768 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6818      	ldr	r0, [r3, #0]
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	6859      	ldr	r1, [r3, #4]
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	461a      	mov	r2, r3
 8003722:	f000 f8eb 	bl	80038fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2160      	movs	r1, #96	; 0x60
 800372c:	4618      	mov	r0, r3
 800372e:	f000 f914 	bl	800395a <TIM_ITRx_SetConfig>
      break;
 8003732:	e019      	b.n	8003768 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6818      	ldr	r0, [r3, #0]
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	6859      	ldr	r1, [r3, #4]
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	461a      	mov	r2, r3
 8003742:	f000 f8ad 	bl	80038a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2140      	movs	r1, #64	; 0x40
 800374c:	4618      	mov	r0, r3
 800374e:	f000 f904 	bl	800395a <TIM_ITRx_SetConfig>
      break;
 8003752:	e009      	b.n	8003768 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4619      	mov	r1, r3
 800375e:	4610      	mov	r0, r2
 8003760:	f000 f8fb 	bl	800395a <TIM_ITRx_SetConfig>
      break;
 8003764:	e000      	b.n	8003768 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003766:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003782:	b480      	push	{r7}
 8003784:	b083      	sub	sp, #12
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800378a:	bf00      	nop
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	bc80      	pop	{r7}
 8003792:	4770      	bx	lr

08003794 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bc80      	pop	{r7}
 80037a4:	4770      	bx	lr

080037a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037a6:	b480      	push	{r7}
 80037a8:	b083      	sub	sp, #12
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037ae:	bf00      	nop
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bc80      	pop	{r7}
 80037b6:	4770      	bx	lr

080037b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bc80      	pop	{r7}
 80037c8:	4770      	bx	lr

080037ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037ca:	b480      	push	{r7}
 80037cc:	b083      	sub	sp, #12
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037d2:	bf00      	nop
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bc80      	pop	{r7}
 80037da:	4770      	bx	lr

080037dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a29      	ldr	r2, [pc, #164]	; (8003894 <TIM_Base_SetConfig+0xb8>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d00b      	beq.n	800380c <TIM_Base_SetConfig+0x30>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037fa:	d007      	beq.n	800380c <TIM_Base_SetConfig+0x30>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a26      	ldr	r2, [pc, #152]	; (8003898 <TIM_Base_SetConfig+0xbc>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d003      	beq.n	800380c <TIM_Base_SetConfig+0x30>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a25      	ldr	r2, [pc, #148]	; (800389c <TIM_Base_SetConfig+0xc0>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d108      	bne.n	800381e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003812:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	68fa      	ldr	r2, [r7, #12]
 800381a:	4313      	orrs	r3, r2
 800381c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a1c      	ldr	r2, [pc, #112]	; (8003894 <TIM_Base_SetConfig+0xb8>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d00b      	beq.n	800383e <TIM_Base_SetConfig+0x62>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800382c:	d007      	beq.n	800383e <TIM_Base_SetConfig+0x62>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a19      	ldr	r2, [pc, #100]	; (8003898 <TIM_Base_SetConfig+0xbc>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d003      	beq.n	800383e <TIM_Base_SetConfig+0x62>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a18      	ldr	r2, [pc, #96]	; (800389c <TIM_Base_SetConfig+0xc0>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d108      	bne.n	8003850 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003844:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	4313      	orrs	r3, r2
 800384e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	695b      	ldr	r3, [r3, #20]
 800385a:	4313      	orrs	r3, r2
 800385c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	689a      	ldr	r2, [r3, #8]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a07      	ldr	r2, [pc, #28]	; (8003894 <TIM_Base_SetConfig+0xb8>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d103      	bne.n	8003884 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	691a      	ldr	r2, [r3, #16]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	615a      	str	r2, [r3, #20]
}
 800388a:	bf00      	nop
 800388c:	3714      	adds	r7, #20
 800388e:	46bd      	mov	sp, r7
 8003890:	bc80      	pop	{r7}
 8003892:	4770      	bx	lr
 8003894:	40012c00 	.word	0x40012c00
 8003898:	40000400 	.word	0x40000400
 800389c:	40000800 	.word	0x40000800

080038a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b087      	sub	sp, #28
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	f023 0201 	bic.w	r2, r3, #1
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	011b      	lsls	r3, r3, #4
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	f023 030a 	bic.w	r3, r3, #10
 80038dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038de:	697a      	ldr	r2, [r7, #20]
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	621a      	str	r2, [r3, #32]
}
 80038f2:	bf00      	nop
 80038f4:	371c      	adds	r7, #28
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bc80      	pop	{r7}
 80038fa:	4770      	bx	lr

080038fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b087      	sub	sp, #28
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6a1b      	ldr	r3, [r3, #32]
 800390c:	f023 0210 	bic.w	r2, r3, #16
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003926:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	031b      	lsls	r3, r3, #12
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	4313      	orrs	r3, r2
 8003930:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003938:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	011b      	lsls	r3, r3, #4
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	4313      	orrs	r3, r2
 8003942:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	621a      	str	r2, [r3, #32]
}
 8003950:	bf00      	nop
 8003952:	371c      	adds	r7, #28
 8003954:	46bd      	mov	sp, r7
 8003956:	bc80      	pop	{r7}
 8003958:	4770      	bx	lr

0800395a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800395a:	b480      	push	{r7}
 800395c:	b085      	sub	sp, #20
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
 8003962:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003970:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003972:	683a      	ldr	r2, [r7, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	4313      	orrs	r3, r2
 8003978:	f043 0307 	orr.w	r3, r3, #7
 800397c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	609a      	str	r2, [r3, #8]
}
 8003984:	bf00      	nop
 8003986:	3714      	adds	r7, #20
 8003988:	46bd      	mov	sp, r7
 800398a:	bc80      	pop	{r7}
 800398c:	4770      	bx	lr

0800398e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800398e:	b480      	push	{r7}
 8003990:	b087      	sub	sp, #28
 8003992:	af00      	add	r7, sp, #0
 8003994:	60f8      	str	r0, [r7, #12]
 8003996:	60b9      	str	r1, [r7, #8]
 8003998:	607a      	str	r2, [r7, #4]
 800399a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039a8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	021a      	lsls	r2, r3, #8
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	431a      	orrs	r2, r3
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	609a      	str	r2, [r3, #8]
}
 80039c2:	bf00      	nop
 80039c4:	371c      	adds	r7, #28
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bc80      	pop	{r7}
 80039ca:	4770      	bx	lr

080039cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d101      	bne.n	80039e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039e0:	2302      	movs	r3, #2
 80039e2:	e032      	b.n	8003a4a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2202      	movs	r2, #2
 80039f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a1c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	68ba      	ldr	r2, [r7, #8]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68ba      	ldr	r2, [r7, #8]
 8003a36:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3714      	adds	r7, #20
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bc80      	pop	{r7}
 8003a52:	4770      	bx	lr

08003a54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bc80      	pop	{r7}
 8003a64:	4770      	bx	lr

08003a66 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a66:	b480      	push	{r7}
 8003a68:	b083      	sub	sp, #12
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a6e:	bf00      	nop
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bc80      	pop	{r7}
 8003a76:	4770      	bx	lr

08003a78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e03f      	b.n	8003b0a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d106      	bne.n	8003aa4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7fd f91c 	bl	8000cdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2224      	movs	r2, #36	; 0x24
 8003aa8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68da      	ldr	r2, [r3, #12]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003aba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 fb95 	bl	80041ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	691a      	ldr	r2, [r3, #16]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ad0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	695a      	ldr	r2, [r3, #20]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ae0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68da      	ldr	r2, [r3, #12]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003af0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2220      	movs	r2, #32
 8003afc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2220      	movs	r2, #32
 8003b04:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b088      	sub	sp, #32
 8003b16:	af02      	add	r7, sp, #8
 8003b18:	60f8      	str	r0, [r7, #12]
 8003b1a:	60b9      	str	r1, [r7, #8]
 8003b1c:	603b      	str	r3, [r7, #0]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003b22:	2300      	movs	r3, #0
 8003b24:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b20      	cmp	r3, #32
 8003b30:	f040 8083 	bne.w	8003c3a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d002      	beq.n	8003b40 <HAL_UART_Transmit+0x2e>
 8003b3a:	88fb      	ldrh	r3, [r7, #6]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d101      	bne.n	8003b44 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e07b      	b.n	8003c3c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d101      	bne.n	8003b52 <HAL_UART_Transmit+0x40>
 8003b4e:	2302      	movs	r3, #2
 8003b50:	e074      	b.n	8003c3c <HAL_UART_Transmit+0x12a>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2201      	movs	r2, #1
 8003b56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2221      	movs	r2, #33	; 0x21
 8003b64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003b68:	f7fd fbc8 	bl	80012fc <HAL_GetTick>
 8003b6c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	88fa      	ldrh	r2, [r7, #6]
 8003b72:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	88fa      	ldrh	r2, [r7, #6]
 8003b78:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b7a:	e042      	b.n	8003c02 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	3b01      	subs	r3, #1
 8003b84:	b29a      	uxth	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b92:	d122      	bne.n	8003bda <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	9300      	str	r3, [sp, #0]
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	2180      	movs	r1, #128	; 0x80
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f000 f9bb 	bl	8003f1a <UART_WaitOnFlagUntilTimeout>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e046      	b.n	8003c3c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	881b      	ldrh	r3, [r3, #0]
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bc0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d103      	bne.n	8003bd2 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	3302      	adds	r3, #2
 8003bce:	60bb      	str	r3, [r7, #8]
 8003bd0:	e017      	b.n	8003c02 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	60bb      	str	r3, [r7, #8]
 8003bd8:	e013      	b.n	8003c02 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	9300      	str	r3, [sp, #0]
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	2200      	movs	r2, #0
 8003be2:	2180      	movs	r1, #128	; 0x80
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f000 f998 	bl	8003f1a <UART_WaitOnFlagUntilTimeout>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d001      	beq.n	8003bf4 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e023      	b.n	8003c3c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	1c5a      	adds	r2, r3, #1
 8003bf8:	60ba      	str	r2, [r7, #8]
 8003bfa:	781a      	ldrb	r2, [r3, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1b7      	bne.n	8003b7c <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	9300      	str	r3, [sp, #0]
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	2200      	movs	r2, #0
 8003c14:	2140      	movs	r1, #64	; 0x40
 8003c16:	68f8      	ldr	r0, [r7, #12]
 8003c18:	f000 f97f 	bl	8003f1a <UART_WaitOnFlagUntilTimeout>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e00a      	b.n	8003c3c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2220      	movs	r2, #32
 8003c2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003c36:	2300      	movs	r3, #0
 8003c38:	e000      	b.n	8003c3c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003c3a:	2302      	movs	r3, #2
  }
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3718      	adds	r7, #24
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b085      	sub	sp, #20
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b20      	cmp	r3, #32
 8003c5c:	d140      	bne.n	8003ce0 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d002      	beq.n	8003c6a <HAL_UART_Receive_IT+0x26>
 8003c64:	88fb      	ldrh	r3, [r7, #6]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e039      	b.n	8003ce2 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d101      	bne.n	8003c7c <HAL_UART_Receive_IT+0x38>
 8003c78:	2302      	movs	r3, #2
 8003c7a:	e032      	b.n	8003ce2 <HAL_UART_Receive_IT+0x9e>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	68ba      	ldr	r2, [r7, #8]
 8003c88:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	88fa      	ldrh	r2, [r7, #6]
 8003c8e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	88fa      	ldrh	r2, [r7, #6]
 8003c94:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2222      	movs	r2, #34	; 0x22
 8003ca0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68da      	ldr	r2, [r3, #12]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cba:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	695a      	ldr	r2, [r3, #20]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f042 0201 	orr.w	r2, r2, #1
 8003cca:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68da      	ldr	r2, [r3, #12]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f042 0220 	orr.w	r2, r2, #32
 8003cda:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	e000      	b.n	8003ce2 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003ce0:	2302      	movs	r3, #2
  }
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bc80      	pop	{r7}
 8003cea:	4770      	bx	lr

08003cec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b088      	sub	sp, #32
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003d10:	2300      	movs	r3, #0
 8003d12:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	f003 030f 	and.w	r3, r3, #15
 8003d1a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10d      	bne.n	8003d3e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	f003 0320 	and.w	r3, r3, #32
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d008      	beq.n	8003d3e <HAL_UART_IRQHandler+0x52>
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	f003 0320 	and.w	r3, r3, #32
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d003      	beq.n	8003d3e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 f9d7 	bl	80040ea <UART_Receive_IT>
      return;
 8003d3c:	e0cc      	b.n	8003ed8 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 80ab 	beq.w	8003e9c <HAL_UART_IRQHandler+0x1b0>
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	f003 0301 	and.w	r3, r3, #1
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d105      	bne.n	8003d5c <HAL_UART_IRQHandler+0x70>
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f000 80a0 	beq.w	8003e9c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00a      	beq.n	8003d7c <HAL_UART_IRQHandler+0x90>
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d005      	beq.n	8003d7c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d74:	f043 0201 	orr.w	r2, r3, #1
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	f003 0304 	and.w	r3, r3, #4
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00a      	beq.n	8003d9c <HAL_UART_IRQHandler+0xb0>
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d005      	beq.n	8003d9c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d94:	f043 0202 	orr.w	r2, r3, #2
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00a      	beq.n	8003dbc <HAL_UART_IRQHandler+0xd0>
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	f003 0301 	and.w	r3, r3, #1
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d005      	beq.n	8003dbc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003db4:	f043 0204 	orr.w	r2, r3, #4
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	f003 0308 	and.w	r3, r3, #8
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00a      	beq.n	8003ddc <HAL_UART_IRQHandler+0xf0>
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d005      	beq.n	8003ddc <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd4:	f043 0208 	orr.w	r2, r3, #8
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d078      	beq.n	8003ed6 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	f003 0320 	and.w	r3, r3, #32
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d007      	beq.n	8003dfe <HAL_UART_IRQHandler+0x112>
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	f003 0320 	and.w	r3, r3, #32
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d002      	beq.n	8003dfe <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 f976 	bl	80040ea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	695b      	ldr	r3, [r3, #20]
 8003e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	bf14      	ite	ne
 8003e0c:	2301      	movne	r3, #1
 8003e0e:	2300      	moveq	r3, #0
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e18:	f003 0308 	and.w	r3, r3, #8
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d102      	bne.n	8003e26 <HAL_UART_IRQHandler+0x13a>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d031      	beq.n	8003e8a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 f8c1 	bl	8003fae <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d023      	beq.n	8003e82 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	695a      	ldr	r2, [r3, #20]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e48:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d013      	beq.n	8003e7a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e56:	4a22      	ldr	r2, [pc, #136]	; (8003ee0 <HAL_UART_IRQHandler+0x1f4>)
 8003e58:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7fd fb86 	bl	8001570 <HAL_DMA_Abort_IT>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d016      	beq.n	8003e98 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e74:	4610      	mov	r0, r2
 8003e76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e78:	e00e      	b.n	8003e98 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 f844 	bl	8003f08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e80:	e00a      	b.n	8003e98 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f840 	bl	8003f08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e88:	e006      	b.n	8003e98 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f83c 	bl	8003f08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003e96:	e01e      	b.n	8003ed6 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e98:	bf00      	nop
    return;
 8003e9a:	e01c      	b.n	8003ed6 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d008      	beq.n	8003eb8 <HAL_UART_IRQHandler+0x1cc>
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d003      	beq.n	8003eb8 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 f8ad 	bl	8004010 <UART_Transmit_IT>
    return;
 8003eb6:	e00f      	b.n	8003ed8 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00a      	beq.n	8003ed8 <HAL_UART_IRQHandler+0x1ec>
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d005      	beq.n	8003ed8 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 f8f4 	bl	80040ba <UART_EndTransmit_IT>
    return;
 8003ed2:	bf00      	nop
 8003ed4:	e000      	b.n	8003ed8 <HAL_UART_IRQHandler+0x1ec>
    return;
 8003ed6:	bf00      	nop
  }
}
 8003ed8:	3720      	adds	r7, #32
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	08003fe9 	.word	0x08003fe9

08003ee4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003eec:	bf00      	nop
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bc80      	pop	{r7}
 8003ef4:	4770      	bx	lr

08003ef6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ef6:	b480      	push	{r7}
 8003ef8:	b083      	sub	sp, #12
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003efe:	bf00      	nop
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bc80      	pop	{r7}
 8003f06:	4770      	bx	lr

08003f08 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bc80      	pop	{r7}
 8003f18:	4770      	bx	lr

08003f1a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b084      	sub	sp, #16
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	60f8      	str	r0, [r7, #12]
 8003f22:	60b9      	str	r1, [r7, #8]
 8003f24:	603b      	str	r3, [r7, #0]
 8003f26:	4613      	mov	r3, r2
 8003f28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f2a:	e02c      	b.n	8003f86 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f32:	d028      	beq.n	8003f86 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d007      	beq.n	8003f4a <UART_WaitOnFlagUntilTimeout+0x30>
 8003f3a:	f7fd f9df 	bl	80012fc <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d21d      	bcs.n	8003f86 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68da      	ldr	r2, [r3, #12]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f58:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	695a      	ldr	r2, [r3, #20]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f022 0201 	bic.w	r2, r2, #1
 8003f68:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2220      	movs	r2, #32
 8003f6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2220      	movs	r2, #32
 8003f76:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e00f      	b.n	8003fa6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	4013      	ands	r3, r2
 8003f90:	68ba      	ldr	r2, [r7, #8]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	bf0c      	ite	eq
 8003f96:	2301      	moveq	r3, #1
 8003f98:	2300      	movne	r3, #0
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	79fb      	ldrb	r3, [r7, #7]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d0c3      	beq.n	8003f2c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3710      	adds	r7, #16
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fae:	b480      	push	{r7}
 8003fb0:	b083      	sub	sp, #12
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68da      	ldr	r2, [r3, #12]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003fc4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	695a      	ldr	r2, [r3, #20]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f022 0201 	bic.w	r2, r2, #1
 8003fd4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2220      	movs	r2, #32
 8003fda:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003fde:	bf00      	nop
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bc80      	pop	{r7}
 8003fe6:	4770      	bx	lr

08003fe8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004002:	68f8      	ldr	r0, [r7, #12]
 8004004:	f7ff ff80 	bl	8003f08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004008:	bf00      	nop
 800400a:	3710      	adds	r7, #16
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004010:	b480      	push	{r7}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800401e:	b2db      	uxtb	r3, r3
 8004020:	2b21      	cmp	r3, #33	; 0x21
 8004022:	d144      	bne.n	80040ae <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800402c:	d11a      	bne.n	8004064 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	881b      	ldrh	r3, [r3, #0]
 8004038:	461a      	mov	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004042:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d105      	bne.n	8004058 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a1b      	ldr	r3, [r3, #32]
 8004050:	1c9a      	adds	r2, r3, #2
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	621a      	str	r2, [r3, #32]
 8004056:	e00e      	b.n	8004076 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a1b      	ldr	r3, [r3, #32]
 800405c:	1c5a      	adds	r2, r3, #1
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	621a      	str	r2, [r3, #32]
 8004062:	e008      	b.n	8004076 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a1b      	ldr	r3, [r3, #32]
 8004068:	1c59      	adds	r1, r3, #1
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	6211      	str	r1, [r2, #32]
 800406e:	781a      	ldrb	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800407a:	b29b      	uxth	r3, r3
 800407c:	3b01      	subs	r3, #1
 800407e:	b29b      	uxth	r3, r3
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	4619      	mov	r1, r3
 8004084:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10f      	bne.n	80040aa <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68da      	ldr	r2, [r3, #12]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004098:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68da      	ldr	r2, [r3, #12]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040a8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80040aa:	2300      	movs	r3, #0
 80040ac:	e000      	b.n	80040b0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80040ae:	2302      	movs	r3, #2
  }
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3714      	adds	r7, #20
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bc80      	pop	{r7}
 80040b8:	4770      	bx	lr

080040ba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b082      	sub	sp, #8
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68da      	ldr	r2, [r3, #12]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040d0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2220      	movs	r2, #32
 80040d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f7ff ff02 	bl	8003ee4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3708      	adds	r7, #8
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b084      	sub	sp, #16
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b22      	cmp	r3, #34	; 0x22
 80040fc:	d171      	bne.n	80041e2 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004106:	d123      	bne.n	8004150 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410c:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10e      	bne.n	8004134 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	b29b      	uxth	r3, r3
 800411e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004122:	b29a      	uxth	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412c:	1c9a      	adds	r2, r3, #2
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	629a      	str	r2, [r3, #40]	; 0x28
 8004132:	e029      	b.n	8004188 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	b29b      	uxth	r3, r3
 800413c:	b2db      	uxtb	r3, r3
 800413e:	b29a      	uxth	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004148:	1c5a      	adds	r2, r3, #1
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	629a      	str	r2, [r3, #40]	; 0x28
 800414e:	e01b      	b.n	8004188 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10a      	bne.n	800416e <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	6858      	ldr	r0, [r3, #4]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004162:	1c59      	adds	r1, r3, #1
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	6291      	str	r1, [r2, #40]	; 0x28
 8004168:	b2c2      	uxtb	r2, r0
 800416a:	701a      	strb	r2, [r3, #0]
 800416c:	e00c      	b.n	8004188 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	b2da      	uxtb	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800417a:	1c58      	adds	r0, r3, #1
 800417c:	6879      	ldr	r1, [r7, #4]
 800417e:	6288      	str	r0, [r1, #40]	; 0x28
 8004180:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004184:	b2d2      	uxtb	r2, r2
 8004186:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800418c:	b29b      	uxth	r3, r3
 800418e:	3b01      	subs	r3, #1
 8004190:	b29b      	uxth	r3, r3
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	4619      	mov	r1, r3
 8004196:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004198:	2b00      	cmp	r3, #0
 800419a:	d120      	bne.n	80041de <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68da      	ldr	r2, [r3, #12]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f022 0220 	bic.w	r2, r2, #32
 80041aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68da      	ldr	r2, [r3, #12]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	695a      	ldr	r2, [r3, #20]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f022 0201 	bic.w	r2, r2, #1
 80041ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2220      	movs	r2, #32
 80041d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f7ff fe8e 	bl	8003ef6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80041da:	2300      	movs	r3, #0
 80041dc:	e002      	b.n	80041e4 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80041de:	2300      	movs	r3, #0
 80041e0:	e000      	b.n	80041e4 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80041e2:	2302      	movs	r3, #2
  }
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3710      	adds	r7, #16
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	68da      	ldr	r2, [r3, #12]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	430a      	orrs	r2, r1
 8004208:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	689a      	ldr	r2, [r3, #8]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	431a      	orrs	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	695b      	ldr	r3, [r3, #20]
 8004218:	4313      	orrs	r3, r2
 800421a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004226:	f023 030c 	bic.w	r3, r3, #12
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	6812      	ldr	r2, [r2, #0]
 800422e:	68f9      	ldr	r1, [r7, #12]
 8004230:	430b      	orrs	r3, r1
 8004232:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	699a      	ldr	r2, [r3, #24]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	430a      	orrs	r2, r1
 8004248:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a52      	ldr	r2, [pc, #328]	; (8004398 <UART_SetConfig+0x1ac>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d14e      	bne.n	80042f2 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004254:	f7ff f856 	bl	8003304 <HAL_RCC_GetPCLK2Freq>
 8004258:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800425a:	68ba      	ldr	r2, [r7, #8]
 800425c:	4613      	mov	r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	4413      	add	r3, r2
 8004262:	009a      	lsls	r2, r3, #2
 8004264:	441a      	add	r2, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004270:	4a4a      	ldr	r2, [pc, #296]	; (800439c <UART_SetConfig+0x1b0>)
 8004272:	fba2 2303 	umull	r2, r3, r2, r3
 8004276:	095b      	lsrs	r3, r3, #5
 8004278:	0119      	lsls	r1, r3, #4
 800427a:	68ba      	ldr	r2, [r7, #8]
 800427c:	4613      	mov	r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	4413      	add	r3, r2
 8004282:	009a      	lsls	r2, r3, #2
 8004284:	441a      	add	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004290:	4b42      	ldr	r3, [pc, #264]	; (800439c <UART_SetConfig+0x1b0>)
 8004292:	fba3 0302 	umull	r0, r3, r3, r2
 8004296:	095b      	lsrs	r3, r3, #5
 8004298:	2064      	movs	r0, #100	; 0x64
 800429a:	fb00 f303 	mul.w	r3, r0, r3
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	011b      	lsls	r3, r3, #4
 80042a2:	3332      	adds	r3, #50	; 0x32
 80042a4:	4a3d      	ldr	r2, [pc, #244]	; (800439c <UART_SetConfig+0x1b0>)
 80042a6:	fba2 2303 	umull	r2, r3, r2, r3
 80042aa:	095b      	lsrs	r3, r3, #5
 80042ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042b0:	4419      	add	r1, r3
 80042b2:	68ba      	ldr	r2, [r7, #8]
 80042b4:	4613      	mov	r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	4413      	add	r3, r2
 80042ba:	009a      	lsls	r2, r3, #2
 80042bc:	441a      	add	r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80042c8:	4b34      	ldr	r3, [pc, #208]	; (800439c <UART_SetConfig+0x1b0>)
 80042ca:	fba3 0302 	umull	r0, r3, r3, r2
 80042ce:	095b      	lsrs	r3, r3, #5
 80042d0:	2064      	movs	r0, #100	; 0x64
 80042d2:	fb00 f303 	mul.w	r3, r0, r3
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	011b      	lsls	r3, r3, #4
 80042da:	3332      	adds	r3, #50	; 0x32
 80042dc:	4a2f      	ldr	r2, [pc, #188]	; (800439c <UART_SetConfig+0x1b0>)
 80042de:	fba2 2303 	umull	r2, r3, r2, r3
 80042e2:	095b      	lsrs	r3, r3, #5
 80042e4:	f003 020f 	and.w	r2, r3, #15
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	440a      	add	r2, r1
 80042ee:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80042f0:	e04d      	b.n	800438e <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80042f2:	f7fe fff3 	bl	80032dc <HAL_RCC_GetPCLK1Freq>
 80042f6:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	4613      	mov	r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	4413      	add	r3, r2
 8004300:	009a      	lsls	r2, r3, #2
 8004302:	441a      	add	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	fbb2 f3f3 	udiv	r3, r2, r3
 800430e:	4a23      	ldr	r2, [pc, #140]	; (800439c <UART_SetConfig+0x1b0>)
 8004310:	fba2 2303 	umull	r2, r3, r2, r3
 8004314:	095b      	lsrs	r3, r3, #5
 8004316:	0119      	lsls	r1, r3, #4
 8004318:	68ba      	ldr	r2, [r7, #8]
 800431a:	4613      	mov	r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	4413      	add	r3, r2
 8004320:	009a      	lsls	r2, r3, #2
 8004322:	441a      	add	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	fbb2 f2f3 	udiv	r2, r2, r3
 800432e:	4b1b      	ldr	r3, [pc, #108]	; (800439c <UART_SetConfig+0x1b0>)
 8004330:	fba3 0302 	umull	r0, r3, r3, r2
 8004334:	095b      	lsrs	r3, r3, #5
 8004336:	2064      	movs	r0, #100	; 0x64
 8004338:	fb00 f303 	mul.w	r3, r0, r3
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	011b      	lsls	r3, r3, #4
 8004340:	3332      	adds	r3, #50	; 0x32
 8004342:	4a16      	ldr	r2, [pc, #88]	; (800439c <UART_SetConfig+0x1b0>)
 8004344:	fba2 2303 	umull	r2, r3, r2, r3
 8004348:	095b      	lsrs	r3, r3, #5
 800434a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800434e:	4419      	add	r1, r3
 8004350:	68ba      	ldr	r2, [r7, #8]
 8004352:	4613      	mov	r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	4413      	add	r3, r2
 8004358:	009a      	lsls	r2, r3, #2
 800435a:	441a      	add	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	fbb2 f2f3 	udiv	r2, r2, r3
 8004366:	4b0d      	ldr	r3, [pc, #52]	; (800439c <UART_SetConfig+0x1b0>)
 8004368:	fba3 0302 	umull	r0, r3, r3, r2
 800436c:	095b      	lsrs	r3, r3, #5
 800436e:	2064      	movs	r0, #100	; 0x64
 8004370:	fb00 f303 	mul.w	r3, r0, r3
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	011b      	lsls	r3, r3, #4
 8004378:	3332      	adds	r3, #50	; 0x32
 800437a:	4a08      	ldr	r2, [pc, #32]	; (800439c <UART_SetConfig+0x1b0>)
 800437c:	fba2 2303 	umull	r2, r3, r2, r3
 8004380:	095b      	lsrs	r3, r3, #5
 8004382:	f003 020f 	and.w	r2, r3, #15
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	440a      	add	r2, r1
 800438c:	609a      	str	r2, [r3, #8]
}
 800438e:	bf00      	nop
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	40013800 	.word	0x40013800
 800439c:	51eb851f 	.word	0x51eb851f

080043a0 <__libc_init_array>:
 80043a0:	b570      	push	{r4, r5, r6, lr}
 80043a2:	2500      	movs	r5, #0
 80043a4:	4e0c      	ldr	r6, [pc, #48]	; (80043d8 <__libc_init_array+0x38>)
 80043a6:	4c0d      	ldr	r4, [pc, #52]	; (80043dc <__libc_init_array+0x3c>)
 80043a8:	1ba4      	subs	r4, r4, r6
 80043aa:	10a4      	asrs	r4, r4, #2
 80043ac:	42a5      	cmp	r5, r4
 80043ae:	d109      	bne.n	80043c4 <__libc_init_array+0x24>
 80043b0:	f000 f894 	bl	80044dc <_init>
 80043b4:	2500      	movs	r5, #0
 80043b6:	4e0a      	ldr	r6, [pc, #40]	; (80043e0 <__libc_init_array+0x40>)
 80043b8:	4c0a      	ldr	r4, [pc, #40]	; (80043e4 <__libc_init_array+0x44>)
 80043ba:	1ba4      	subs	r4, r4, r6
 80043bc:	10a4      	asrs	r4, r4, #2
 80043be:	42a5      	cmp	r5, r4
 80043c0:	d105      	bne.n	80043ce <__libc_init_array+0x2e>
 80043c2:	bd70      	pop	{r4, r5, r6, pc}
 80043c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80043c8:	4798      	blx	r3
 80043ca:	3501      	adds	r5, #1
 80043cc:	e7ee      	b.n	80043ac <__libc_init_array+0xc>
 80043ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80043d2:	4798      	blx	r3
 80043d4:	3501      	adds	r5, #1
 80043d6:	e7f2      	b.n	80043be <__libc_init_array+0x1e>
 80043d8:	08004b0c 	.word	0x08004b0c
 80043dc:	08004b0c 	.word	0x08004b0c
 80043e0:	08004b0c 	.word	0x08004b0c
 80043e4:	08004b10 	.word	0x08004b10

080043e8 <__itoa>:
 80043e8:	1e93      	subs	r3, r2, #2
 80043ea:	2b22      	cmp	r3, #34	; 0x22
 80043ec:	b510      	push	{r4, lr}
 80043ee:	460c      	mov	r4, r1
 80043f0:	d904      	bls.n	80043fc <__itoa+0x14>
 80043f2:	2300      	movs	r3, #0
 80043f4:	461c      	mov	r4, r3
 80043f6:	700b      	strb	r3, [r1, #0]
 80043f8:	4620      	mov	r0, r4
 80043fa:	bd10      	pop	{r4, pc}
 80043fc:	2a0a      	cmp	r2, #10
 80043fe:	d109      	bne.n	8004414 <__itoa+0x2c>
 8004400:	2800      	cmp	r0, #0
 8004402:	da07      	bge.n	8004414 <__itoa+0x2c>
 8004404:	232d      	movs	r3, #45	; 0x2d
 8004406:	700b      	strb	r3, [r1, #0]
 8004408:	2101      	movs	r1, #1
 800440a:	4240      	negs	r0, r0
 800440c:	4421      	add	r1, r4
 800440e:	f000 f827 	bl	8004460 <__utoa>
 8004412:	e7f1      	b.n	80043f8 <__itoa+0x10>
 8004414:	2100      	movs	r1, #0
 8004416:	e7f9      	b.n	800440c <__itoa+0x24>

08004418 <itoa>:
 8004418:	f7ff bfe6 	b.w	80043e8 <__itoa>

0800441c <memcpy>:
 800441c:	b510      	push	{r4, lr}
 800441e:	1e43      	subs	r3, r0, #1
 8004420:	440a      	add	r2, r1
 8004422:	4291      	cmp	r1, r2
 8004424:	d100      	bne.n	8004428 <memcpy+0xc>
 8004426:	bd10      	pop	{r4, pc}
 8004428:	f811 4b01 	ldrb.w	r4, [r1], #1
 800442c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004430:	e7f7      	b.n	8004422 <memcpy+0x6>

08004432 <memset>:
 8004432:	4603      	mov	r3, r0
 8004434:	4402      	add	r2, r0
 8004436:	4293      	cmp	r3, r2
 8004438:	d100      	bne.n	800443c <memset+0xa>
 800443a:	4770      	bx	lr
 800443c:	f803 1b01 	strb.w	r1, [r3], #1
 8004440:	e7f9      	b.n	8004436 <memset+0x4>

08004442 <strcat>:
 8004442:	4603      	mov	r3, r0
 8004444:	b510      	push	{r4, lr}
 8004446:	781a      	ldrb	r2, [r3, #0]
 8004448:	1c5c      	adds	r4, r3, #1
 800444a:	b93a      	cbnz	r2, 800445c <strcat+0x1a>
 800444c:	3b01      	subs	r3, #1
 800444e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004452:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004456:	2a00      	cmp	r2, #0
 8004458:	d1f9      	bne.n	800444e <strcat+0xc>
 800445a:	bd10      	pop	{r4, pc}
 800445c:	4623      	mov	r3, r4
 800445e:	e7f2      	b.n	8004446 <strcat+0x4>

08004460 <__utoa>:
 8004460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004462:	b08b      	sub	sp, #44	; 0x2c
 8004464:	4605      	mov	r5, r0
 8004466:	460c      	mov	r4, r1
 8004468:	466e      	mov	r6, sp
 800446a:	4b1b      	ldr	r3, [pc, #108]	; (80044d8 <__utoa+0x78>)
 800446c:	f103 0c20 	add.w	ip, r3, #32
 8004470:	4637      	mov	r7, r6
 8004472:	6818      	ldr	r0, [r3, #0]
 8004474:	6859      	ldr	r1, [r3, #4]
 8004476:	3308      	adds	r3, #8
 8004478:	c703      	stmia	r7!, {r0, r1}
 800447a:	4563      	cmp	r3, ip
 800447c:	463e      	mov	r6, r7
 800447e:	d1f7      	bne.n	8004470 <__utoa+0x10>
 8004480:	6818      	ldr	r0, [r3, #0]
 8004482:	791b      	ldrb	r3, [r3, #4]
 8004484:	6038      	str	r0, [r7, #0]
 8004486:	713b      	strb	r3, [r7, #4]
 8004488:	1e93      	subs	r3, r2, #2
 800448a:	2b22      	cmp	r3, #34	; 0x22
 800448c:	f04f 0300 	mov.w	r3, #0
 8004490:	d904      	bls.n	800449c <__utoa+0x3c>
 8004492:	7023      	strb	r3, [r4, #0]
 8004494:	461c      	mov	r4, r3
 8004496:	4620      	mov	r0, r4
 8004498:	b00b      	add	sp, #44	; 0x2c
 800449a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800449c:	1e66      	subs	r6, r4, #1
 800449e:	fbb5 f0f2 	udiv	r0, r5, r2
 80044a2:	fb02 5510 	mls	r5, r2, r0, r5
 80044a6:	af0a      	add	r7, sp, #40	; 0x28
 80044a8:	443d      	add	r5, r7
 80044aa:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 80044ae:	1c59      	adds	r1, r3, #1
 80044b0:	f806 5f01 	strb.w	r5, [r6, #1]!
 80044b4:	4605      	mov	r5, r0
 80044b6:	b968      	cbnz	r0, 80044d4 <__utoa+0x74>
 80044b8:	4622      	mov	r2, r4
 80044ba:	5460      	strb	r0, [r4, r1]
 80044bc:	4423      	add	r3, r4
 80044be:	1b19      	subs	r1, r3, r4
 80044c0:	1b10      	subs	r0, r2, r4
 80044c2:	4281      	cmp	r1, r0
 80044c4:	dde7      	ble.n	8004496 <__utoa+0x36>
 80044c6:	7811      	ldrb	r1, [r2, #0]
 80044c8:	7818      	ldrb	r0, [r3, #0]
 80044ca:	f802 0b01 	strb.w	r0, [r2], #1
 80044ce:	f803 1901 	strb.w	r1, [r3], #-1
 80044d2:	e7f4      	b.n	80044be <__utoa+0x5e>
 80044d4:	460b      	mov	r3, r1
 80044d6:	e7e2      	b.n	800449e <__utoa+0x3e>
 80044d8:	08004ae4 	.word	0x08004ae4

080044dc <_init>:
 80044dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044de:	bf00      	nop
 80044e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044e2:	bc08      	pop	{r3}
 80044e4:	469e      	mov	lr, r3
 80044e6:	4770      	bx	lr

080044e8 <_fini>:
 80044e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ea:	bf00      	nop
 80044ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ee:	bc08      	pop	{r3}
 80044f0:	469e      	mov	lr, r3
 80044f2:	4770      	bx	lr
